// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/warp_dart.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class WarpDartBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WarpDartBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WarpDartBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r = _srand48_rPtr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray1(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray1(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray1 = _reallocarray1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  G_div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv = _lldivPtr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  void constellationadapter_free(
    ffi.Pointer<G_ConstellationAdapter> ptr,
  ) {
    return _constellationadapter_free(
      ptr,
    );
  }

  late final _constellationadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellationadapter_free');
  late final _constellationadapter_free = _constellationadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_ConstellationAdapter>)>();

  void ffivec_directory_free(
    ffi.Pointer<G_FFIVec_Directory> cvec,
  ) {
    return _ffivec_directory_free(
      cvec,
    );
  }

  late final _ffivec_directory_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Directory>)>>('ffivec_directory_free');
  late final _ffivec_directory_free = _ffivec_directory_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Directory>)>();

  void directory_free(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_free(
      ptr,
    );
  }

  late final _directory_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Directory>)>>(
          'directory_free');
  late final _directory_free =
      _directory_freePtr.asFunction<void Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Directory> directory_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_new(
      name,
    );
  }

  late final _directory_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<ffi.Char>)>>('directory_new');
  late final _directory_new = _directory_newPtr
      .asFunction<ffi.Pointer<G_Directory> Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null directory_add_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Item> item,
  ) {
    return _directory_add_item(
      dir_ptr,
      item,
    );
  }

  late final _directory_add_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Item>)>>('directory_add_item');
  late final _directory_add_item = _directory_add_itemPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Item>)>();

  G_FFIResult_Null directory_add_directory(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_add_directory(
      dir_ptr,
      directory,
    );
  }

  late final _directory_add_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Directory>)>>('directory_add_directory');
  late final _directory_add_directory = _directory_add_directoryPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Directory>)>();

  G_FFIResult_Null directory_add_file(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_File> file,
  ) {
    return _directory_add_file(
      dir_ptr,
      file,
    );
  }

  late final _directory_add_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_File>)>>('directory_add_file');
  late final _directory_add_file = _directory_add_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_File>)>();

  G_FFIResult_usize directory_get_item_index(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_get_item_index(
      dir_ptr,
      name,
    );
  }

  late final _directory_get_item_indexPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_usize Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_get_item_index');
  late final _directory_get_item_index =
      _directory_get_item_indexPtr.asFunction<
          G_FFIResult_usize Function(
              ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null directory_rename_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> current_name,
    ffi.Pointer<ffi.Char> new_name,
  ) {
    return _directory_rename_item(
      dir_ptr,
      current_name,
      new_name,
    );
  }

  late final _directory_rename_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_rename_item');
  late final _directory_rename_item = _directory_rename_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Item directory_remove_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_remove_item(
      dir_ptr,
      name,
    );
  }

  late final _directory_remove_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_remove_item');
  late final _directory_remove_item = _directory_remove_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  bool directory_has_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_has_item(
      ptr,
      item,
    );
  }

  late final _directory_has_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_has_item');
  late final _directory_has_item = _directory_has_itemPtr.asFunction<
      bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_FFIVec_Item> directory_get_items(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_get_items(
      ptr,
    );
  }

  late final _directory_get_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_get_items');
  late final _directory_get_items = _directory_get_itemsPtr.asFunction<
      ffi.Pointer<G_FFIVec_Item> Function(ffi.Pointer<G_Directory>)>();

  G_FFIResult_Item directory_get_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_get_item(
      ptr,
      item,
    );
  }

  late final _directory_get_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_get_item');
  late final _directory_get_item = _directory_get_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Item directory_remove_item_from_path(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> directory,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_remove_item_from_path(
      ptr,
      directory,
      item,
    );
  }

  late final _directory_remove_item_from_pathPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_remove_item_from_path');
  late final _directory_remove_item_from_path =
      _directory_remove_item_from_pathPtr.asFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool directory_move_item_to(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
  ) {
    return _directory_move_item_to(
      ptr,
      src,
      dst,
    );
  }

  late final _directory_move_item_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_move_item_to');
  late final _directory_move_item_to = _directory_move_item_toPtr.asFunction<
      bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> directory_id(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_id(
      dir,
    );
  }

  late final _directory_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_id');
  late final _directory_id = _directory_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Char> directory_name(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_name(
      dir,
    );
  }

  late final _directory_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_name');
  late final _directory_name = _directory_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Char> directory_description(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_description(
      dir,
    );
  }

  late final _directory_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_description');
  late final _directory_description = _directory_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  int directory_size(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_size(
      dir,
    );
  }

  late final _directory_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_size');
  late final _directory_size =
      _directory_sizePtr.asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_creation(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_creation(
      dir,
    );
  }

  late final _directory_creationPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_creation');
  late final _directory_creation = _directory_creationPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_modified(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_modified(
      dir,
    );
  }

  late final _directory_modifiedPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_modified');
  late final _directory_modified = _directory_modifiedPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  void ffivec_file_free(
    ffi.Pointer<G_FFIVec_File> cvec,
  ) {
    return _ffivec_file_free(
      cvec,
    );
  }

  late final _ffivec_file_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_File>)>>(
      'ffivec_file_free');
  late final _ffivec_file_free = _ffivec_file_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_File>)>();

  void file_free(
    ffi.Pointer<G_File> ptr,
  ) {
    return _file_free(
      ptr,
    );
  }

  late final _file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_File>)>>(
          'file_free');
  late final _file_free =
      _file_freePtr.asFunction<void Function(ffi.Pointer<G_File>)>();

  ffi.Pointer<G_File> file_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _file_new(
      name,
    );
  }

  late final _file_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Char>)>>('file_new');
  late final _file_new = _file_newPtr
      .asFunction<ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Char>)>();

  void ffivec_item_free(
    ffi.Pointer<G_FFIVec_Item> cvec,
  ) {
    return _ffivec_item_free(
      cvec,
    );
  }

  late final _ffivec_item_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Item>)>>(
      'ffivec_item_free');
  late final _ffivec_item_free = _ffivec_item_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Item>)>();

  void item_free(
    ffi.Pointer<G_Item> ptr,
  ) {
    return _item_free(
      ptr,
    );
  }

  late final _item_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Item>)>>(
          'item_free');
  late final _item_free =
      _item_freePtr.asFunction<void Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<G_Item> directory_into_item(
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_into_item(
      directory,
    );
  }

  late final _directory_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_into_item');
  late final _directory_into_item = _directory_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Item> file_into_item(
    ffi.Pointer<G_File> file,
  ) {
    return _file_into_item(
      file,
    );
  }

  late final _file_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>>('file_into_item');
  late final _file_into_item = _file_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>();

  G_FFIResult_Directory item_into_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_directory(
      item,
    );
  }

  late final _item_into_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_Item>)>>('item_into_directory');
  late final _item_into_directory = _item_into_directoryPtr
      .asFunction<G_FFIResult_Directory Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_File item_into_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_file(
      item,
    );
  }

  late final _item_into_filePtr = _lookup<
          ffi.NativeFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>>(
      'item_into_file');
  late final _item_into_file = _item_into_filePtr
      .asFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_id(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_id(
      item,
    );
  }

  late final _item_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>>('item_id');
  late final _item_id = _item_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_creation(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_creation(
      item,
    );
  }

  late final _item_creationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_creation');
  late final _item_creation = _item_creationPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_modified(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_modified(
      item,
    );
  }

  late final _item_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_modified');
  late final _item_modified = _item_modifiedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_name(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_name(
      item,
    );
  }

  late final _item_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>>('item_name');
  late final _item_name = _item_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_description(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_description(
      item,
    );
  }

  late final _item_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_description');
  late final _item_description = _item_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  int item_size(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_size(
      item,
    );
  }

  late final _item_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Item>)>>(
          'item_size');
  late final _item_size =
      _item_sizePtr.asFunction<int Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_Null item_rename(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _item_rename(
      item,
      name,
    );
  }

  late final _item_renamePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>>('item_rename');
  late final _item_rename = _item_renamePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>();

  bool item_is_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_directory(
      item,
    );
  }

  late final _item_is_directoryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Item>)>>(
          'item_is_directory');
  late final _item_is_directory =
      _item_is_directoryPtr.asFunction<bool Function(ffi.Pointer<G_Item>)>();

  bool item_is_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_file(
      item,
    );
  }

  late final _item_is_filePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Item>)>>(
          'item_is_file');
  late final _item_is_file =
      _item_is_filePtr.asFunction<bool Function(ffi.Pointer<G_Item>)>();

  bool item_set_description(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Char> desc,
  ) {
    return _item_set_description(
      item,
      desc,
    );
  }

  late final _item_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Item>,
              ffi.Pointer<ffi.Char>)>>('item_set_description');
  late final _item_set_description = _item_set_descriptionPtr
      .asFunction<bool Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null item_set_size(
    ffi.Pointer<G_Item> item,
    int size,
  ) {
    return _item_set_size(
      item,
      size,
    );
  }

  late final _item_set_sizePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Int64)>>('item_set_size');
  late final _item_set_size = _item_set_sizePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Item>, int)>();

  G_FFIResult_Null constellation_select(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _constellation_select(
      ctx,
      name,
    );
  }

  late final _constellation_selectPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_select');
  late final _constellation_select = _constellation_selectPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_go_back(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_go_back(
      ctx,
    );
  }

  late final _constellation_go_backPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>)>>('constellation_go_back');
  late final _constellation_go_back = _constellation_go_backPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Directory constellation_open_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _constellation_open_directory(
      ctx,
      name,
    );
  }

  late final _constellation_open_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_open_directory');
  late final _constellation_open_directory =
      _constellation_open_directoryPtr.asFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_Directory> constellation_root_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_root_directory(
      ctx,
    );
  }

  late final _constellation_root_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_root_directory');
  late final _constellation_root_directory =
      _constellation_root_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory(
      ctx,
    );
  }

  late final _constellation_current_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory');
  late final _constellation_current_directory =
      _constellation_current_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory_mut(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory_mut(
      ctx,
    );
  }

  late final _constellation_current_directory_mutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory_mut');
  late final _constellation_current_directory_mut =
      _constellation_current_directory_mutPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Null constellation_put(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Char> local,
  ) {
    return _constellation_put(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_putPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_put');
  late final _constellation_put = _constellation_putPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_put_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _constellation_put_buffer(
      ctx,
      remote,
      buffer,
      buffer_size,
    );
  }

  late final _constellation_put_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('constellation_put_buffer');
  late final _constellation_put_buffer =
      _constellation_put_bufferPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_Null constellation_get(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Char> local,
  ) {
    return _constellation_get(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_getPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_get');
  late final _constellation_get = _constellation_getPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_FFIVec_u8 constellation_get_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
  ) {
    return _constellation_get_buffer(
      ctx,
      remote,
    );
  }

  late final _constellation_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_get_buffer');
  late final _constellation_get_buffer =
      _constellation_get_bufferPtr.asFunction<
          G_FFIResult_FFIVec_u8 Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_remove(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    bool recursive,
  ) {
    return _constellation_remove(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_removePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Bool)>>('constellation_remove');
  late final _constellation_remove = _constellation_removePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>, bool)>();

  G_FFIResult_Null constellation_create_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    bool recursive,
  ) {
    return _constellation_create_directory(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_create_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('constellation_create_directory');
  late final _constellation_create_directory =
      _constellation_create_directoryPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, bool)>();

  G_FFIResult_Null constellation_move_item(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
  ) {
    return _constellation_move_item(
      ctx,
      src,
      dst,
    );
  }

  late final _constellation_move_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_move_item');
  late final _constellation_move_item = _constellation_move_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_sync_ref(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _constellation_sync_ref(
      ctx,
      src,
    );
  }

  late final _constellation_sync_refPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_sync_ref');
  late final _constellation_sync_ref = _constellation_sync_refPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_String constellation_export(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
  ) {
    return _constellation_export(
      ctx,
      datatype,
    );
  }

  late final _constellation_exportPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32)>>('constellation_export');
  late final _constellation_export = _constellation_exportPtr.asFunction<
      G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>, int)>();

  G_FFIResult_Null constellation_import(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _constellation_import(
      ctx,
      datatype,
      data,
    );
  }

  late final _constellation_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('constellation_import');
  late final _constellation_import = _constellation_importPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, int, ffi.Pointer<ffi.Char>)>();

  void ffivec_did_free(
    ffi.Pointer<G_FFIVec_DID> cvec,
  ) {
    return _ffivec_did_free(
      cvec,
    );
  }

  late final _ffivec_did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_DID>)>>(
          'ffivec_did_free');
  late final _ffivec_did_free = _ffivec_did_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_DID>)>();

  void did_free(
    ffi.Pointer<G_DID> ptr,
  ) {
    return _did_free(
      ptr,
    );
  }

  late final _did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_DID>)>>(
          'did_free');
  late final _did_free =
      _did_freePtr.asFunction<void Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Cipher> cipher_new() {
    return _cipher_new();
  }

  late final _cipher_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Cipher> Function()>>(
          'cipher_new');
  late final _cipher_new =
      _cipher_newPtr.asFunction<ffi.Pointer<G_Cipher> Function()>();

  ffi.Pointer<G_Cipher> cipher_from_bytes(
    ffi.Pointer<ffi.Uint8> key,
    int key_size,
  ) {
    return _cipher_from_bytes(
      key,
      key_size,
    );
  }

  late final _cipher_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Cipher> Function(
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_from_bytes');
  late final _cipher_from_bytes = _cipher_from_bytesPtr.asFunction<
      ffi.Pointer<G_Cipher> Function(ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_encrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_encrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_encrypt');
  late final _cipher_self_encrypt = _cipher_self_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_decrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_decrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_decrypt');
  late final _cipher_self_decrypt = _cipher_self_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_encrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_encrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_encrypt');
  late final _cipher_encrypt = _cipher_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_decrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_decrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_decrypt');
  late final _cipher_decrypt = _cipher_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void x25519secret_free(
    ffi.Pointer<G_X25519Secret> ptr,
  ) {
    return _x25519secret_free(
      ptr,
    );
  }

  late final _x25519secret_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_X25519Secret>)>>(
      'x25519secret_free');
  late final _x25519secret_free = _x25519secret_freePtr
      .asFunction<void Function(ffi.Pointer<G_X25519Secret>)>();

  void x25519publickey_free(
    ffi.Pointer<G_X25519PublicKey> ptr,
  ) {
    return _x25519publickey_free(
      ptr,
    );
  }

  late final _x25519publickey_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_X25519PublicKey>)>>('x25519publickey_free');
  late final _x25519publickey_free = _x25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_X25519PublicKey>)>();

  G_FFIVec_u8 crypto_sha1_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha1_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha1_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha1_hash');
  late final _crypto_sha1_hash = _crypto_sha1_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_sha256_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha256_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha256_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha256_hash');
  late final _crypto_sha256_hash = _crypto_sha256_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_blake2s_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_blake2s_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_blake2s_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_blake2s_hash');
  late final _crypto_blake2s_hash = _crypto_blake2s_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Char> generate_mnemonic_phrase(
    int phrase_type,
  ) {
    return _generate_mnemonic_phrase(
      phrase_type,
    );
  }

  late final _generate_mnemonic_phrasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'generate_mnemonic_phrase');
  late final _generate_mnemonic_phrase = _generate_mnemonic_phrasePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  G_FFIResult_DID did_from_mnemonic(
    ffi.Pointer<ffi.Char> phrase,
  ) {
    return _did_from_mnemonic(
      phrase,
    );
  }

  late final _did_from_mnemonicPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>>(
      'did_from_mnemonic');
  late final _did_from_mnemonic = _did_from_mnemonicPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null mnemonic_into_tesseract(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> phrase,
  ) {
    return _mnemonic_into_tesseract(
      tesseract,
      phrase,
    );
  }

  late final _mnemonic_into_tesseractPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('mnemonic_into_tesseract');
  late final _mnemonic_into_tesseract = _mnemonic_into_tesseractPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void ed25519keypair_free(
    ffi.Pointer<G_Ed25519Keypair> ptr,
  ) {
    return _ed25519keypair_free(
      ptr,
    );
  }

  late final _ed25519keypair_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Ed25519Keypair>)>>(
      'ed25519keypair_free');
  late final _ed25519keypair_free = _ed25519keypair_freePtr
      .asFunction<void Function(ffi.Pointer<G_Ed25519Keypair>)>();

  void ffivec_ed25519publickey_free(
    ffi.Pointer<G_FFIVec_Ed25519PublicKey> cvec,
  ) {
    return _ffivec_ed25519publickey_free(
      cvec,
    );
  }

  late final _ffivec_ed25519publickey_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_FFIVec_Ed25519PublicKey>)>>(
      'ffivec_ed25519publickey_free');
  late final _ffivec_ed25519publickey_free = _ffivec_ed25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Ed25519PublicKey>)>();

  void ed25519publickey_free(
    ffi.Pointer<G_Ed25519PublicKey> ptr,
  ) {
    return _ed25519publickey_free(
      ptr,
    );
  }

  late final _ed25519publickey_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Ed25519PublicKey>)>>('ed25519publickey_free');
  late final _ed25519publickey_free = _ed25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_Ed25519PublicKey>)>();

  ffi.Pointer<ffi.Char> did_to_string(
    ffi.Pointer<G_DID> did_key,
  ) {
    return _did_to_string(
      did_key,
    );
  }

  late final _did_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_DID>)>>('did_to_string');
  late final _did_to_string = _did_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_DID>)>();

  G_FFIResult_DID did_from_string(
    ffi.Pointer<ffi.Char> did_key,
  ) {
    return _did_from_string(
      did_key,
    );
  }

  late final _did_from_stringPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>>(
      'did_from_string');
  late final _did_from_string = _did_from_stringPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>();

  void ffivec_data_free(
    ffi.Pointer<G_FFIVec_Data> cvec,
  ) {
    return _ffivec_data_free(
      cvec,
    );
  }

  late final _ffivec_data_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Data>)>>(
      'ffivec_data_free');
  late final _ffivec_data_free = _ffivec_data_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Data>)>();

  void data_free(
    ffi.Pointer<G_Data> ptr,
  ) {
    return _data_free(
      ptr,
    );
  }

  late final _data_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_free');
  late final _data_free =
      _data_freePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_Data data_new(
    int data,
    ffi.Pointer<ffi.Char> payload,
  ) {
    return _data_new(
      data,
      payload,
    );
  }

  late final _data_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Data Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('data_new');
  late final _data_new = _data_newPtr
      .asFunction<G_FFIResult_Data Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> data_id(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_id(
      data,
    );
  }

  late final _data_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Data>)>>('data_id');
  late final _data_id = _data_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Data>)>();

  void data_update_time(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_update_time(
      data,
    );
  }

  late final _data_update_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_update_time');
  late final _data_update_time =
      _data_update_timePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  void data_set_version(
    ffi.Pointer<G_Data> data,
    int version,
  ) {
    return _data_set_version(
      data,
      version,
    );
  }

  late final _data_set_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Uint32)>>('data_set_version');
  late final _data_set_version = _data_set_versionPtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_data_type(
    ffi.Pointer<G_Data> data,
    int data_type,
  ) {
    return _data_set_data_type(
      data,
      data_type,
    );
  }

  late final _data_set_data_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Int32)>>('data_set_data_type');
  late final _data_set_data_type = _data_set_data_typePtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_size(
    ffi.Pointer<G_Data> data,
    int size,
  ) {
    return _data_set_size(
      data,
      size,
    );
  }

  late final _data_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Data>, ffi.Uint64)>>('data_set_size');
  late final _data_set_size =
      _data_set_sizePtr.asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  int data_size(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_size(
      data,
    );
  }

  late final _data_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<G_Data>)>>(
          'data_size');
  late final _data_size =
      _data_sizePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_timestamp(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_timestamp(
      data,
    );
  }

  late final _data_timestampPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Data>)>>(
          'data_timestamp');
  late final _data_timestamp =
      _data_timestampPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_version(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_version(
      data,
    );
  }

  late final _data_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<G_Data>)>>(
          'data_version');
  late final _data_version =
      _data_versionPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_type(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_type(
      data,
    );
  }

  late final _data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Data>)>>(
          'data_type');
  late final _data_type =
      _data_typePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_String data_payload(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_payload(
      data,
    );
  }

  late final _data_payloadPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>>(
      'data_payload');
  late final _data_payload = _data_payloadPtr
      .asFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>();

  void multipassadapter_free(
    ffi.Pointer<G_MultiPassAdapter> ptr,
  ) {
    return _multipassadapter_free(
      ptr,
    );
  }

  late final _multipassadapter_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipassadapter_free');
  late final _multipassadapter_free = _multipassadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_MultiPassAdapter>)>();

  ffi.Pointer<ffi.Char> multipass_generate_name() {
    return _multipass_generate_name();
  }

  late final _multipass_generate_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'multipass_generate_name');
  late final _multipass_generate_name = _multipass_generate_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void ffivec_role_free(
    ffi.Pointer<G_FFIVec_Role> cvec,
  ) {
    return _ffivec_role_free(
      cvec,
    );
  }

  late final _ffivec_role_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Role>)>>(
      'ffivec_role_free');
  late final _ffivec_role_free = _ffivec_role_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Role>)>();

  void role_free(
    ffi.Pointer<G_Role> ptr,
  ) {
    return _role_free(
      ptr,
    );
  }

  late final _role_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Role>)>>(
          'role_free');
  late final _role_free =
      _role_freePtr.asFunction<void Function(ffi.Pointer<G_Role>)>();

  void ffivec_badge_free(
    ffi.Pointer<G_FFIVec_Badge> cvec,
  ) {
    return _ffivec_badge_free(
      cvec,
    );
  }

  late final _ffivec_badge_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Badge>)>>(
      'ffivec_badge_free');
  late final _ffivec_badge_free = _ffivec_badge_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Badge>)>();

  void badge_free(
    ffi.Pointer<G_Badge> ptr,
  ) {
    return _badge_free(
      ptr,
    );
  }

  late final _badge_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Badge>)>>(
          'badge_free');
  late final _badge_free =
      _badge_freePtr.asFunction<void Function(ffi.Pointer<G_Badge>)>();

  void graphics_free(
    ffi.Pointer<G_Graphics> ptr,
  ) {
    return _graphics_free(
      ptr,
    );
  }

  late final _graphics_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Graphics>)>>(
          'graphics_free');
  late final _graphics_free =
      _graphics_freePtr.asFunction<void Function(ffi.Pointer<G_Graphics>)>();

  void ffivec_identity_free(
    ffi.Pointer<G_FFIVec_Identity> cvec,
  ) {
    return _ffivec_identity_free(
      cvec,
    );
  }

  late final _ffivec_identity_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Identity>)>>('ffivec_identity_free');
  late final _ffivec_identity_free = _ffivec_identity_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Identity>)>();

  void identity_free(
    ffi.Pointer<G_Identity> ptr,
  ) {
    return _identity_free(
      ptr,
    );
  }

  late final _identity_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identity>)>>(
          'identity_free');
  late final _identity_free =
      _identity_freePtr.asFunction<void Function(ffi.Pointer<G_Identity>)>();

  void ffivec_friendrequest_free(
    ffi.Pointer<G_FFIVec_FriendRequest> cvec,
  ) {
    return _ffivec_friendrequest_free(
      cvec,
    );
  }

  late final _ffivec_friendrequest_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>>(
      'ffivec_friendrequest_free');
  late final _ffivec_friendrequest_free = _ffivec_friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>();

  void friendrequest_free(
    ffi.Pointer<G_FriendRequest> ptr,
  ) {
    return _friendrequest_free(
      ptr,
    );
  }

  late final _friendrequest_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FriendRequest>)>>(
      'friendrequest_free');
  late final _friendrequest_free = _friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FriendRequest>)>();

  void identifier_free(
    ffi.Pointer<G_Identifier> ptr,
  ) {
    return _identifier_free(
      ptr,
    );
  }

  late final _identifier_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identifier>)>>(
          'identifier_free');
  late final _identifier_free = _identifier_freePtr
      .asFunction<void Function(ffi.Pointer<G_Identifier>)>();

  void identityupdate_free(
    ffi.Pointer<G_IdentityUpdate> ptr,
  ) {
    return _identityupdate_free(
      ptr,
    );
  }

  late final _identityupdate_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'identityupdate_free');
  late final _identityupdate_free = _identityupdate_freePtr
      .asFunction<void Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_role_name(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_name(
      role,
    );
  }

  late final _multipass_role_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Role>)>>('multipass_role_name');
  late final _multipass_role_name = _multipass_role_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Role>)>();

  int multipass_role_level(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_level(
      role,
    );
  }

  late final _multipass_role_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<G_Role>)>>(
          'multipass_role_level');
  late final _multipass_role_level =
      _multipass_role_levelPtr.asFunction<int Function(ffi.Pointer<G_Role>)>();

  ffi.Pointer<ffi.Char> multipass_badge_name(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_name(
      badge,
    );
  }

  late final _multipass_badge_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_name');
  late final _multipass_badge_name = _multipass_badge_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Char> multipass_badge_icon(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_icon(
      badge,
    );
  }

  late final _multipass_badge_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_icon');
  late final _multipass_badge_icon = _multipass_badge_iconPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Char> multipass_graphics_profile_picture(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_picture(
      graphics,
    );
  }

  late final _multipass_graphics_profile_picturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_picture');
  late final _multipass_graphics_profile_picture =
      _multipass_graphics_profile_picturePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Char> multipass_graphics_profile_banner(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_banner(
      graphics,
    );
  }

  late final _multipass_graphics_profile_bannerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_banner');
  late final _multipass_graphics_profile_banner =
      _multipass_graphics_profile_bannerPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Char> multipass_identity_username(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_username(
      identity,
    );
  }

  late final _multipass_identity_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_username');
  late final _multipass_identity_username = _multipass_identity_usernamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Identity>)>();

  int multipass_identity_short_id(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_short_id(
      identity,
    );
  }

  late final _multipass_identity_short_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<G_Identity>)>>(
          'multipass_identity_short_id');
  late final _multipass_identity_short_id = _multipass_identity_short_idPtr
      .asFunction<int Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_identity_did_key(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_did_key(
      identity,
    );
  }

  late final _multipass_identity_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_did_key');
  late final _multipass_identity_did_key = _multipass_identity_did_keyPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Graphics> multipass_identity_graphics(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_graphics(
      identity,
    );
  }

  late final _multipass_identity_graphicsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Graphics> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_graphics');
  late final _multipass_identity_graphics = _multipass_identity_graphicsPtr
      .asFunction<ffi.Pointer<G_Graphics> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Char> multipass_identity_status_message(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_status_message(
      identity,
    );
  }

  late final _multipass_identity_status_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_status_message');
  late final _multipass_identity_status_message =
      _multipass_identity_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Role> multipass_identity_roles(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_roles(
      identity,
    );
  }

  late final _multipass_identity_rolesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Role> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_roles');
  late final _multipass_identity_roles =
      _multipass_identity_rolesPtr.asFunction<
          ffi.Pointer<G_FFIVec_Role> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Badge> multipass_identity_available_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_available_badge(
      identity,
    );
  }

  late final _multipass_identity_available_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_available_badge');
  late final _multipass_identity_available_badge =
      _multipass_identity_available_badgePtr.asFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Badge> multipass_identity_active_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_active_badge(
      identity,
    );
  }

  late final _multipass_identity_active_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_active_badge');
  late final _multipass_identity_active_badge =
      _multipass_identity_active_badgePtr
          .asFunction<ffi.Pointer<G_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Void> multipass_identity_linked_accounts(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_linked_accounts(
      identity,
    );
  }

  late final _multipass_identity_linked_accountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_linked_accounts');
  late final _multipass_identity_linked_accounts =
      _multipass_identity_linked_accountsPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_friend_request_from(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_from(
      request,
    );
  }

  late final _multipass_friend_request_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_from');
  late final _multipass_friend_request_from = _multipass_friend_request_fromPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_DID> multipass_friend_request_to(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_to(
      request,
    );
  }

  late final _multipass_friend_request_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_to');
  late final _multipass_friend_request_to = _multipass_friend_request_toPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  int multipass_friend_request_status(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_status(
      request,
    );
  }

  late final _multipass_friend_request_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_FriendRequest>)>>(
      'multipass_friend_request_status');
  late final _multipass_friend_request_status =
      _multipass_friend_request_statusPtr
          .asFunction<int Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_user_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identifier_user_name(
      name,
    );
  }

  late final _multipass_identifier_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<ffi.Char>)>>('multipass_identifier_user_name');
  late final _multipass_identifier_user_name =
      _multipass_identifier_user_namePtr.asFunction<
          ffi.Pointer<G_Identifier> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_did_key(
    ffi.Pointer<G_DID> key,
  ) {
    return _multipass_identifier_did_key(
      key,
    );
  }

  late final _multipass_identifier_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<G_DID>)>>('multipass_identifier_did_key');
  late final _multipass_identifier_did_key = _multipass_identifier_did_keyPtr
      .asFunction<ffi.Pointer<G_Identifier> Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_own() {
    return _multipass_identifier_own();
  }

  late final _multipass_identifier_ownPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Identifier> Function()>>(
          'multipass_identifier_own');
  late final _multipass_identifier_own = _multipass_identifier_ownPtr
      .asFunction<ffi.Pointer<G_Identifier> Function()>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_username(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_username(
      name,
    );
  }

  late final _multipass_identity_update_set_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_username');
  late final _multipass_identity_update_set_username =
      _multipass_identity_update_set_usernamePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_picture(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_graphics_picture(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_graphics_picture');
  late final _multipass_identity_update_set_graphics_picture =
      _multipass_identity_update_set_graphics_picturePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_banner(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_graphics_banner(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_graphics_banner');
  late final _multipass_identity_update_set_graphics_banner =
      _multipass_identity_update_set_graphics_bannerPtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_status_message(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_status_message(
      name,
    );
  }

  late final _multipass_identity_update_set_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_status_message');
  late final _multipass_identity_update_set_status_message =
      _multipass_identity_update_set_status_messagePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_username(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_username(
      update,
    );
  }

  late final _multipass_identity_update_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_username');
  late final _multipass_identity_update_username =
      _multipass_identity_update_usernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_graphics_picture(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_picture(
      update,
    );
  }

  late final _multipass_identity_update_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_picture');
  late final _multipass_identity_update_graphics_picture =
      _multipass_identity_update_graphics_picturePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_graphics_banner(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_banner(
      update,
    );
  }

  late final _multipass_identity_update_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_banner');
  late final _multipass_identity_update_graphics_banner =
      _multipass_identity_update_graphics_bannerPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_status_message(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_status_message(
      update,
    );
  }

  late final _multipass_identity_update_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_status_message');
  late final _multipass_identity_update_status_message =
      _multipass_identity_update_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_create_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _multipass_create_identity(
      ctx,
      username,
      passphrase,
    );
  }

  late final _multipass_create_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('multipass_create_identity');
  late final _multipass_create_identity =
      _multipass_create_identityPtr.asFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Identity multipass_get_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_Identifier> identifier,
  ) {
    return _multipass_get_identity(
      ctx,
      identifier,
    );
  }

  late final _multipass_get_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Identity Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_Identifier>)>>('multipass_get_identity');
  late final _multipass_get_identity = _multipass_get_identityPtr.asFunction<
      G_FFIResult_Identity Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_Identifier>)>();

  G_FFIResult_Identity multipass_get_own_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_get_own_identity(
      ctx,
    );
  }

  late final _multipass_get_own_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Identity Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_get_own_identity');
  late final _multipass_get_own_identity =
      _multipass_get_own_identityPtr.asFunction<
          G_FFIResult_Identity Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_update_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_IdentityUpdate> option,
  ) {
    return _multipass_update_identity(
      ctx,
      option,
    );
  }

  late final _multipass_update_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>>('multipass_update_identity');
  late final _multipass_update_identity =
      _multipass_update_identityPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_decrypt_private_key(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _multipass_decrypt_private_key(
      ctx,
      passphrase,
    );
  }

  late final _multipass_decrypt_private_keyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>)>>('multipass_decrypt_private_key');
  late final _multipass_decrypt_private_key =
      _multipass_decrypt_private_keyPtr.asFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null multipass_refresh_cache(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_refresh_cache(
      ctx,
    );
  }

  late final _multipass_refresh_cachePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_refresh_cache');
  late final _multipass_refresh_cache = _multipass_refresh_cachePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_send_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_send_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_send_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_send_request');
  late final _multipass_send_request = _multipass_send_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_accept_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_accept_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_accept_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_accept_request');
  late final _multipass_accept_request =
      _multipass_accept_requestPtr.asFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_deny_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_deny_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_deny_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_deny_request');
  late final _multipass_deny_request = _multipass_deny_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_close_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_close_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_close_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_close_request');
  late final _multipass_close_request = _multipass_close_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_incoming_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_incoming_request(
      ctx,
    );
  }

  late final _multipass_list_incoming_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_incoming_request');
  late final _multipass_list_incoming_request =
      _multipass_list_incoming_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_outgoing_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_outgoing_request(
      ctx,
    );
  }

  late final _multipass_list_outgoing_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_outgoing_request');
  late final _multipass_list_outgoing_request =
      _multipass_list_outgoing_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_all_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_all_request(
      ctx,
    );
  }

  late final _multipass_list_all_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_all_request');
  late final _multipass_list_all_request =
      _multipass_list_all_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_remove_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_remove_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_remove_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_remove_friend');
  late final _multipass_remove_friend = _multipass_remove_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_block(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_block(
      ctx,
      pubkey,
    );
  }

  late final _multipass_blockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_block');
  late final _multipass_block = _multipass_blockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_unblock(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_unblock(
      ctx,
      pubkey,
    );
  }

  late final _multipass_unblockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_unblock');
  late final _multipass_unblock = _multipass_unblockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_DID multipass_block_list(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_block_list(
      ctx,
    );
  }

  late final _multipass_block_listPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_block_list');
  late final _multipass_block_list = _multipass_block_listPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_DID multipass_list_friends(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_friends(
      ctx,
    );
  }

  late final _multipass_list_friendsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_friends');
  late final _multipass_list_friends = _multipass_list_friendsPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_has_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_has_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_has_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_has_friend');
  late final _multipass_has_friend = _multipass_has_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  void pocketdimensionadapter_free(
    ffi.Pointer<G_PocketDimensionAdapter> ptr,
  ) {
    return _pocketdimensionadapter_free(
      ptr,
    );
  }

  late final _pocketdimensionadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_PocketDimensionAdapter>)>>(
      'pocketdimensionadapter_free');
  late final _pocketdimensionadapter_free = _pocketdimensionadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_PocketDimensionAdapter>)>();

  void querybuilder_free(
    ffi.Pointer<G_QueryBuilder> ptr,
  ) {
    return _querybuilder_free(
      ptr,
    );
  }

  late final _querybuilder_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_QueryBuilder>)>>(
      'querybuilder_free');
  late final _querybuilder_free = _querybuilder_freePtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>)>();

  ffi.Pointer<G_QueryBuilder> querybuilder_new() {
    return _querybuilder_new();
  }

  late final _querybuilder_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_QueryBuilder> Function()>>(
          'querybuilder_new');
  late final _querybuilder_new =
      _querybuilder_newPtr.asFunction<ffi.Pointer<G_QueryBuilder> Function()>();

  G_FFIResult_QueryBuilder querybuilder_import(
    ffi.Pointer<ffi.Char> data,
  ) {
    return _querybuilder_import(
      data,
    );
  }

  late final _querybuilder_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_QueryBuilder Function(
              ffi.Pointer<ffi.Char>)>>('querybuilder_import');
  late final _querybuilder_import = _querybuilder_importPtr
      .asFunction<G_FFIResult_QueryBuilder Function(ffi.Pointer<ffi.Char>)>();

  void querybuilder_where(
    ffi.Pointer<G_QueryBuilder> ctx,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _querybuilder_where(
      ctx,
      key,
      val,
    );
  }

  late final _querybuilder_wherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('querybuilder_where');
  late final _querybuilder_where = _querybuilder_wherePtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void querybuilder_filter(
    ffi.Pointer<G_QueryBuilder> ctx,
    int cmp,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _querybuilder_filter(
      ctx,
      cmp,
      key,
      val,
    );
  }

  late final _querybuilder_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('querybuilder_filter');
  late final _querybuilder_filter = _querybuilder_filterPtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void querybuilder_limit(
    ffi.Pointer<G_QueryBuilder> ctx,
    int limit,
  ) {
    return _querybuilder_limit(
      ctx,
      limit,
    );
  }

  late final _querybuilder_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>, uintptr_t)>>('querybuilder_limit');
  late final _querybuilder_limit = _querybuilder_limitPtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>, int)>();

  void ffivec_message_free(
    ffi.Pointer<G_FFIVec_Message> cvec,
  ) {
    return _ffivec_message_free(
      cvec,
    );
  }

  late final _ffivec_message_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Message>)>>(
      'ffivec_message_free');
  late final _ffivec_message_free = _ffivec_message_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Message>)>();

  void message_free(
    ffi.Pointer<G_Message> ptr,
  ) {
    return _message_free(
      ptr,
    );
  }

  late final _message_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Message>)>>(
          'message_free');
  late final _message_free =
      _message_freePtr.asFunction<void Function(ffi.Pointer<G_Message>)>();

  void ffivec_senderid_free(
    ffi.Pointer<G_FFIVec_SenderId> cvec,
  ) {
    return _ffivec_senderid_free(
      cvec,
    );
  }

  late final _ffivec_senderid_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_SenderId>)>>('ffivec_senderid_free');
  late final _ffivec_senderid_free = _ffivec_senderid_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_SenderId>)>();

  void ffivec_reaction_free(
    ffi.Pointer<G_FFIVec_Reaction> cvec,
  ) {
    return _ffivec_reaction_free(
      cvec,
    );
  }

  late final _ffivec_reaction_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Reaction>)>>('ffivec_reaction_free');
  late final _ffivec_reaction_free = _ffivec_reaction_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Reaction>)>();

  void reaction_free(
    ffi.Pointer<G_Reaction> ptr,
  ) {
    return _reaction_free(
      ptr,
    );
  }

  late final _reaction_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Reaction>)>>(
          'reaction_free');
  late final _reaction_free =
      _reaction_freePtr.asFunction<void Function(ffi.Pointer<G_Reaction>)>();

  void raygunadapter_free(
    ffi.Pointer<G_RayGunAdapter> ptr,
  ) {
    return _raygunadapter_free(
      ptr,
    );
  }

  late final _raygunadapter_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_RayGunAdapter>)>>(
      'raygunadapter_free');
  late final _raygunadapter_free = _raygunadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_RayGunAdapter>)>();

  G_FFIResult_String raygun_create_conversation(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<G_DID> did_key,
  ) {
    return _raygun_create_conversation(
      ctx,
      did_key,
    );
  }

  late final _raygun_create_conversationPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<G_DID>)>>('raygun_create_conversation');
  late final _raygun_create_conversation =
      _raygun_create_conversationPtr.asFunction<
          G_FFIResult_String Function(
              ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_String raygun_list_conversations(
    ffi.Pointer<G_RayGunAdapter> ctx,
  ) {
    return _raygun_list_conversations(
      ctx,
    );
  }

  late final _raygun_list_conversationsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_String Function(
              ffi.Pointer<G_RayGunAdapter>)>>('raygun_list_conversations');
  late final _raygun_list_conversations =
      _raygun_list_conversationsPtr.asFunction<
          G_FFIResult_FFIVec_String Function(ffi.Pointer<G_RayGunAdapter>)>();

  G_FFIResult_FFIVec_Message raygun_get_messages(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
  ) {
    return _raygun_get_messages(
      ctx,
      convo_id,
    );
  }

  late final _raygun_get_messagesPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_Message Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>)>>('raygun_get_messages');
  late final _raygun_get_messages = _raygun_get_messagesPtr.asFunction<
      G_FFIResult_FFIVec_Message Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_send(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Char>> messages,
    int lines,
  ) {
    return _raygun_send(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_sendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              uintptr_t)>>('raygun_send');
  late final _raygun_send = _raygun_sendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  G_FFIResult_Null raygun_delete(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
  ) {
    return _raygun_delete(
      ctx,
      convo_id,
      message_id,
    );
  }

  late final _raygun_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('raygun_delete');
  late final _raygun_delete = _raygun_deletePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_react(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
    ffi.Pointer<ffi.Char> emoji,
  ) {
    return _raygun_react(
      ctx,
      convo_id,
      message_id,
      state,
      emoji,
    );
  }

  late final _raygun_reactPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('raygun_react');
  late final _raygun_react = _raygun_reactPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_pin(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
  ) {
    return _raygun_pin(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_pinPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('raygun_pin');
  late final _raygun_pin = _raygun_pinPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  G_FFIResult_Null raygun_reply(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Char>> messages,
    int lines,
  ) {
    return _raygun_reply(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_replyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              uintptr_t)>>('raygun_reply');
  late final _raygun_reply = _raygun_replyPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  G_FFIResult_Null raygun_ping(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
  ) {
    return _raygun_ping(
      ctx,
      convo_id,
    );
  }

  late final _raygun_pingPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>)>>('raygun_ping');
  late final _raygun_ping = _raygun_pingPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_embeds(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
  ) {
    return _raygun_embeds(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_embedsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('raygun_embeds');
  late final _raygun_embeds = _raygun_embedsPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> message_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_id(
      ctx,
    );
  }

  late final _message_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_id');
  late final _message_id = _message_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_conversation_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_conversation_id(
      ctx,
    );
  }

  late final _message_conversation_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_conversation_id');
  late final _message_conversation_id = _message_conversation_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_SenderId> message_sender_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_sender_id(
      ctx,
    );
  }

  late final _message_sender_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<G_Message>)>>('message_sender_id');
  late final _message_sender_id = _message_sender_idPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_date(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_date(
      ctx,
    );
  }

  late final _message_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_date');
  late final _message_date = _message_datePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  bool message_pinned(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_pinned(
      ctx,
    );
  }

  late final _message_pinnedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Message>)>>(
          'message_pinned');
  late final _message_pinned =
      _message_pinnedPtr.asFunction<bool Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_FFIVec_Reaction> message_reactions(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_reactions(
      ctx,
    );
  }

  late final _message_reactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Reaction> Function(
              ffi.Pointer<G_Message>)>>('message_reactions');
  late final _message_reactions = _message_reactionsPtr.asFunction<
      ffi.Pointer<G_FFIVec_Reaction> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_replied(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_replied(
      ctx,
    );
  }

  late final _message_repliedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_replied');
  late final _message_replied = _message_repliedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_FFIVec_String> message_lines(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_lines(
      ctx,
    );
  }

  late final _message_linesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_String> Function(
              ffi.Pointer<G_Message>)>>('message_lines');
  late final _message_lines = _message_linesPtr.asFunction<
      ffi.Pointer<G_FFIVec_String> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> reaction_emoji(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_emoji(
      ctx,
    );
  }

  late final _reaction_emojiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_emoji');
  late final _reaction_emoji = _reaction_emojiPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<G_FFIVec_SenderId> reaction_users(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_users(
      ctx,
    );
  }

  late final _reaction_usersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_SenderId> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_users');
  late final _reaction_users = _reaction_usersPtr.asFunction<
      ffi.Pointer<G_FFIVec_SenderId> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<G_SenderId> sender_id_from_id(
    ffi.Pointer<ffi.Char> id,
  ) {
    return _sender_id_from_id(
      id,
    );
  }

  late final _sender_id_from_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<ffi.Char>)>>('sender_id_from_id');
  late final _sender_id_from_id = _sender_id_from_idPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_SenderId> sender_id_from_did_key(
    ffi.Pointer<G_DID> public_key,
  ) {
    return _sender_id_from_did_key(
      public_key,
    );
  }

  late final _sender_id_from_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<G_DID>)>>('sender_id_from_did_key');
  late final _sender_id_from_did_key = _sender_id_from_did_keyPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<ffi.Char> sender_id_get_id(
    ffi.Pointer<G_SenderId> sender_id,
  ) {
    return _sender_id_get_id(
      sender_id,
    );
  }

  late final _sender_id_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_SenderId>)>>('sender_id_get_id');
  late final _sender_id_get_id = _sender_id_get_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_SenderId>)>();

  ffi.Pointer<G_DID> sender_id_get_did_key(
    ffi.Pointer<G_SenderId> sender_id,
  ) {
    return _sender_id_get_did_key(
      sender_id,
    );
  }

  late final _sender_id_get_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_SenderId>)>>('sender_id_get_did_key');
  late final _sender_id_get_did_key = _sender_id_get_did_keyPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_SenderId>)>();

  void tesseract_free(
    ffi.Pointer<G_Tesseract> ptr,
  ) {
    return _tesseract_free(
      ptr,
    );
  }

  late final _tesseract_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_free');
  late final _tesseract_free =
      _tesseract_freePtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  ffi.Pointer<G_Tesseract> tesseract_new() {
    return _tesseract_new();
  }

  late final _tesseract_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Tesseract> Function()>>(
          'tesseract_new');
  late final _tesseract_new =
      _tesseract_newPtr.asFunction<ffi.Pointer<G_Tesseract> Function()>();

  G_FFIResult_Tesseract tesseract_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_from_file(
      file,
    );
  }

  late final _tesseract_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Tesseract Function(
              ffi.Pointer<ffi.Char>)>>('tesseract_from_file');
  late final _tesseract_from_file = _tesseract_from_filePtr
      .asFunction<G_FFIResult_Tesseract Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null tesseract_to_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_to_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_to_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_to_file');
  late final _tesseract_to_file = _tesseract_to_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_set_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_set_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_set_file');
  late final _tesseract_set_file = _tesseract_set_filePtr.asFunction<
      void Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_set_autosave(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_set_autosave(
      tesseract,
    );
  }

  late final _tesseract_set_autosavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_set_autosave');
  late final _tesseract_set_autosave = _tesseract_set_autosavePtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_autosave_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_autosave_enabled(
      tesseract,
    );
  }

  late final _tesseract_autosave_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_autosave_enabled');
  late final _tesseract_autosave_enabled = _tesseract_autosave_enabledPtr
      .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_disable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_disable_key_check(
      tesseract,
    );
  }

  late final _tesseract_disable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_disable_key_check');
  late final _tesseract_disable_key_check = _tesseract_disable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_enable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_enable_key_check(
      tesseract,
    );
  }

  late final _tesseract_enable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_enable_key_check');
  late final _tesseract_enable_key_check = _tesseract_enable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_is_key_check_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_key_check_enabled(
      tesseract,
    );
  }

  late final _tesseract_is_key_check_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_key_check_enabled');
  late final _tesseract_is_key_check_enabled =
      _tesseract_is_key_check_enabledPtr
          .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_save(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_save(
      tesseract,
    );
  }

  late final _tesseract_savePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Tesseract>)>>('tesseract_save');
  late final _tesseract_save = _tesseract_savePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_set(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _tesseract_set(
      tesseract,
      key,
      val,
    );
  }

  late final _tesseract_setPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tesseract_set');
  late final _tesseract_set = _tesseract_setPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_String tesseract_retrieve(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_retrieve(
      tesseract,
      key,
    );
  }

  late final _tesseract_retrievePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_retrieve');
  late final _tesseract_retrieve = _tesseract_retrievePtr.asFunction<
      G_FFIResult_String Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  bool tesseract_exist(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_exist(
      tesseract,
      key,
    );
  }

  late final _tesseract_existPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_exist');
  late final _tesseract_exist = _tesseract_existPtr.asFunction<
      bool Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null tesseract_delete(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_delete(
      tesseract,
      key,
    );
  }

  late final _tesseract_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_delete');
  late final _tesseract_delete = _tesseract_deletePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_clear(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_clear(
      tesseract,
    );
  }

  late final _tesseract_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_clear');
  late final _tesseract_clear =
      _tesseract_clearPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_is_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_unlock(
      tesseract,
    );
  }

  late final _tesseract_is_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_unlock');
  late final _tesseract_is_unlock = _tesseract_is_unlockPtr
      .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_unlock(
      tesseract,
      key,
    );
  }

  late final _tesseract_unlockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_unlock');
  late final _tesseract_unlock = _tesseract_unlockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_lock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_lock(
      tesseract,
    );
  }

  late final _tesseract_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_lock');
  late final _tesseract_lock =
      _tesseract_lockPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void ffierror_free(
    ffi.Pointer<G_FFIError> ptr,
  ) {
    return _ffierror_free(
      ptr,
    );
  }

  late final _ffierror_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIError>)>>(
          'ffierror_free');
  late final _ffierror_free =
      _ffierror_freePtr.asFunction<void Function(ffi.Pointer<G_FFIError>)>();

  int __ctype_get_mb_cur_max1() {
    return ___ctype_get_mb_cur_max1();
  }

  late final ___ctype_get_mb_cur_max1Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max1 =
      ___ctype_get_mb_cur_max1Ptr.asFunction<int Function()>();

  double atof1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof1(
      __nptr,
    );
  }

  late final _atof1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof1 =
      _atof1Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi1(
      __nptr,
    );
  }

  late final _atoi1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi1 =
      _atoi1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol1(
      __nptr,
    );
  }

  late final _atol1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol1 =
      _atol1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll1(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll1(
      __nptr,
    );
  }

  late final _atoll1Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll1 =
      _atoll1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod1(
      __nptr,
      __endptr,
    );
  }

  late final _strtod1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod1 = _strtod1Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof1(
      __nptr,
      __endptr,
    );
  }

  late final _strtof1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof1 = _strtof1Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol1 = _strtol1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul1 = _strtoul1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq1 = _strtoq1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq1 = _strtouq1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll1 = _strtoll1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull1(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull1(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull1 = _strtoull1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a1(
    int __n,
  ) {
    return _l64a1(
      __n,
    );
  }

  late final _l64a1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a1 =
      _l64a1Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l1(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l1(
      __s,
    );
  }

  late final _a64l1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l1 =
      _a64l1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select1(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select1(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select1 = _select1Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect1(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect1(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect1 = _pselect1Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random1() {
    return _random1();
  }

  late final _random1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random1 = _random1Ptr.asFunction<int Function()>();

  void srandom1(
    int __seed,
  ) {
    return _srandom1(
      __seed,
    );
  }

  late final _srandom1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom1 = _srandom1Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate1(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate1(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate1 = _initstate1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate1(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate1(
      __statebuf,
    );
  }

  late final _setstate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate1 = _setstate1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r1(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r1(
      __buf,
      __result,
    );
  }

  late final _random_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r1 = _random_r1Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r1(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r1(
      __seed,
      __buf,
    );
  }

  late final _srandom_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r1 = _srandom_r1Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r1(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r1(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r1 = _initstate_r1Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r1(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r1(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r1 = _setstate_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand1() {
    return _rand1();
  }

  late final _rand1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand1 = _rand1Ptr.asFunction<int Function()>();

  void srand1(
    int __seed,
  ) {
    return _srand1(
      __seed,
    );
  }

  late final _srand1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand1 = _srand1Ptr.asFunction<void Function(int)>();

  int rand_r1(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r1(
      __seed,
    );
  }

  late final _rand_r1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r1 =
      _rand_r1Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand481() {
    return _drand481();
  }

  late final _drand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand481 = _drand481Ptr.asFunction<double Function()>();

  double erand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand481(
      __xsubi,
    );
  }

  late final _erand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand481 = _erand481Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand481() {
    return _lrand481();
  }

  late final _lrand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand481 = _lrand481Ptr.asFunction<int Function()>();

  int nrand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand481(
      __xsubi,
    );
  }

  late final _nrand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand481 =
      _nrand481Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand481() {
    return _mrand481();
  }

  late final _mrand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand481 = _mrand481Ptr.asFunction<int Function()>();

  int jrand481(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand481(
      __xsubi,
    );
  }

  late final _jrand481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand481 =
      _jrand481Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand481(
    int __seedval,
  ) {
    return _srand481(
      __seedval,
    );
  }

  late final _srand481Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand481 = _srand481Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed481(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed481(
      __seed16v,
    );
  }

  late final _seed481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed481 = _seed481Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong481(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong481(
      __param,
    );
  }

  late final _lcong481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong481 =
      _lcong481Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r1(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r1(
      __buffer,
      __result,
    );
  }

  late final _drand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r1 = _drand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r1 = _erand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r1(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r1(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r1 = _lrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r1 = _nrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r1(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r1(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r1 = _mrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r1(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r1(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r1 = _jrand48_r1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r1(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r1(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r1 = _srand48_r1Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r1(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r1(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r1 = _seed48_r1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r1(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r1(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r1 = _lcong48_r1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc1(
    int __size,
  ) {
    return _malloc1(
      __size,
    );
  }

  late final _malloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc1 =
      _malloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc1(
    int __nmemb,
    int __size,
  ) {
    return _calloc1(
      __nmemb,
      __size,
    );
  }

  late final _calloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc1 =
      _calloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc1(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc1(
      __ptr,
      __size,
    );
  }

  late final _realloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc1 = _realloc1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free1(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free1(
      __ptr,
    );
  }

  late final _free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free1 =
      _free1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray2(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray2(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray2 = _reallocarray2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray3(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray3(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray3 = _reallocarray3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca1(
    int __size,
  ) {
    return _alloca1(
      __size,
    );
  }

  late final _alloca1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca1 =
      _alloca1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc1(
    int __size,
  ) {
    return _valloc1(
      __size,
    );
  }

  late final _valloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc1 =
      _valloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign1(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign1(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign1 = _posix_memalign1Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc1(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc1(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc1 =
      _aligned_alloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort1() {
    return _abort1();
  }

  late final _abort1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort1 = _abort1Ptr.asFunction<void Function()>();

  int atexit1(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit1(
      __func,
    );
  }

  late final _atexit1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit1 = _atexit1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit1(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit1(
      __func,
    );
  }

  late final _at_quick_exit1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit1 = _at_quick_exit1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit1(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit1(
      __func,
      __arg,
    );
  }

  late final _on_exit1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit1 = _on_exit1Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit1(
    int __status,
  ) {
    return _exit1(
      __status,
    );
  }

  late final _exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exit1Ptr.asFunction<void Function(int)>();

  void quick_exit1(
    int __status,
  ) {
    return _quick_exit1(
      __status,
    );
  }

  late final _quick_exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit1 = _quick_exit1Ptr.asFunction<void Function(int)>();

  void _Exit1(
    int __status,
  ) {
    return __Exit1(
      __status,
    );
  }

  late final __Exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit1 = __Exit1Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv1(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv1(
      __name,
    );
  }

  late final _getenv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv1 = _getenv1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv1(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv1(
      __string,
    );
  }

  late final _putenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenv1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv1(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv1(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv1 = _setenv1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv1(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv1(
      __name,
    );
  }

  late final _unsetenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv1 =
      _unsetenv1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv1() {
    return _clearenv1();
  }

  late final _clearenv1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv1 = _clearenv1Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp1(
      __template,
    );
  }

  late final _mktemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp1 = _mktemp1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp1(
      __template,
    );
  }

  late final _mkstemp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp1 =
      _mkstemp1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps1(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps1(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps1 =
      _mkstemps1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp1(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp1(
      __template,
    );
  }

  late final _mkdtemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp1 = _mkdtemp1Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system1(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system1(
      __command,
    );
  }

  late final _system1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system1 =
      _system1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath1(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath1(
      __name,
      __resolved,
    );
  }

  late final _realpath1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath1 = _realpath1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch1(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch1(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch1 = _bsearch1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort1(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort1(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort1 = _qsort1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs1(
    int __x,
  ) {
    return _abs1(
      __x,
    );
  }

  late final _abs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs1 = _abs1Ptr.asFunction<int Function(int)>();

  int labs1(
    int __x,
  ) {
    return _labs1(
      __x,
    );
  }

  late final _labs1Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs1 = _labs1Ptr.asFunction<int Function(int)>();

  int llabs1(
    int __x,
  ) {
    return _llabs1(
      __x,
    );
  }

  late final _llabs1Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs1 = _llabs1Ptr.asFunction<int Function(int)>();

  G_div_t div1(
    int __numer,
    int __denom,
  ) {
    return _div1(
      __numer,
      __denom,
    );
  }

  late final _div1Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div1 = _div1Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv1(
    int __numer,
    int __denom,
  ) {
    return _ldiv1(
      __numer,
      __denom,
    );
  }

  late final _ldiv1Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv1 = _ldiv1Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv1(
    int __numer,
    int __denom,
  ) {
    return _lldiv1(
      __numer,
      __denom,
    );
  }

  late final _lldiv1Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv1 = _lldiv1Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt1(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt1(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt1(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvt1Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r1(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r1 = _ecvt_r1Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r1(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r1(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r1 = _fcvt_r1Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen1(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen1(
      __s,
      __n,
    );
  }

  late final _mblen1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen1 =
      _mblen1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc1(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc1(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc1 = _mbtowc1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb1(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb1(
      __s,
      __wchar,
    );
  }

  late final _wctomb1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb1 =
      _wctomb1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs1(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs1(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs1 = _mbstowcs1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs1(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs1(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs1 = _wcstombs1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch1(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch1(
      __response,
    );
  }

  late final _rpmatch1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch1 =
      _rpmatch1Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt1(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt1(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt1 = _getsubopt1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg1(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg1(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg1 =
      _getloadavg1Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _mp_ipfs_config_from_file(
      file,
    );
  }

  late final _mp_ipfs_config_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_from_file');
  late final _mp_ipfs_config_from_file = _mp_ipfs_config_from_filePtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_from_str(
    ffi.Pointer<ffi.Char> config,
  ) {
    return _mp_ipfs_config_from_str(
      config,
    );
  }

  late final _mp_ipfs_config_from_strPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_from_str');
  late final _mp_ipfs_config_from_str = _mp_ipfs_config_from_strPtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_MpIpfsConfig> mp_ipfs_config_development() {
    return _mp_ipfs_config_development();
  }

  late final _mp_ipfs_config_developmentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_MpIpfsConfig> Function()>>(
          'mp_ipfs_config_development');
  late final _mp_ipfs_config_development = _mp_ipfs_config_developmentPtr
      .asFunction<ffi.Pointer<G_MpIpfsConfig> Function()>();

  ffi.Pointer<G_MpIpfsConfig> mp_ipfs_config_testing() {
    return _mp_ipfs_config_testing();
  }

  late final _mp_ipfs_config_testingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_MpIpfsConfig> Function()>>(
          'mp_ipfs_config_testing');
  late final _mp_ipfs_config_testing = _mp_ipfs_config_testingPtr
      .asFunction<ffi.Pointer<G_MpIpfsConfig> Function()>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_production(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mp_ipfs_config_production(
      path,
    );
  }

  late final _mp_ipfs_config_productionPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_production');
  late final _mp_ipfs_config_production = _mp_ipfs_config_productionPtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_temporary(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<G_MpIpfsConfig> config,
  ) {
    return _multipass_mp_ipfs_temporary(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_temporaryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>>('multipass_mp_ipfs_temporary');
  late final _multipass_mp_ipfs_temporary =
      _multipass_mp_ipfs_temporaryPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_persistent(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<G_MpIpfsConfig> config,
  ) {
    return _multipass_mp_ipfs_persistent(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_persistentPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>>('multipass_mp_ipfs_persistent');
  late final _multipass_mp_ipfs_persistent =
      _multipass_mp_ipfs_persistentPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>();

  int __ctype_get_mb_cur_max2() {
    return ___ctype_get_mb_cur_max2();
  }

  late final ___ctype_get_mb_cur_max2Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max2 =
      ___ctype_get_mb_cur_max2Ptr.asFunction<int Function()>();

  double atof2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof2(
      __nptr,
    );
  }

  late final _atof2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof2 =
      _atof2Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi2(
      __nptr,
    );
  }

  late final _atoi2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi2 =
      _atoi2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol2(
      __nptr,
    );
  }

  late final _atol2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol2 =
      _atol2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll2(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll2(
      __nptr,
    );
  }

  late final _atoll2Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll2 =
      _atoll2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod2(
      __nptr,
      __endptr,
    );
  }

  late final _strtod2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod2 = _strtod2Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof2(
      __nptr,
      __endptr,
    );
  }

  late final _strtof2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof2 = _strtof2Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol2 = _strtol2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul2 = _strtoul2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq2 = _strtoq2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq2 = _strtouq2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll2 = _strtoll2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull2(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull2(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull2 = _strtoull2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a2(
    int __n,
  ) {
    return _l64a2(
      __n,
    );
  }

  late final _l64a2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a2 =
      _l64a2Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l2(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l2(
      __s,
    );
  }

  late final _a64l2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l2 =
      _a64l2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select2(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select2(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select2 = _select2Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect2(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect2(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect2 = _pselect2Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random2() {
    return _random2();
  }

  late final _random2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random2 = _random2Ptr.asFunction<int Function()>();

  void srandom2(
    int __seed,
  ) {
    return _srandom2(
      __seed,
    );
  }

  late final _srandom2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom2 = _srandom2Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate2(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate2(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate2 = _initstate2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate2(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate2(
      __statebuf,
    );
  }

  late final _setstate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate2 = _setstate2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r2(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r2(
      __buf,
      __result,
    );
  }

  late final _random_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r2 = _random_r2Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r2(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r2(
      __seed,
      __buf,
    );
  }

  late final _srandom_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r2 = _srandom_r2Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r2(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r2(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r2 = _initstate_r2Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r2(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r2(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r2 = _setstate_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand2() {
    return _rand2();
  }

  late final _rand2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand2 = _rand2Ptr.asFunction<int Function()>();

  void srand2(
    int __seed,
  ) {
    return _srand2(
      __seed,
    );
  }

  late final _srand2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand2 = _srand2Ptr.asFunction<void Function(int)>();

  int rand_r2(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r2(
      __seed,
    );
  }

  late final _rand_r2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r2 =
      _rand_r2Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand482() {
    return _drand482();
  }

  late final _drand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand482 = _drand482Ptr.asFunction<double Function()>();

  double erand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand482(
      __xsubi,
    );
  }

  late final _erand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand482 = _erand482Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand482() {
    return _lrand482();
  }

  late final _lrand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand482 = _lrand482Ptr.asFunction<int Function()>();

  int nrand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand482(
      __xsubi,
    );
  }

  late final _nrand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand482 =
      _nrand482Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand482() {
    return _mrand482();
  }

  late final _mrand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand482 = _mrand482Ptr.asFunction<int Function()>();

  int jrand482(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand482(
      __xsubi,
    );
  }

  late final _jrand482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand482 =
      _jrand482Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand482(
    int __seedval,
  ) {
    return _srand482(
      __seedval,
    );
  }

  late final _srand482Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand482 = _srand482Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed482(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed482(
      __seed16v,
    );
  }

  late final _seed482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed482 = _seed482Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong482(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong482(
      __param,
    );
  }

  late final _lcong482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong482 =
      _lcong482Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r2(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r2(
      __buffer,
      __result,
    );
  }

  late final _drand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r2 = _drand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r2 = _erand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r2(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r2(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r2 = _lrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r2 = _nrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r2(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r2(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r2 = _mrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r2(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r2(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r2 = _jrand48_r2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r2(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r2(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r2 = _srand48_r2Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r2(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r2(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r2 = _seed48_r2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r2(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r2(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r2 = _lcong48_r2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc2(
    int __size,
  ) {
    return _malloc2(
      __size,
    );
  }

  late final _malloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc2 =
      _malloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc2(
    int __nmemb,
    int __size,
  ) {
    return _calloc2(
      __nmemb,
      __size,
    );
  }

  late final _calloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc2 =
      _calloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc2(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc2(
      __ptr,
      __size,
    );
  }

  late final _realloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc2 = _realloc2Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free2(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free2(
      __ptr,
    );
  }

  late final _free2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free2 =
      _free2Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray4(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray4(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray4 = _reallocarray4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray5(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray5(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray5 = _reallocarray5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca2(
    int __size,
  ) {
    return _alloca2(
      __size,
    );
  }

  late final _alloca2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca2 =
      _alloca2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc2(
    int __size,
  ) {
    return _valloc2(
      __size,
    );
  }

  late final _valloc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc2 =
      _valloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign2(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign2(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign2 = _posix_memalign2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc2(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc2(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc2 =
      _aligned_alloc2Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort2() {
    return _abort2();
  }

  late final _abort2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort2 = _abort2Ptr.asFunction<void Function()>();

  int atexit2(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit2(
      __func,
    );
  }

  late final _atexit2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit2 = _atexit2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit2(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit2(
      __func,
    );
  }

  late final _at_quick_exit2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit2 = _at_quick_exit2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit2(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit2(
      __func,
      __arg,
    );
  }

  late final _on_exit2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit2 = _on_exit2Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit2(
    int __status,
  ) {
    return _exit2(
      __status,
    );
  }

  late final _exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit2 = _exit2Ptr.asFunction<void Function(int)>();

  void quick_exit2(
    int __status,
  ) {
    return _quick_exit2(
      __status,
    );
  }

  late final _quick_exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit2 = _quick_exit2Ptr.asFunction<void Function(int)>();

  void _Exit2(
    int __status,
  ) {
    return __Exit2(
      __status,
    );
  }

  late final __Exit2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit2 = __Exit2Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv2(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv2(
      __name,
    );
  }

  late final _getenv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv2 = _getenv2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv2(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv2(
      __string,
    );
  }

  late final _putenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv2 =
      _putenv2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv2(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv2(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv2 = _setenv2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv2(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv2(
      __name,
    );
  }

  late final _unsetenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv2 =
      _unsetenv2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv2() {
    return _clearenv2();
  }

  late final _clearenv2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv2 = _clearenv2Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp2(
      __template,
    );
  }

  late final _mktemp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp2 = _mktemp2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp2(
      __template,
    );
  }

  late final _mkstemp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp2 =
      _mkstemp2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps2(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps2(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps2 =
      _mkstemps2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp2(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp2(
      __template,
    );
  }

  late final _mkdtemp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp2 = _mkdtemp2Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system2(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system2(
      __command,
    );
  }

  late final _system2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system2 =
      _system2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath2(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath2(
      __name,
      __resolved,
    );
  }

  late final _realpath2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath2 = _realpath2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch2(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch2(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch2 = _bsearch2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort2(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort2(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort2 = _qsort2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs2(
    int __x,
  ) {
    return _abs2(
      __x,
    );
  }

  late final _abs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs2 = _abs2Ptr.asFunction<int Function(int)>();

  int labs2(
    int __x,
  ) {
    return _labs2(
      __x,
    );
  }

  late final _labs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs2 = _labs2Ptr.asFunction<int Function(int)>();

  int llabs2(
    int __x,
  ) {
    return _llabs2(
      __x,
    );
  }

  late final _llabs2Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs2 = _llabs2Ptr.asFunction<int Function(int)>();

  G_div_t div2(
    int __numer,
    int __denom,
  ) {
    return _div2(
      __numer,
      __denom,
    );
  }

  late final _div2Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div2 = _div2Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv2(
    int __numer,
    int __denom,
  ) {
    return _ldiv2(
      __numer,
      __denom,
    );
  }

  late final _ldiv2Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv2 = _ldiv2Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv2(
    int __numer,
    int __denom,
  ) {
    return _lldiv2(
      __numer,
      __denom,
    );
  }

  late final _lldiv2Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv2 = _lldiv2Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt2(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt2 = _ecvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt2(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt2 = _fcvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt2(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt2 = _gcvt2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r2(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r2 = _ecvt_r2Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r2(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r2(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r2 = _fcvt_r2Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen2(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen2(
      __s,
      __n,
    );
  }

  late final _mblen2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen2 =
      _mblen2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc2(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc2(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc2 = _mbtowc2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb2(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb2(
      __s,
      __wchar,
    );
  }

  late final _wctomb2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb2 =
      _wctomb2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs2(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs2(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs2 = _mbstowcs2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs2(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs2(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs2 = _wcstombs2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch2(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch2(
      __response,
    );
  }

  late final _rpmatch2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch2 =
      _rpmatch2Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt2(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt2(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt2 = _getsubopt2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg2(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg2(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg2 =
      _getloadavg2Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _rg_ipfs_config_from_file(
      file,
    );
  }

  late final _rg_ipfs_config_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_from_file');
  late final _rg_ipfs_config_from_file = _rg_ipfs_config_from_filePtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_from_str(
    ffi.Pointer<ffi.Char> config,
  ) {
    return _rg_ipfs_config_from_str(
      config,
    );
  }

  late final _rg_ipfs_config_from_strPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_from_str');
  late final _rg_ipfs_config_from_str = _rg_ipfs_config_from_strPtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_RgIpfsConfig> rg_ipfs_config_development() {
    return _rg_ipfs_config_development();
  }

  late final _rg_ipfs_config_developmentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_RgIpfsConfig> Function()>>(
          'rg_ipfs_config_development');
  late final _rg_ipfs_config_development = _rg_ipfs_config_developmentPtr
      .asFunction<ffi.Pointer<G_RgIpfsConfig> Function()>();

  ffi.Pointer<G_RgIpfsConfig> rg_ipfs_config_testing() {
    return _rg_ipfs_config_testing();
  }

  late final _rg_ipfs_config_testingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_RgIpfsConfig> Function()>>(
          'rg_ipfs_config_testing');
  late final _rg_ipfs_config_testing = _rg_ipfs_config_testingPtr
      .asFunction<ffi.Pointer<G_RgIpfsConfig> Function()>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_production(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _rg_ipfs_config_production(
      path,
    );
  }

  late final _rg_ipfs_config_productionPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_production');
  late final _rg_ipfs_config_production = _rg_ipfs_config_productionPtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_RayGunAdapter warp_rg_ipfs_temporary_new(
    ffi.Pointer<G_MultiPassAdapter> account,
    ffi.Pointer<G_PocketDimensionAdapter> cache,
    ffi.Pointer<G_RgIpfsConfig> config,
  ) {
    return _warp_rg_ipfs_temporary_new(
      account,
      cache,
      config,
    );
  }

  late final _warp_rg_ipfs_temporary_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>>('warp_rg_ipfs_temporary_new');
  late final _warp_rg_ipfs_temporary_new =
      _warp_rg_ipfs_temporary_newPtr.asFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>();

  G_FFIResult_RayGunAdapter warp_rg_ipfs_persistent_new(
    ffi.Pointer<G_MultiPassAdapter> account,
    ffi.Pointer<G_PocketDimensionAdapter> cache,
    ffi.Pointer<G_RgIpfsConfig> config,
  ) {
    return _warp_rg_ipfs_persistent_new(
      account,
      cache,
      config,
    );
  }

  late final _warp_rg_ipfs_persistent_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>>('warp_rg_ipfs_persistent_new');
  late final _warp_rg_ipfs_persistent_new =
      _warp_rg_ipfs_persistent_newPtr.asFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>();

  int __ctype_get_mb_cur_max3() {
    return ___ctype_get_mb_cur_max3();
  }

  late final ___ctype_get_mb_cur_max3Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max3 =
      ___ctype_get_mb_cur_max3Ptr.asFunction<int Function()>();

  double atof3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof3(
      __nptr,
    );
  }

  late final _atof3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof3 =
      _atof3Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi3(
      __nptr,
    );
  }

  late final _atoi3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi3 =
      _atoi3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol3(
      __nptr,
    );
  }

  late final _atol3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol3 =
      _atol3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll3(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll3(
      __nptr,
    );
  }

  late final _atoll3Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll3 =
      _atoll3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod3(
      __nptr,
      __endptr,
    );
  }

  late final _strtod3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod3 = _strtod3Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof3(
      __nptr,
      __endptr,
    );
  }

  late final _strtof3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof3 = _strtof3Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol3 = _strtol3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul3 = _strtoul3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq3 = _strtoq3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq3 = _strtouq3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll3 = _strtoll3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull3(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull3(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull3 = _strtoull3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a3(
    int __n,
  ) {
    return _l64a3(
      __n,
    );
  }

  late final _l64a3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a3 =
      _l64a3Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l3(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l3(
      __s,
    );
  }

  late final _a64l3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l3 =
      _a64l3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select3(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select3(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select3 = _select3Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect3(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect3(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect3 = _pselect3Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random3() {
    return _random3();
  }

  late final _random3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random3 = _random3Ptr.asFunction<int Function()>();

  void srandom3(
    int __seed,
  ) {
    return _srandom3(
      __seed,
    );
  }

  late final _srandom3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom3 = _srandom3Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate3(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate3(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate3 = _initstate3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate3(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate3(
      __statebuf,
    );
  }

  late final _setstate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate3 = _setstate3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r3(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r3(
      __buf,
      __result,
    );
  }

  late final _random_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r3 = _random_r3Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r3(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r3(
      __seed,
      __buf,
    );
  }

  late final _srandom_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r3 = _srandom_r3Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r3(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r3(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r3 = _initstate_r3Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r3(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r3(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r3 = _setstate_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand3() {
    return _rand3();
  }

  late final _rand3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand3 = _rand3Ptr.asFunction<int Function()>();

  void srand3(
    int __seed,
  ) {
    return _srand3(
      __seed,
    );
  }

  late final _srand3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand3 = _srand3Ptr.asFunction<void Function(int)>();

  int rand_r3(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r3(
      __seed,
    );
  }

  late final _rand_r3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r3 =
      _rand_r3Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand483() {
    return _drand483();
  }

  late final _drand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand483 = _drand483Ptr.asFunction<double Function()>();

  double erand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand483(
      __xsubi,
    );
  }

  late final _erand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand483 = _erand483Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand483() {
    return _lrand483();
  }

  late final _lrand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand483 = _lrand483Ptr.asFunction<int Function()>();

  int nrand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand483(
      __xsubi,
    );
  }

  late final _nrand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand483 =
      _nrand483Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand483() {
    return _mrand483();
  }

  late final _mrand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand483 = _mrand483Ptr.asFunction<int Function()>();

  int jrand483(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand483(
      __xsubi,
    );
  }

  late final _jrand483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand483 =
      _jrand483Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand483(
    int __seedval,
  ) {
    return _srand483(
      __seedval,
    );
  }

  late final _srand483Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand483 = _srand483Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed483(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed483(
      __seed16v,
    );
  }

  late final _seed483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed483 = _seed483Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong483(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong483(
      __param,
    );
  }

  late final _lcong483Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong483 =
      _lcong483Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r3(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r3(
      __buffer,
      __result,
    );
  }

  late final _drand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r3 = _drand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r3 = _erand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r3(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r3(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r3 = _lrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r3 = _nrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r3(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r3(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r3 = _mrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r3(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r3(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r3 = _jrand48_r3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r3(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r3(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r3 = _srand48_r3Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r3(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r3(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r3 = _seed48_r3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r3(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r3(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r3 = _lcong48_r3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc3(
    int __size,
  ) {
    return _malloc3(
      __size,
    );
  }

  late final _malloc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc3 =
      _malloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc3(
    int __nmemb,
    int __size,
  ) {
    return _calloc3(
      __nmemb,
      __size,
    );
  }

  late final _calloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc3 =
      _calloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc3(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc3(
      __ptr,
      __size,
    );
  }

  late final _realloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc3 = _realloc3Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free3(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free3(
      __ptr,
    );
  }

  late final _free3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free3 =
      _free3Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray6(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray6(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray6 = _reallocarray6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray7(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray7(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray7 = _reallocarray7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca3(
    int __size,
  ) {
    return _alloca3(
      __size,
    );
  }

  late final _alloca3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca3 =
      _alloca3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc3(
    int __size,
  ) {
    return _valloc3(
      __size,
    );
  }

  late final _valloc3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc3 =
      _valloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign3(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign3(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign3 = _posix_memalign3Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc3(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc3(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc3 =
      _aligned_alloc3Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort3() {
    return _abort3();
  }

  late final _abort3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort3 = _abort3Ptr.asFunction<void Function()>();

  int atexit3(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit3(
      __func,
    );
  }

  late final _atexit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit3 = _atexit3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit3(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit3(
      __func,
    );
  }

  late final _at_quick_exit3Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit3 = _at_quick_exit3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit3(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit3(
      __func,
      __arg,
    );
  }

  late final _on_exit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit3 = _on_exit3Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit3(
    int __status,
  ) {
    return _exit3(
      __status,
    );
  }

  late final _exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit3 = _exit3Ptr.asFunction<void Function(int)>();

  void quick_exit3(
    int __status,
  ) {
    return _quick_exit3(
      __status,
    );
  }

  late final _quick_exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit3 = _quick_exit3Ptr.asFunction<void Function(int)>();

  void _Exit3(
    int __status,
  ) {
    return __Exit3(
      __status,
    );
  }

  late final __Exit3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit3 = __Exit3Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv3(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv3(
      __name,
    );
  }

  late final _getenv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv3 = _getenv3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv3(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv3(
      __string,
    );
  }

  late final _putenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv3 =
      _putenv3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv3(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv3(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv3 = _setenv3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv3(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv3(
      __name,
    );
  }

  late final _unsetenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv3 =
      _unsetenv3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv3() {
    return _clearenv3();
  }

  late final _clearenv3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv3 = _clearenv3Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp3(
      __template,
    );
  }

  late final _mktemp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp3 = _mktemp3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp3(
      __template,
    );
  }

  late final _mkstemp3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp3 =
      _mkstemp3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps3(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps3(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps3 =
      _mkstemps3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp3(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp3(
      __template,
    );
  }

  late final _mkdtemp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp3 = _mkdtemp3Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system3(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system3(
      __command,
    );
  }

  late final _system3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system3 =
      _system3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath3(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath3(
      __name,
      __resolved,
    );
  }

  late final _realpath3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath3 = _realpath3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch3(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch3(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch3 = _bsearch3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort3(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort3(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort3 = _qsort3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs3(
    int __x,
  ) {
    return _abs3(
      __x,
    );
  }

  late final _abs3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs3 = _abs3Ptr.asFunction<int Function(int)>();

  int labs3(
    int __x,
  ) {
    return _labs3(
      __x,
    );
  }

  late final _labs3Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs3 = _labs3Ptr.asFunction<int Function(int)>();

  int llabs3(
    int __x,
  ) {
    return _llabs3(
      __x,
    );
  }

  late final _llabs3Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs3 = _llabs3Ptr.asFunction<int Function(int)>();

  G_div_t div3(
    int __numer,
    int __denom,
  ) {
    return _div3(
      __numer,
      __denom,
    );
  }

  late final _div3Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div3 = _div3Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv3(
    int __numer,
    int __denom,
  ) {
    return _ldiv3(
      __numer,
      __denom,
    );
  }

  late final _ldiv3Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv3 = _ldiv3Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv3(
    int __numer,
    int __denom,
  ) {
    return _lldiv3(
      __numer,
      __denom,
    );
  }

  late final _lldiv3Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv3 = _lldiv3Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt3(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt3 = _ecvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt3(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt3 = _fcvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt3(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt3 = _gcvt3Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r3(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r3 = _ecvt_r3Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r3(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r3(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r3 = _fcvt_r3Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen3(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen3(
      __s,
      __n,
    );
  }

  late final _mblen3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen3 =
      _mblen3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc3(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc3(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc3 = _mbtowc3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb3(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb3(
      __s,
      __wchar,
    );
  }

  late final _wctomb3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb3 =
      _wctomb3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs3(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs3(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs3 = _mbstowcs3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs3(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs3(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs3 = _wcstombs3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch3(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch3(
      __response,
    );
  }

  late final _rpmatch3Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch3 =
      _rpmatch3Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt3(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt3(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt3 = _getsubopt3Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg3(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg3(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg3 =
      _getloadavg3Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int> pocketdimension_memory_new() {
    return _pocketdimension_memory_new();
  }

  late final _pocketdimension_memory_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'pocketdimension_memory_new');
  late final _pocketdimension_memory_new = _pocketdimension_memory_newPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __ctype_get_mb_cur_max4() {
    return ___ctype_get_mb_cur_max4();
  }

  late final ___ctype_get_mb_cur_max4Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max4 =
      ___ctype_get_mb_cur_max4Ptr.asFunction<int Function()>();

  double atof4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof4(
      __nptr,
    );
  }

  late final _atof4Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof4 =
      _atof4Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi4(
      __nptr,
    );
  }

  late final _atoi4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi4 =
      _atoi4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol4(
      __nptr,
    );
  }

  late final _atol4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol4 =
      _atol4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll4(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll4(
      __nptr,
    );
  }

  late final _atoll4Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll4 =
      _atoll4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod4(
      __nptr,
      __endptr,
    );
  }

  late final _strtod4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod4 = _strtod4Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof4(
      __nptr,
      __endptr,
    );
  }

  late final _strtof4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof4 = _strtof4Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol4 = _strtol4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul4 = _strtoul4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq4 = _strtoq4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq4 = _strtouq4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll4 = _strtoll4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull4(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull4(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull4 = _strtoull4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a4(
    int __n,
  ) {
    return _l64a4(
      __n,
    );
  }

  late final _l64a4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a4 =
      _l64a4Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l4(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l4(
      __s,
    );
  }

  late final _a64l4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l4 =
      _a64l4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select4(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select4(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select4 = _select4Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect4(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect4(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect4 = _pselect4Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random4() {
    return _random4();
  }

  late final _random4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random4 = _random4Ptr.asFunction<int Function()>();

  void srandom4(
    int __seed,
  ) {
    return _srandom4(
      __seed,
    );
  }

  late final _srandom4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom4 = _srandom4Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate4(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate4(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate4 = _initstate4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate4(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate4(
      __statebuf,
    );
  }

  late final _setstate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate4 = _setstate4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r4(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r4(
      __buf,
      __result,
    );
  }

  late final _random_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r4 = _random_r4Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r4(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r4(
      __seed,
      __buf,
    );
  }

  late final _srandom_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r4 = _srandom_r4Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r4(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r4(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r4 = _initstate_r4Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r4(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r4(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r4 = _setstate_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand4() {
    return _rand4();
  }

  late final _rand4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand4 = _rand4Ptr.asFunction<int Function()>();

  void srand4(
    int __seed,
  ) {
    return _srand4(
      __seed,
    );
  }

  late final _srand4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand4 = _srand4Ptr.asFunction<void Function(int)>();

  int rand_r4(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r4(
      __seed,
    );
  }

  late final _rand_r4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r4 =
      _rand_r4Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand484() {
    return _drand484();
  }

  late final _drand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand484 = _drand484Ptr.asFunction<double Function()>();

  double erand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand484(
      __xsubi,
    );
  }

  late final _erand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand484 = _erand484Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand484() {
    return _lrand484();
  }

  late final _lrand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand484 = _lrand484Ptr.asFunction<int Function()>();

  int nrand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand484(
      __xsubi,
    );
  }

  late final _nrand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand484 =
      _nrand484Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand484() {
    return _mrand484();
  }

  late final _mrand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand484 = _mrand484Ptr.asFunction<int Function()>();

  int jrand484(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand484(
      __xsubi,
    );
  }

  late final _jrand484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand484 =
      _jrand484Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand484(
    int __seedval,
  ) {
    return _srand484(
      __seedval,
    );
  }

  late final _srand484Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand484 = _srand484Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed484(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed484(
      __seed16v,
    );
  }

  late final _seed484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed484 = _seed484Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong484(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong484(
      __param,
    );
  }

  late final _lcong484Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong484 =
      _lcong484Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r4(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r4(
      __buffer,
      __result,
    );
  }

  late final _drand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r4 = _drand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r4 = _erand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r4(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r4(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r4 = _lrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r4 = _nrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r4(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r4(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r4 = _mrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r4(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r4(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r4 = _jrand48_r4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r4(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r4(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r4 = _srand48_r4Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r4(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r4(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r4 = _seed48_r4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r4(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r4(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r4 = _lcong48_r4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc4(
    int __size,
  ) {
    return _malloc4(
      __size,
    );
  }

  late final _malloc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc4 =
      _malloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc4(
    int __nmemb,
    int __size,
  ) {
    return _calloc4(
      __nmemb,
      __size,
    );
  }

  late final _calloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc4 =
      _calloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc4(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc4(
      __ptr,
      __size,
    );
  }

  late final _realloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc4 = _realloc4Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free4(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free4(
      __ptr,
    );
  }

  late final _free4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free4 =
      _free4Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray8(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray8(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray8 = _reallocarray8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray9(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray9(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray9 = _reallocarray9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca4(
    int __size,
  ) {
    return _alloca4(
      __size,
    );
  }

  late final _alloca4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca4 =
      _alloca4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc4(
    int __size,
  ) {
    return _valloc4(
      __size,
    );
  }

  late final _valloc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc4 =
      _valloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign4(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign4(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign4 = _posix_memalign4Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc4(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc4(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc4 =
      _aligned_alloc4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort4() {
    return _abort4();
  }

  late final _abort4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort4 = _abort4Ptr.asFunction<void Function()>();

  int atexit4(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit4(
      __func,
    );
  }

  late final _atexit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit4 = _atexit4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit4(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit4(
      __func,
    );
  }

  late final _at_quick_exit4Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit4 = _at_quick_exit4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit4(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit4(
      __func,
      __arg,
    );
  }

  late final _on_exit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit4 = _on_exit4Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit4(
    int __status,
  ) {
    return _exit4(
      __status,
    );
  }

  late final _exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit4 = _exit4Ptr.asFunction<void Function(int)>();

  void quick_exit4(
    int __status,
  ) {
    return _quick_exit4(
      __status,
    );
  }

  late final _quick_exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit4 = _quick_exit4Ptr.asFunction<void Function(int)>();

  void _Exit4(
    int __status,
  ) {
    return __Exit4(
      __status,
    );
  }

  late final __Exit4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit4 = __Exit4Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv4(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv4(
      __name,
    );
  }

  late final _getenv4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv4 = _getenv4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv4(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv4(
      __string,
    );
  }

  late final _putenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv4 =
      _putenv4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv4(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv4(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv4 = _setenv4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv4(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv4(
      __name,
    );
  }

  late final _unsetenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv4 =
      _unsetenv4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv4() {
    return _clearenv4();
  }

  late final _clearenv4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv4 = _clearenv4Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp4(
      __template,
    );
  }

  late final _mktemp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp4 = _mktemp4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp4(
      __template,
    );
  }

  late final _mkstemp4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp4 =
      _mkstemp4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps4(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps4(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps4 =
      _mkstemps4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp4(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp4(
      __template,
    );
  }

  late final _mkdtemp4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp4 = _mkdtemp4Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system4(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system4(
      __command,
    );
  }

  late final _system4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system4 =
      _system4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath4(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath4(
      __name,
      __resolved,
    );
  }

  late final _realpath4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath4 = _realpath4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch4(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch4(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch4 = _bsearch4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort4(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort4(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort4 = _qsort4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs4(
    int __x,
  ) {
    return _abs4(
      __x,
    );
  }

  late final _abs4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs4 = _abs4Ptr.asFunction<int Function(int)>();

  int labs4(
    int __x,
  ) {
    return _labs4(
      __x,
    );
  }

  late final _labs4Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs4 = _labs4Ptr.asFunction<int Function(int)>();

  int llabs4(
    int __x,
  ) {
    return _llabs4(
      __x,
    );
  }

  late final _llabs4Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs4 = _llabs4Ptr.asFunction<int Function(int)>();

  G_div_t div4(
    int __numer,
    int __denom,
  ) {
    return _div4(
      __numer,
      __denom,
    );
  }

  late final _div4Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div4 = _div4Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv4(
    int __numer,
    int __denom,
  ) {
    return _ldiv4(
      __numer,
      __denom,
    );
  }

  late final _ldiv4Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv4 = _ldiv4Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv4(
    int __numer,
    int __denom,
  ) {
    return _lldiv4(
      __numer,
      __denom,
    );
  }

  late final _lldiv4Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv4 = _lldiv4Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt4(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt4 = _ecvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt4(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt4 = _fcvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt4(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt4 = _gcvt4Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r4(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r4 = _ecvt_r4Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r4(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r4(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r4 = _fcvt_r4Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen4(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen4(
      __s,
      __n,
    );
  }

  late final _mblen4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen4 =
      _mblen4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc4(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc4(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc4 = _mbtowc4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb4(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb4(
      __s,
      __wchar,
    );
  }

  late final _wctomb4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb4 =
      _wctomb4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs4(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs4(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs4 = _mbstowcs4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs4(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs4(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs4 = _wcstombs4Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch4(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch4(
      __response,
    );
  }

  late final _rpmatch4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch4 =
      _rpmatch4Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt4(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt4(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt4 = _getsubopt4Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg4(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg4(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg4 =
      _getloadavg4Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int> pocketdimension_stretto_new() {
    return _pocketdimension_stretto_new();
  }

  late final _pocketdimension_stretto_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'pocketdimension_stretto_new');
  late final _pocketdimension_stretto_new = _pocketdimension_stretto_newPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __ctype_get_mb_cur_max5() {
    return ___ctype_get_mb_cur_max5();
  }

  late final ___ctype_get_mb_cur_max5Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max5 =
      ___ctype_get_mb_cur_max5Ptr.asFunction<int Function()>();

  double atof5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof5(
      __nptr,
    );
  }

  late final _atof5Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof5 =
      _atof5Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi5(
      __nptr,
    );
  }

  late final _atoi5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi5 =
      _atoi5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol5(
      __nptr,
    );
  }

  late final _atol5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol5 =
      _atol5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll5(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll5(
      __nptr,
    );
  }

  late final _atoll5Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll5 =
      _atoll5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod5(
      __nptr,
      __endptr,
    );
  }

  late final _strtod5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod5 = _strtod5Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof5(
      __nptr,
      __endptr,
    );
  }

  late final _strtof5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof5 = _strtof5Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol5 = _strtol5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul5 = _strtoul5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq5 = _strtoq5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq5 = _strtouq5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll5 = _strtoll5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull5(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull5(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull5 = _strtoull5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a5(
    int __n,
  ) {
    return _l64a5(
      __n,
    );
  }

  late final _l64a5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a5 =
      _l64a5Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l5(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l5(
      __s,
    );
  }

  late final _a64l5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l5 =
      _a64l5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select5(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select5(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select5 = _select5Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect5(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect5(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect5 = _pselect5Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random5() {
    return _random5();
  }

  late final _random5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random5 = _random5Ptr.asFunction<int Function()>();

  void srandom5(
    int __seed,
  ) {
    return _srandom5(
      __seed,
    );
  }

  late final _srandom5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom5 = _srandom5Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate5(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate5(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate5 = _initstate5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate5(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate5(
      __statebuf,
    );
  }

  late final _setstate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate5 = _setstate5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r5(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r5(
      __buf,
      __result,
    );
  }

  late final _random_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r5 = _random_r5Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r5(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r5(
      __seed,
      __buf,
    );
  }

  late final _srandom_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r5 = _srandom_r5Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r5(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r5(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r5 = _initstate_r5Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r5(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r5(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r5 = _setstate_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand5() {
    return _rand5();
  }

  late final _rand5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand5 = _rand5Ptr.asFunction<int Function()>();

  void srand5(
    int __seed,
  ) {
    return _srand5(
      __seed,
    );
  }

  late final _srand5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand5 = _srand5Ptr.asFunction<void Function(int)>();

  int rand_r5(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r5(
      __seed,
    );
  }

  late final _rand_r5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r5 =
      _rand_r5Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand485() {
    return _drand485();
  }

  late final _drand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand485 = _drand485Ptr.asFunction<double Function()>();

  double erand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand485(
      __xsubi,
    );
  }

  late final _erand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand485 = _erand485Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand485() {
    return _lrand485();
  }

  late final _lrand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand485 = _lrand485Ptr.asFunction<int Function()>();

  int nrand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand485(
      __xsubi,
    );
  }

  late final _nrand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand485 =
      _nrand485Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand485() {
    return _mrand485();
  }

  late final _mrand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand485 = _mrand485Ptr.asFunction<int Function()>();

  int jrand485(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand485(
      __xsubi,
    );
  }

  late final _jrand485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand485 =
      _jrand485Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand485(
    int __seedval,
  ) {
    return _srand485(
      __seedval,
    );
  }

  late final _srand485Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand485 = _srand485Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed485(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed485(
      __seed16v,
    );
  }

  late final _seed485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed485 = _seed485Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong485(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong485(
      __param,
    );
  }

  late final _lcong485Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong485 =
      _lcong485Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r5(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r5(
      __buffer,
      __result,
    );
  }

  late final _drand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r5 = _drand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r5 = _erand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r5(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r5(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r5 = _lrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r5 = _nrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r5(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r5(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r5 = _mrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r5(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r5(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r5 = _jrand48_r5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r5(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r5(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r5 = _srand48_r5Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r5(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r5(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r5 = _seed48_r5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r5(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r5(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r5 = _lcong48_r5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc5(
    int __size,
  ) {
    return _malloc5(
      __size,
    );
  }

  late final _malloc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc5 =
      _malloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc5(
    int __nmemb,
    int __size,
  ) {
    return _calloc5(
      __nmemb,
      __size,
    );
  }

  late final _calloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc5 =
      _calloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc5(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc5(
      __ptr,
      __size,
    );
  }

  late final _realloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc5 = _realloc5Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free5(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free5(
      __ptr,
    );
  }

  late final _free5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free5 =
      _free5Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray10(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray10(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray10 = _reallocarray10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray11(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray11(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray11 = _reallocarray11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca5(
    int __size,
  ) {
    return _alloca5(
      __size,
    );
  }

  late final _alloca5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca5 =
      _alloca5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc5(
    int __size,
  ) {
    return _valloc5(
      __size,
    );
  }

  late final _valloc5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc5 =
      _valloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign5(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign5(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign5 = _posix_memalign5Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc5(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc5(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc5 =
      _aligned_alloc5Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort5() {
    return _abort5();
  }

  late final _abort5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort5 = _abort5Ptr.asFunction<void Function()>();

  int atexit5(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit5(
      __func,
    );
  }

  late final _atexit5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit5 = _atexit5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit5(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit5(
      __func,
    );
  }

  late final _at_quick_exit5Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit5 = _at_quick_exit5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit5(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit5(
      __func,
      __arg,
    );
  }

  late final _on_exit5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit5 = _on_exit5Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit5(
    int __status,
  ) {
    return _exit5(
      __status,
    );
  }

  late final _exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit5 = _exit5Ptr.asFunction<void Function(int)>();

  void quick_exit5(
    int __status,
  ) {
    return _quick_exit5(
      __status,
    );
  }

  late final _quick_exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit5 = _quick_exit5Ptr.asFunction<void Function(int)>();

  void _Exit5(
    int __status,
  ) {
    return __Exit5(
      __status,
    );
  }

  late final __Exit5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit5 = __Exit5Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv5(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv5(
      __name,
    );
  }

  late final _getenv5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv5 = _getenv5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv5(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv5(
      __string,
    );
  }

  late final _putenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv5 =
      _putenv5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv5(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv5(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv5 = _setenv5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv5(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv5(
      __name,
    );
  }

  late final _unsetenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv5 =
      _unsetenv5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv5() {
    return _clearenv5();
  }

  late final _clearenv5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv5 = _clearenv5Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp5(
      __template,
    );
  }

  late final _mktemp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp5 = _mktemp5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp5(
      __template,
    );
  }

  late final _mkstemp5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp5 =
      _mkstemp5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps5(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps5(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps5Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps5 =
      _mkstemps5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp5(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp5(
      __template,
    );
  }

  late final _mkdtemp5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp5 = _mkdtemp5Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system5(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system5(
      __command,
    );
  }

  late final _system5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system5 =
      _system5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath5(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath5(
      __name,
      __resolved,
    );
  }

  late final _realpath5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath5 = _realpath5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch5(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch5(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch5 = _bsearch5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort5(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort5(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort5 = _qsort5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs5(
    int __x,
  ) {
    return _abs5(
      __x,
    );
  }

  late final _abs5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs5 = _abs5Ptr.asFunction<int Function(int)>();

  int labs5(
    int __x,
  ) {
    return _labs5(
      __x,
    );
  }

  late final _labs5Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs5 = _labs5Ptr.asFunction<int Function(int)>();

  int llabs5(
    int __x,
  ) {
    return _llabs5(
      __x,
    );
  }

  late final _llabs5Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs5 = _llabs5Ptr.asFunction<int Function(int)>();

  G_div_t div5(
    int __numer,
    int __denom,
  ) {
    return _div5(
      __numer,
      __denom,
    );
  }

  late final _div5Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div5 = _div5Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv5(
    int __numer,
    int __denom,
  ) {
    return _ldiv5(
      __numer,
      __denom,
    );
  }

  late final _ldiv5Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv5 = _ldiv5Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv5(
    int __numer,
    int __denom,
  ) {
    return _lldiv5(
      __numer,
      __denom,
    );
  }

  late final _lldiv5Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv5 = _lldiv5Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt5(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt5 = _ecvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt5(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt5 = _fcvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt5(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt5 = _gcvt5Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r5(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r5 = _ecvt_r5Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r5(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r5(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r5 = _fcvt_r5Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen5(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen5(
      __s,
      __n,
    );
  }

  late final _mblen5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen5 =
      _mblen5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc5(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc5(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc5 = _mbtowc5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb5(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb5(
      __s,
      __wchar,
    );
  }

  late final _wctomb5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb5 =
      _wctomb5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs5(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs5(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs5 = _mbstowcs5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs5(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs5(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs5 = _wcstombs5Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch5(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch5(
      __response,
    );
  }

  late final _rpmatch5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch5 =
      _rpmatch5Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt5(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt5(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt5 = _getsubopt5Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg5(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg5(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg5 =
      _getloadavg5Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  G_FFIResult_PocketDimensionAdapter pocket_dimension_flatfile_new(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> index_file,
  ) {
    return _pocket_dimension_flatfile_new(
      path,
      index_file,
    );
  }

  late final _pocket_dimension_flatfile_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_PocketDimensionAdapter Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pocket_dimension_flatfile_new');
  late final _pocket_dimension_flatfile_new =
      _pocket_dimension_flatfile_newPtr.asFunction<
          G_FFIResult_PocketDimensionAdapter Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __ctype_get_mb_cur_max6() {
    return ___ctype_get_mb_cur_max6();
  }

  late final ___ctype_get_mb_cur_max6Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max6 =
      ___ctype_get_mb_cur_max6Ptr.asFunction<int Function()>();

  double atof6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof6(
      __nptr,
    );
  }

  late final _atof6Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof6 =
      _atof6Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi6(
      __nptr,
    );
  }

  late final _atoi6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi6 =
      _atoi6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol6(
      __nptr,
    );
  }

  late final _atol6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol6 =
      _atol6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll6(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll6(
      __nptr,
    );
  }

  late final _atoll6Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll6 =
      _atoll6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod6(
      __nptr,
      __endptr,
    );
  }

  late final _strtod6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod6 = _strtod6Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof6(
      __nptr,
      __endptr,
    );
  }

  late final _strtof6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof6 = _strtof6Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol6 = _strtol6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul6 = _strtoul6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq6 = _strtoq6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq6 = _strtouq6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll6 = _strtoll6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull6(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull6(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull6 = _strtoull6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a6(
    int __n,
  ) {
    return _l64a6(
      __n,
    );
  }

  late final _l64a6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a6 =
      _l64a6Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l6(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l6(
      __s,
    );
  }

  late final _a64l6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l6 =
      _a64l6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select6(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select6(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select6 = _select6Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect6(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect6(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect6 = _pselect6Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random6() {
    return _random6();
  }

  late final _random6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random6 = _random6Ptr.asFunction<int Function()>();

  void srandom6(
    int __seed,
  ) {
    return _srandom6(
      __seed,
    );
  }

  late final _srandom6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom6 = _srandom6Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate6(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate6(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate6 = _initstate6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate6(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate6(
      __statebuf,
    );
  }

  late final _setstate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate6 = _setstate6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r6(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r6(
      __buf,
      __result,
    );
  }

  late final _random_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r6 = _random_r6Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r6(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r6(
      __seed,
      __buf,
    );
  }

  late final _srandom_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r6 = _srandom_r6Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r6(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r6(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r6 = _initstate_r6Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r6(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r6(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r6 = _setstate_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand6() {
    return _rand6();
  }

  late final _rand6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand6 = _rand6Ptr.asFunction<int Function()>();

  void srand6(
    int __seed,
  ) {
    return _srand6(
      __seed,
    );
  }

  late final _srand6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand6 = _srand6Ptr.asFunction<void Function(int)>();

  int rand_r6(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r6(
      __seed,
    );
  }

  late final _rand_r6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r6 =
      _rand_r6Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand486() {
    return _drand486();
  }

  late final _drand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand486 = _drand486Ptr.asFunction<double Function()>();

  double erand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand486(
      __xsubi,
    );
  }

  late final _erand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand486 = _erand486Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand486() {
    return _lrand486();
  }

  late final _lrand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand486 = _lrand486Ptr.asFunction<int Function()>();

  int nrand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand486(
      __xsubi,
    );
  }

  late final _nrand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand486 =
      _nrand486Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand486() {
    return _mrand486();
  }

  late final _mrand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand486 = _mrand486Ptr.asFunction<int Function()>();

  int jrand486(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand486(
      __xsubi,
    );
  }

  late final _jrand486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand486 =
      _jrand486Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand486(
    int __seedval,
  ) {
    return _srand486(
      __seedval,
    );
  }

  late final _srand486Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand486 = _srand486Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed486(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed486(
      __seed16v,
    );
  }

  late final _seed486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed486 = _seed486Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong486(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong486(
      __param,
    );
  }

  late final _lcong486Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong486 =
      _lcong486Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r6(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r6(
      __buffer,
      __result,
    );
  }

  late final _drand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r6 = _drand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r6 = _erand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r6(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r6(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r6 = _lrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r6 = _nrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r6(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r6(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r6 = _mrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r6(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r6(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r6 = _jrand48_r6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r6(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r6(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r6 = _srand48_r6Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r6(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r6(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r6 = _seed48_r6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r6(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r6(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r6 = _lcong48_r6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc6(
    int __size,
  ) {
    return _malloc6(
      __size,
    );
  }

  late final _malloc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc6 =
      _malloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc6(
    int __nmemb,
    int __size,
  ) {
    return _calloc6(
      __nmemb,
      __size,
    );
  }

  late final _calloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc6 =
      _calloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc6(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc6(
      __ptr,
      __size,
    );
  }

  late final _realloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc6 = _realloc6Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free6(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free6(
      __ptr,
    );
  }

  late final _free6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free6 =
      _free6Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray12(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray12(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray12 = _reallocarray12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray13(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray13(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray13 = _reallocarray13Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca6(
    int __size,
  ) {
    return _alloca6(
      __size,
    );
  }

  late final _alloca6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca6 =
      _alloca6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc6(
    int __size,
  ) {
    return _valloc6(
      __size,
    );
  }

  late final _valloc6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc6 =
      _valloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign6(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign6(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign6 = _posix_memalign6Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc6(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc6(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc6 =
      _aligned_alloc6Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort6() {
    return _abort6();
  }

  late final _abort6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort6 = _abort6Ptr.asFunction<void Function()>();

  int atexit6(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit6(
      __func,
    );
  }

  late final _atexit6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit6 = _atexit6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit6(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit6(
      __func,
    );
  }

  late final _at_quick_exit6Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit6 = _at_quick_exit6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit6(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit6(
      __func,
      __arg,
    );
  }

  late final _on_exit6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit6 = _on_exit6Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit6(
    int __status,
  ) {
    return _exit6(
      __status,
    );
  }

  late final _exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit6 = _exit6Ptr.asFunction<void Function(int)>();

  void quick_exit6(
    int __status,
  ) {
    return _quick_exit6(
      __status,
    );
  }

  late final _quick_exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit6 = _quick_exit6Ptr.asFunction<void Function(int)>();

  void _Exit6(
    int __status,
  ) {
    return __Exit6(
      __status,
    );
  }

  late final __Exit6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit6 = __Exit6Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv6(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv6(
      __name,
    );
  }

  late final _getenv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv6 = _getenv6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv6(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv6(
      __string,
    );
  }

  late final _putenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv6 =
      _putenv6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv6(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv6(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv6 = _setenv6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv6(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv6(
      __name,
    );
  }

  late final _unsetenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv6 =
      _unsetenv6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv6() {
    return _clearenv6();
  }

  late final _clearenv6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv6 = _clearenv6Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp6(
      __template,
    );
  }

  late final _mktemp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp6 = _mktemp6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp6(
      __template,
    );
  }

  late final _mkstemp6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp6 =
      _mkstemp6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps6(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps6(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps6Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps6 =
      _mkstemps6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp6(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp6(
      __template,
    );
  }

  late final _mkdtemp6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp6 = _mkdtemp6Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system6(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system6(
      __command,
    );
  }

  late final _system6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system6 =
      _system6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath6(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath6(
      __name,
      __resolved,
    );
  }

  late final _realpath6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath6 = _realpath6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch6(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch6(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch6 = _bsearch6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort6(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort6(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort6 = _qsort6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs6(
    int __x,
  ) {
    return _abs6(
      __x,
    );
  }

  late final _abs6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs6 = _abs6Ptr.asFunction<int Function(int)>();

  int labs6(
    int __x,
  ) {
    return _labs6(
      __x,
    );
  }

  late final _labs6Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs6 = _labs6Ptr.asFunction<int Function(int)>();

  int llabs6(
    int __x,
  ) {
    return _llabs6(
      __x,
    );
  }

  late final _llabs6Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs6 = _llabs6Ptr.asFunction<int Function(int)>();

  G_div_t div6(
    int __numer,
    int __denom,
  ) {
    return _div6(
      __numer,
      __denom,
    );
  }

  late final _div6Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div6 = _div6Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv6(
    int __numer,
    int __denom,
  ) {
    return _ldiv6(
      __numer,
      __denom,
    );
  }

  late final _ldiv6Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv6 = _ldiv6Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv6(
    int __numer,
    int __denom,
  ) {
    return _lldiv6(
      __numer,
      __denom,
    );
  }

  late final _lldiv6Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv6 = _lldiv6Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt6(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt6 = _ecvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt6(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt6 = _fcvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt6(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt6 = _gcvt6Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r6(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r6 = _ecvt_r6Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r6(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r6(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r6 = _fcvt_r6Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen6(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen6(
      __s,
      __n,
    );
  }

  late final _mblen6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen6 =
      _mblen6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc6(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc6(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc6 = _mbtowc6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb6(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb6(
      __s,
      __wchar,
    );
  }

  late final _wctomb6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb6 =
      _wctomb6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs6(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs6(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs6 = _mbstowcs6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs6(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs6(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs6 = _wcstombs6Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch6(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch6(
      __response,
    );
  }

  late final _rpmatch6Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch6 =
      _rpmatch6Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt6(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt6(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt6 = _getsubopt6Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg6(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg6(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg6 =
      _getloadavg6Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int> constellation_fs_storj_new(
    ffi.Pointer<ffi.Int> pd,
    ffi.Pointer<ffi.Char> akey,
    ffi.Pointer<ffi.Char> skey,
  ) {
    return _constellation_fs_storj_new(
      pd,
      akey,
      skey,
    );
  }

  late final _constellation_fs_storj_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_fs_storj_new');
  late final _constellation_fs_storj_new =
      _constellation_fs_storj_newPtr.asFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __ctype_get_mb_cur_max7() {
    return ___ctype_get_mb_cur_max7();
  }

  late final ___ctype_get_mb_cur_max7Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max7 =
      ___ctype_get_mb_cur_max7Ptr.asFunction<int Function()>();

  double atof7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof7(
      __nptr,
    );
  }

  late final _atof7Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof7 =
      _atof7Ptr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi7(
      __nptr,
    );
  }

  late final _atoi7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi7 =
      _atoi7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol7(
      __nptr,
    );
  }

  late final _atol7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol7 =
      _atol7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll7(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll7(
      __nptr,
    );
  }

  late final _atoll7Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll7 =
      _atoll7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod7(
      __nptr,
      __endptr,
    );
  }

  late final _strtod7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod7 = _strtod7Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof7(
      __nptr,
      __endptr,
    );
  }

  late final _strtof7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof7 = _strtof7Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtol7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol7 = _strtol7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoul7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul7 = _strtoul7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoq7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq7 = _strtoq7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouq7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq7 = _strtouq7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoll7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll7 = _strtoll7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull7(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull7(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoull7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull7 = _strtoull7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a7(
    int __n,
  ) {
    return _l64a7(
      __n,
    );
  }

  late final _l64a7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a7 =
      _l64a7Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l7(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l7(
      __s,
    );
  }

  late final _a64l7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l7 =
      _a64l7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select7(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select7(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _select7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select7 = _select7Ptr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect7(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect7(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselect7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect7 = _pselect7Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random7() {
    return _random7();
  }

  late final _random7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random7 = _random7Ptr.asFunction<int Function()>();

  void srandom7(
    int __seed,
  ) {
    return _srandom7(
      __seed,
    );
  }

  late final _srandom7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom7 = _srandom7Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate7(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate7(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate7 = _initstate7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate7(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate7(
      __statebuf,
    );
  }

  late final _setstate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate7 = _setstate7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r7(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r7(
      __buf,
      __result,
    );
  }

  late final _random_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r7 = _random_r7Ptr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r7(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r7(
      __seed,
      __buf,
    );
  }

  late final _srandom_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r7 = _srandom_r7Ptr
      .asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r7(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r7(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r7 = _initstate_r7Ptr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r7(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r7(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r7 = _setstate_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<G_random_data>)>();

  int rand7() {
    return _rand7();
  }

  late final _rand7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand7 = _rand7Ptr.asFunction<int Function()>();

  void srand7(
    int __seed,
  ) {
    return _srand7(
      __seed,
    );
  }

  late final _srand7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand7 = _srand7Ptr.asFunction<void Function(int)>();

  int rand_r7(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r7(
      __seed,
    );
  }

  late final _rand_r7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r7 =
      _rand_r7Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand487() {
    return _drand487();
  }

  late final _drand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand487 = _drand487Ptr.asFunction<double Function()>();

  double erand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand487(
      __xsubi,
    );
  }

  late final _erand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand487 = _erand487Ptr
      .asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand487() {
    return _lrand487();
  }

  late final _lrand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand487 = _lrand487Ptr.asFunction<int Function()>();

  int nrand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand487(
      __xsubi,
    );
  }

  late final _nrand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand487 =
      _nrand487Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand487() {
    return _mrand487();
  }

  late final _mrand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand487 = _mrand487Ptr.asFunction<int Function()>();

  int jrand487(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand487(
      __xsubi,
    );
  }

  late final _jrand487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand487 =
      _jrand487Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand487(
    int __seedval,
  ) {
    return _srand487(
      __seedval,
    );
  }

  late final _srand487Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand487 = _srand487Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed487(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed487(
      __seed16v,
    );
  }

  late final _seed487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed487 = _seed487Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong487(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong487(
      __param,
    );
  }

  late final _lcong487Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong487 =
      _lcong487Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r7(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r7(
      __buffer,
      __result,
    );
  }

  late final _drand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r7 = _drand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r7 = _erand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r7(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r7(
      __buffer,
      __result,
    );
  }

  late final _lrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r7 = _lrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r7 = _nrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r7(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r7(
      __buffer,
      __result,
    );
  }

  late final _mrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r7 = _mrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r7(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r7(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r7 = _jrand48_r7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r7(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r7(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Long, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r7 = _srand48_r7Ptr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r7(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r7(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r7 = _seed48_r7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r7(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r7(
      __param,
      __buffer,
    );
  }

  late final _lcong48_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r7 = _lcong48_r7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc7(
    int __size,
  ) {
    return _malloc7(
      __size,
    );
  }

  late final _malloc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc7 =
      _malloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc7(
    int __nmemb,
    int __size,
  ) {
    return _calloc7(
      __nmemb,
      __size,
    );
  }

  late final _calloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc7 =
      _calloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc7(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc7(
      __ptr,
      __size,
    );
  }

  late final _realloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc7 = _realloc7Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free7(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free7(
      __ptr,
    );
  }

  late final _free7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free7 =
      _free7Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray14(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray14(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray14 = _reallocarray14Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> reallocarray15(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray15(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarray15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray15 = _reallocarray15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca7(
    int __size,
  ) {
    return _alloca7(
      __size,
    );
  }

  late final _alloca7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca7 =
      _alloca7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc7(
    int __size,
  ) {
    return _valloc7(
      __size,
    );
  }

  late final _valloc7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc7 =
      _valloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign7(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign7(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign7 = _posix_memalign7Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc7(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc7(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc7 =
      _aligned_alloc7Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort7() {
    return _abort7();
  }

  late final _abort7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort7 = _abort7Ptr.asFunction<void Function()>();

  int atexit7(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit7(
      __func,
    );
  }

  late final _atexit7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit7 = _atexit7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit7(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit7(
      __func,
    );
  }

  late final _at_quick_exit7Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit7 = _at_quick_exit7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit7(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit7(
      __func,
      __arg,
    );
  }

  late final _on_exit7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit7 = _on_exit7Ptr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit7(
    int __status,
  ) {
    return _exit7(
      __status,
    );
  }

  late final _exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit7 = _exit7Ptr.asFunction<void Function(int)>();

  void quick_exit7(
    int __status,
  ) {
    return _quick_exit7(
      __status,
    );
  }

  late final _quick_exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit7 = _quick_exit7Ptr.asFunction<void Function(int)>();

  void _Exit7(
    int __status,
  ) {
    return __Exit7(
      __status,
    );
  }

  late final __Exit7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit7 = __Exit7Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv7(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv7(
      __name,
    );
  }

  late final _getenv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv7 = _getenv7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv7(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv7(
      __string,
    );
  }

  late final _putenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv7 =
      _putenv7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv7(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv7(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv7 = _setenv7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv7(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv7(
      __name,
    );
  }

  late final _unsetenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv7 =
      _unsetenv7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv7() {
    return _clearenv7();
  }

  late final _clearenv7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv7 = _clearenv7Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp7(
      __template,
    );
  }

  late final _mktemp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp7 = _mktemp7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp7(
      __template,
    );
  }

  late final _mkstemp7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp7 =
      _mkstemp7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps7(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps7(
      __template,
      __suffixlen,
    );
  }

  late final _mkstemps7Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps7 =
      _mkstemps7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp7(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp7(
      __template,
    );
  }

  late final _mkdtemp7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp7 = _mkdtemp7Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system7(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system7(
      __command,
    );
  }

  late final _system7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system7 =
      _system7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath7(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath7(
      __name,
      __resolved,
    );
  }

  late final _realpath7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath7 = _realpath7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch7(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch7(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearch7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch7 = _bsearch7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort7(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort7(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsort7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort7 = _qsort7Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs7(
    int __x,
  ) {
    return _abs7(
      __x,
    );
  }

  late final _abs7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs7 = _abs7Ptr.asFunction<int Function(int)>();

  int labs7(
    int __x,
  ) {
    return _labs7(
      __x,
    );
  }

  late final _labs7Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs7 = _labs7Ptr.asFunction<int Function(int)>();

  int llabs7(
    int __x,
  ) {
    return _llabs7(
      __x,
    );
  }

  late final _llabs7Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs7 = _llabs7Ptr.asFunction<int Function(int)>();

  G_div_t div7(
    int __numer,
    int __denom,
  ) {
    return _div7(
      __numer,
      __denom,
    );
  }

  late final _div7Ptr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div7 = _div7Ptr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv7(
    int __numer,
    int __denom,
  ) {
    return _ldiv7(
      __numer,
      __denom,
    );
  }

  late final _ldiv7Ptr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv7 = _ldiv7Ptr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv7(
    int __numer,
    int __denom,
  ) {
    return _lldiv7(
      __numer,
      __denom,
    );
  }

  late final _lldiv7Ptr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv7 = _lldiv7Ptr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt7(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt7 = _ecvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt7(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt7 = _fcvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt7(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt7 = _gcvt7Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r7(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r7 = _ecvt_r7Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r7(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r7(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_r7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r7 = _fcvt_r7Ptr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen7(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen7(
      __s,
      __n,
    );
  }

  late final _mblen7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen7 =
      _mblen7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc7(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc7(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc7 = _mbtowc7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb7(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb7(
      __s,
      __wchar,
    );
  }

  late final _wctomb7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb7 =
      _wctomb7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs7(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs7(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcs7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs7 = _mbstowcs7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs7(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs7(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombs7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs7 = _wcstombs7Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch7(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch7(
      __response,
    );
  }

  late final _rpmatch7Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch7 =
      _rpmatch7Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt7(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt7(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsubopt7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt7 = _getsubopt7Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg7(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg7(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavg7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg7 =
      _getloadavg7Ptr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int> constellation_fs_memory_create_context() {
    return _constellation_fs_memory_create_context();
  }

  late final _constellation_fs_memory_create_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'constellation_fs_memory_create_context');
  late final _constellation_fs_memory_create_context =
      _constellation_fs_memory_create_contextPtr
          .asFunction<ffi.Pointer<ffi.Int> Function()>();
}

class G___fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class G_div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class G_ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class G_lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

class G___sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class G_timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

class G_timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

class G_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class G___pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<G___pthread_internal_list> __prev;

  external ffi.Pointer<G___pthread_internal_list> __next;
}

class G___pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<G___pthread_internal_slist> __next;
}

class G___pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = G___pthread_internal_list;

class G___pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class G___pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class G___once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external G___pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external G___pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external G___pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class G_random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class G_drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CipherType {
  /// AES256-GCM
  static const int Aes256Gcm = 0;

  /// Xchacha20poly1305
  static const int Xchacha20poly1305 = 1;
}

abstract class Comparator {
  static const int Eq = 0;
  static const int Gt = 1;
  static const int Gte = 2;
  static const int Lt = 3;
  static const int Lte = 4;
  static const int Ne = 5;
}

/// Types that would be used for import and export
/// Currently only support `Json`, `Yaml`, and `Toml`.
/// Implementation can override these functions for their own
/// types to be use for import and export.
abstract class ConstellationDataType {
  static const int Json = 0;
  static const int Yaml = 1;
  static const int Toml = 2;
}

abstract class DataType {
  static const int Messaging = 0;
  static const int FileSystem = 1;
  static const int Accounts = 2;
  static const int Cache = 3;
  static const int Http = 4;
  static const int DataExport = 5;
  static const int Unknown = 6;
}

abstract class EmbedState {
  static const int Enabled = 0;
  static const int Disable = 1;
}

abstract class FriendRequestStatus {
  static const int Uninitialized = 0;
  static const int Pending = 1;
  static const int Accepted = 2;
  static const int Denied = 3;
  static const int FriendRemoved = 4;
  static const int RequestRemoved = 5;
}

abstract class PhraseType {
  static const int Standard = 0;
  static const int Secure = 1;
}

abstract class PinState {
  static const int Pin = 0;
  static const int Unpin = 1;
}

abstract class ReactionState {
  static const int Add = 0;
  static const int Remove = 1;
}

class G_Badge extends ffi.Opaque {}

class G_Cipher extends ffi.Opaque {}

class G_ConstellationAdapter extends ffi.Opaque {}

class G_DID extends ffi.Opaque {}

class G_Data extends ffi.Opaque {}

class G_Directory extends ffi.Opaque {}

class G_Ed25519Keypair extends ffi.Opaque {}

class G_Ed25519PublicKey extends ffi.Opaque {}

class G_File extends ffi.Opaque {}

class G_FriendRequest extends ffi.Opaque {}

class G_Graphics extends ffi.Opaque {}

class G_Identifier extends ffi.Opaque {}

class G_Identity extends ffi.Opaque {}

class G_IdentityUpdate extends ffi.Opaque {}

class G_Item extends ffi.Opaque {}

class G_Message extends ffi.Opaque {}

class G_MultiPassAdapter extends ffi.Opaque {}

class G_PocketDimensionAdapter extends ffi.Opaque {}

class G_QueryBuilder extends ffi.Opaque {}

class G_RayGunAdapter extends ffi.Opaque {}

class G_Reaction extends ffi.Opaque {}

class G_Role extends ffi.Opaque {}

class G_SenderId extends ffi.Opaque {}

class G_Tesseract extends ffi.Opaque {}

class G_X25519PublicKey extends ffi.Opaque {}

class G_X25519Secret extends ffi.Opaque {}

class G_FFIVec_Directory extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Directory>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

typedef uintptr_t = ffi.UnsignedLong;

class G_FFIError extends ffi.Struct {
  external ffi.Pointer<ffi.Char> error_type;

  external ffi.Pointer<ffi.Char> error_message;
}

/// Used when a function does not return anything when successful
class G_FFIResult_Null extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_usize extends ffi.Struct {
  external ffi.Pointer<uintptr_t> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_Item extends ffi.Struct {
  external ffi.Pointer<G_Item> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Item extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Item>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_File extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_File>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Directory extends ffi.Struct {
  external ffi.Pointer<G_Directory> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_File extends ffi.Struct {
  external ffi.Pointer<G_File> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_u8> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_String extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_DID>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_DID extends ffi.Struct {
  external ffi.Pointer<G_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Ed25519PublicKey extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Ed25519PublicKey>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Data extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Data>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Data extends ffi.Struct {
  external ffi.Pointer<G_Data> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Role extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Role>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Badge extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Badge>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Identity extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Identity>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_FriendRequest>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Identity extends ffi.Struct {
  external ffi.Pointer<G_Identity> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_FriendRequest> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_QueryBuilder extends ffi.Struct {
  external ffi.Pointer<G_QueryBuilder> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Message>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_SenderId extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_SenderId>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Reaction extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Reaction>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_String extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_String> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_Message> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_Tesseract extends ffi.Struct {
  external ffi.Pointer<G_Tesseract> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_MpIpfsConfig extends ffi.Opaque {}

class G_FFIResult_MpIpfsConfig extends ffi.Struct {
  external ffi.Pointer<G_MpIpfsConfig> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_MultiPassAdapter extends ffi.Struct {
  external ffi.Pointer<G_MultiPassAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_RgIpfsConfig extends ffi.Opaque {}

class G_FFIResult_RgIpfsConfig extends ffi.Struct {
  external ffi.Pointer<G_RgIpfsConfig> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_RayGunAdapter extends ffi.Struct {
  external ffi.Pointer<G_RayGunAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_PocketDimensionAdapter extends ffi.Struct {
  external ffi.Pointer<G_PocketDimensionAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

const int __GNUC_VA_LIST = 1;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
