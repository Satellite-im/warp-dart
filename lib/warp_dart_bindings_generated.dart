// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/warp_dart.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class WarpDartBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WarpDartBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WarpDartBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// For historical reasons; programs expect signal's return value to be
  /// defined by <sys/signal.h>.
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<G_rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<G_rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<G_rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<G_rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<G_rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<G_rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<G_rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<G_rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<G_rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<G_rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<G_rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<G_rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<G_rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<G_rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<G_rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  /// calloc is now declared in _malloc.h
  G_div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<G_div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  /// free is now declared in _malloc.h
  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  G_ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Long, ffi.Long)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<G_ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  G_lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr = _lookup<
          ffi.NativeFunction<G_lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
      'lldiv');
  late final _lldiv = _lldivPtr.asFunction<G_lldiv_t Function(int, int)>();

  /// malloc is now declared in _malloc.h
  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  /// posix_memalign is now declared in _malloc.h
  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  /// realloc is now declared in _malloc.h
  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  /// getcap(3) functions
  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// getsubopt(3) external variable
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  void constellationadapter_free(
    ffi.Pointer<G_ConstellationAdapter> ptr,
  ) {
    return _constellationadapter_free(
      ptr,
    );
  }

  late final _constellationadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellationadapter_free');
  late final _constellationadapter_free = _constellationadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_ConstellationAdapter>)>();

  void ffivec_directory_free(
    ffi.Pointer<G_FFIVec_Directory> cvec,
  ) {
    return _ffivec_directory_free(
      cvec,
    );
  }

  late final _ffivec_directory_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Directory>)>>('ffivec_directory_free');
  late final _ffivec_directory_free = _ffivec_directory_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Directory>)>();

  void directory_free(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_free(
      ptr,
    );
  }

  late final _directory_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Directory>)>>(
          'directory_free');
  late final _directory_free =
      _directory_freePtr.asFunction<void Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Directory> directory_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_new(
      name,
    );
  }

  late final _directory_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<ffi.Char>)>>('directory_new');
  late final _directory_new = _directory_newPtr
      .asFunction<ffi.Pointer<G_Directory> Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null directory_add_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Item> item,
  ) {
    return _directory_add_item(
      dir_ptr,
      item,
    );
  }

  late final _directory_add_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Item>)>>('directory_add_item');
  late final _directory_add_item = _directory_add_itemPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Item>)>();

  G_FFIResult_Null directory_add_directory(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_add_directory(
      dir_ptr,
      directory,
    );
  }

  late final _directory_add_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Directory>)>>('directory_add_directory');
  late final _directory_add_directory = _directory_add_directoryPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Directory>)>();

  G_FFIResult_Null directory_add_file(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_File> file,
  ) {
    return _directory_add_file(
      dir_ptr,
      file,
    );
  }

  late final _directory_add_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_File>)>>('directory_add_file');
  late final _directory_add_file = _directory_add_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_File>)>();

  G_FFIResult_usize directory_get_item_index(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_get_item_index(
      dir_ptr,
      name,
    );
  }

  late final _directory_get_item_indexPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_usize Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_get_item_index');
  late final _directory_get_item_index =
      _directory_get_item_indexPtr.asFunction<
          G_FFIResult_usize Function(
              ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null directory_rename_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> current_name,
    ffi.Pointer<ffi.Char> new_name,
  ) {
    return _directory_rename_item(
      dir_ptr,
      current_name,
      new_name,
    );
  }

  late final _directory_rename_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_rename_item');
  late final _directory_rename_item = _directory_rename_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Item directory_remove_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _directory_remove_item(
      dir_ptr,
      name,
    );
  }

  late final _directory_remove_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_remove_item');
  late final _directory_remove_item = _directory_remove_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  bool directory_has_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_has_item(
      ptr,
      item,
    );
  }

  late final _directory_has_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_has_item');
  late final _directory_has_item = _directory_has_itemPtr.asFunction<
      bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_FFIVec_Item> directory_get_items(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_get_items(
      ptr,
    );
  }

  late final _directory_get_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_get_items');
  late final _directory_get_items = _directory_get_itemsPtr.asFunction<
      ffi.Pointer<G_FFIVec_Item> Function(ffi.Pointer<G_Directory>)>();

  G_FFIResult_Item directory_get_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_get_item(
      ptr,
      item,
    );
  }

  late final _directory_get_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>)>>('directory_get_item');
  late final _directory_get_item = _directory_get_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Item directory_remove_item_from_path(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> directory,
    ffi.Pointer<ffi.Char> item,
  ) {
    return _directory_remove_item_from_path(
      ptr,
      directory,
      item,
    );
  }

  late final _directory_remove_item_from_pathPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_remove_item_from_path');
  late final _directory_remove_item_from_path =
      _directory_remove_item_from_pathPtr.asFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool directory_move_item_to(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
  ) {
    return _directory_move_item_to(
      ptr,
      src,
      dst,
    );
  }

  late final _directory_move_item_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('directory_move_item_to');
  late final _directory_move_item_to = _directory_move_item_toPtr.asFunction<
      bool Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> directory_id(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_id(
      dir,
    );
  }

  late final _directory_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_id');
  late final _directory_id = _directory_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Char> directory_name(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_name(
      dir,
    );
  }

  late final _directory_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_name');
  late final _directory_name = _directory_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Char> directory_description(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_description(
      dir,
    );
  }

  late final _directory_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Directory>)>>('directory_description');
  late final _directory_description = _directory_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Directory>)>();

  int directory_size(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_size(
      dir,
    );
  }

  late final _directory_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_size');
  late final _directory_size =
      _directory_sizePtr.asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_creation(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_creation(
      dir,
    );
  }

  late final _directory_creationPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_creation');
  late final _directory_creation = _directory_creationPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_modified(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_modified(
      dir,
    );
  }

  late final _directory_modifiedPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_modified');
  late final _directory_modified = _directory_modifiedPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  void ffivec_file_free(
    ffi.Pointer<G_FFIVec_File> cvec,
  ) {
    return _ffivec_file_free(
      cvec,
    );
  }

  late final _ffivec_file_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_File>)>>(
      'ffivec_file_free');
  late final _ffivec_file_free = _ffivec_file_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_File>)>();

  void file_free(
    ffi.Pointer<G_File> ptr,
  ) {
    return _file_free(
      ptr,
    );
  }

  late final _file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_File>)>>(
          'file_free');
  late final _file_free =
      _file_freePtr.asFunction<void Function(ffi.Pointer<G_File>)>();

  ffi.Pointer<G_File> file_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _file_new(
      name,
    );
  }

  late final _file_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Char>)>>('file_new');
  late final _file_new = _file_newPtr
      .asFunction<ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Char>)>();

  void ffivec_item_free(
    ffi.Pointer<G_FFIVec_Item> cvec,
  ) {
    return _ffivec_item_free(
      cvec,
    );
  }

  late final _ffivec_item_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Item>)>>(
      'ffivec_item_free');
  late final _ffivec_item_free = _ffivec_item_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Item>)>();

  void item_free(
    ffi.Pointer<G_Item> ptr,
  ) {
    return _item_free(
      ptr,
    );
  }

  late final _item_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Item>)>>(
          'item_free');
  late final _item_free =
      _item_freePtr.asFunction<void Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<G_Item> directory_into_item(
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_into_item(
      directory,
    );
  }

  late final _directory_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_into_item');
  late final _directory_into_item = _directory_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Item> file_into_item(
    ffi.Pointer<G_File> file,
  ) {
    return _file_into_item(
      file,
    );
  }

  late final _file_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>>('file_into_item');
  late final _file_into_item = _file_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>();

  G_FFIResult_Directory item_into_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_directory(
      item,
    );
  }

  late final _item_into_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_Item>)>>('item_into_directory');
  late final _item_into_directory = _item_into_directoryPtr
      .asFunction<G_FFIResult_Directory Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_File item_into_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_file(
      item,
    );
  }

  late final _item_into_filePtr = _lookup<
          ffi.NativeFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>>(
      'item_into_file');
  late final _item_into_file = _item_into_filePtr
      .asFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_id(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_id(
      item,
    );
  }

  late final _item_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>>('item_id');
  late final _item_id = _item_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_creation(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_creation(
      item,
    );
  }

  late final _item_creationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_creation');
  late final _item_creation = _item_creationPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_modified(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_modified(
      item,
    );
  }

  late final _item_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_modified');
  late final _item_modified = _item_modifiedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_name(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_name(
      item,
    );
  }

  late final _item_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>>('item_name');
  late final _item_name = _item_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Char> item_description(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_description(
      item,
    );
  }

  late final _item_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Item>)>>('item_description');
  late final _item_description = _item_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Item>)>();

  int item_size(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_size(
      item,
    );
  }

  late final _item_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Item>)>>(
          'item_size');
  late final _item_size =
      _item_sizePtr.asFunction<int Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_Null item_rename(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _item_rename(
      item,
      name,
    );
  }

  late final _item_renamePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>>('item_rename');
  late final _item_rename = _item_renamePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>();

  bool item_is_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_directory(
      item,
    );
  }

  late final _item_is_directoryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Item>)>>(
          'item_is_directory');
  late final _item_is_directory =
      _item_is_directoryPtr.asFunction<bool Function(ffi.Pointer<G_Item>)>();

  bool item_is_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_file(
      item,
    );
  }

  late final _item_is_filePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Item>)>>(
          'item_is_file');
  late final _item_is_file =
      _item_is_filePtr.asFunction<bool Function(ffi.Pointer<G_Item>)>();

  bool item_set_description(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Char> desc,
  ) {
    return _item_set_description(
      item,
      desc,
    );
  }

  late final _item_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Item>,
              ffi.Pointer<ffi.Char>)>>('item_set_description');
  late final _item_set_description = _item_set_descriptionPtr
      .asFunction<bool Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null item_set_size(
    ffi.Pointer<G_Item> item,
    int size,
  ) {
    return _item_set_size(
      item,
      size,
    );
  }

  late final _item_set_sizePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Int64)>>('item_set_size');
  late final _item_set_size = _item_set_sizePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Item>, int)>();

  G_FFIResult_Null constellation_select(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _constellation_select(
      ctx,
      name,
    );
  }

  late final _constellation_selectPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_select');
  late final _constellation_select = _constellation_selectPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_go_back(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_go_back(
      ctx,
    );
  }

  late final _constellation_go_backPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>)>>('constellation_go_back');
  late final _constellation_go_back = _constellation_go_backPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Directory constellation_open_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _constellation_open_directory(
      ctx,
      name,
    );
  }

  late final _constellation_open_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_open_directory');
  late final _constellation_open_directory =
      _constellation_open_directoryPtr.asFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_Directory> constellation_root_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_root_directory(
      ctx,
    );
  }

  late final _constellation_root_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_root_directory');
  late final _constellation_root_directory =
      _constellation_root_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory(
      ctx,
    );
  }

  late final _constellation_current_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory');
  late final _constellation_current_directory =
      _constellation_current_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory_mut(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory_mut(
      ctx,
    );
  }

  late final _constellation_current_directory_mutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory_mut');
  late final _constellation_current_directory_mut =
      _constellation_current_directory_mutPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Null constellation_put(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Char> local,
  ) {
    return _constellation_put(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_putPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_put');
  late final _constellation_put = _constellation_putPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_put_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _constellation_put_buffer(
      ctx,
      remote,
      buffer,
      buffer_size,
    );
  }

  late final _constellation_put_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('constellation_put_buffer');
  late final _constellation_put_buffer =
      _constellation_put_bufferPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_Null constellation_get(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    ffi.Pointer<ffi.Char> local,
  ) {
    return _constellation_get(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_getPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_get');
  late final _constellation_get = _constellation_getPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_FFIVec_u8 constellation_get_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
  ) {
    return _constellation_get_buffer(
      ctx,
      remote,
    );
  }

  late final _constellation_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_get_buffer');
  late final _constellation_get_buffer =
      _constellation_get_bufferPtr.asFunction<
          G_FFIResult_FFIVec_u8 Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_remove(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    bool recursive,
  ) {
    return _constellation_remove(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_removePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Bool)>>('constellation_remove');
  late final _constellation_remove = _constellation_removePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>, bool)>();

  G_FFIResult_Null constellation_create_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> remote,
    bool recursive,
  ) {
    return _constellation_create_directory(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_create_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('constellation_create_directory');
  late final _constellation_create_directory =
      _constellation_create_directoryPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>, bool)>();

  G_FFIResult_Null constellation_move_item(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<ffi.Char> dst,
  ) {
    return _constellation_move_item(
      ctx,
      src,
      dst,
    );
  }

  late final _constellation_move_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_move_item');
  late final _constellation_move_item = _constellation_move_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null constellation_sync_ref(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _constellation_sync_ref(
      ctx,
      src,
    );
  }

  late final _constellation_sync_refPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Char>)>>('constellation_sync_ref');
  late final _constellation_sync_ref = _constellation_sync_refPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_String constellation_export(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
  ) {
    return _constellation_export(
      ctx,
      datatype,
    );
  }

  late final _constellation_exportPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32)>>('constellation_export');
  late final _constellation_export = _constellation_exportPtr.asFunction<
      G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>, int)>();

  G_FFIResult_Null constellation_import(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _constellation_import(
      ctx,
      datatype,
      data,
    );
  }

  late final _constellation_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('constellation_import');
  late final _constellation_import = _constellation_importPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, int, ffi.Pointer<ffi.Char>)>();

  void ffivec_did_free(
    ffi.Pointer<G_FFIVec_DID> cvec,
  ) {
    return _ffivec_did_free(
      cvec,
    );
  }

  late final _ffivec_did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_DID>)>>(
          'ffivec_did_free');
  late final _ffivec_did_free = _ffivec_did_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_DID>)>();

  void did_free(
    ffi.Pointer<G_DID> ptr,
  ) {
    return _did_free(
      ptr,
    );
  }

  late final _did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_DID>)>>(
          'did_free');
  late final _did_free =
      _did_freePtr.asFunction<void Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Cipher> cipher_new() {
    return _cipher_new();
  }

  late final _cipher_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Cipher> Function()>>(
          'cipher_new');
  late final _cipher_new =
      _cipher_newPtr.asFunction<ffi.Pointer<G_Cipher> Function()>();

  ffi.Pointer<G_Cipher> cipher_from_bytes(
    ffi.Pointer<ffi.Uint8> key,
    int key_size,
  ) {
    return _cipher_from_bytes(
      key,
      key_size,
    );
  }

  late final _cipher_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Cipher> Function(
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_from_bytes');
  late final _cipher_from_bytes = _cipher_from_bytesPtr.asFunction<
      ffi.Pointer<G_Cipher> Function(ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_encrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_encrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_encrypt');
  late final _cipher_self_encrypt = _cipher_self_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_decrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_decrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_decrypt');
  late final _cipher_self_decrypt = _cipher_self_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_encrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_encrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_encrypt');
  late final _cipher_encrypt = _cipher_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_decrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_decrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_decrypt');
  late final _cipher_decrypt = _cipher_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_sha1_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha1_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha1_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha1_hash');
  late final _crypto_sha1_hash = _crypto_sha1_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_sha256_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha256_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha256_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha256_hash');
  late final _crypto_sha256_hash = _crypto_sha256_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_blake2s_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_blake2s_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_blake2s_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_blake2s_hash');
  late final _crypto_blake2s_hash = _crypto_blake2s_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Char> generate_mnemonic_phrase(
    int phrase_type,
  ) {
    return _generate_mnemonic_phrase(
      phrase_type,
    );
  }

  late final _generate_mnemonic_phrasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'generate_mnemonic_phrase');
  late final _generate_mnemonic_phrase = _generate_mnemonic_phrasePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  G_FFIResult_DID did_from_mnemonic(
    ffi.Pointer<ffi.Char> phrase,
  ) {
    return _did_from_mnemonic(
      phrase,
    );
  }

  late final _did_from_mnemonicPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>>(
      'did_from_mnemonic');
  late final _did_from_mnemonic = _did_from_mnemonicPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null mnemonic_into_tesseract(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> phrase,
  ) {
    return _mnemonic_into_tesseract(
      tesseract,
      phrase,
    );
  }

  late final _mnemonic_into_tesseractPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('mnemonic_into_tesseract');
  late final _mnemonic_into_tesseract = _mnemonic_into_tesseractPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> did_to_string(
    ffi.Pointer<G_DID> did_key,
  ) {
    return _did_to_string(
      did_key,
    );
  }

  late final _did_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_DID>)>>('did_to_string');
  late final _did_to_string = _did_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_DID>)>();

  G_FFIResult_DID did_from_string(
    ffi.Pointer<ffi.Char> did_key,
  ) {
    return _did_from_string(
      did_key,
    );
  }

  late final _did_from_stringPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>>(
      'did_from_string');
  late final _did_from_string = _did_from_stringPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Char>)>();

  void ffivec_data_free(
    ffi.Pointer<G_FFIVec_Data> cvec,
  ) {
    return _ffivec_data_free(
      cvec,
    );
  }

  late final _ffivec_data_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Data>)>>(
      'ffivec_data_free');
  late final _ffivec_data_free = _ffivec_data_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Data>)>();

  void data_free(
    ffi.Pointer<G_Data> ptr,
  ) {
    return _data_free(
      ptr,
    );
  }

  late final _data_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_free');
  late final _data_free =
      _data_freePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_Data data_new(
    int data,
    ffi.Pointer<ffi.Char> payload,
  ) {
    return _data_new(
      data,
      payload,
    );
  }

  late final _data_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Data Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('data_new');
  late final _data_new = _data_newPtr
      .asFunction<G_FFIResult_Data Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> data_id(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_id(
      data,
    );
  }

  late final _data_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Data>)>>('data_id');
  late final _data_id = _data_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Data>)>();

  void data_update_time(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_update_time(
      data,
    );
  }

  late final _data_update_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_update_time');
  late final _data_update_time =
      _data_update_timePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  void data_set_version(
    ffi.Pointer<G_Data> data,
    int version,
  ) {
    return _data_set_version(
      data,
      version,
    );
  }

  late final _data_set_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Uint32)>>('data_set_version');
  late final _data_set_version = _data_set_versionPtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_data_type(
    ffi.Pointer<G_Data> data,
    int data_type,
  ) {
    return _data_set_data_type(
      data,
      data_type,
    );
  }

  late final _data_set_data_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Int32)>>('data_set_data_type');
  late final _data_set_data_type = _data_set_data_typePtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_size(
    ffi.Pointer<G_Data> data,
    int size,
  ) {
    return _data_set_size(
      data,
      size,
    );
  }

  late final _data_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Data>, ffi.Uint64)>>('data_set_size');
  late final _data_set_size =
      _data_set_sizePtr.asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  int data_size(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_size(
      data,
    );
  }

  late final _data_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<G_Data>)>>(
          'data_size');
  late final _data_size =
      _data_sizePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_timestamp(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_timestamp(
      data,
    );
  }

  late final _data_timestampPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Data>)>>(
          'data_timestamp');
  late final _data_timestamp =
      _data_timestampPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_version(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_version(
      data,
    );
  }

  late final _data_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<G_Data>)>>(
          'data_version');
  late final _data_version =
      _data_versionPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_type(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_type(
      data,
    );
  }

  late final _data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Data>)>>(
          'data_type');
  late final _data_type =
      _data_typePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_String data_payload(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_payload(
      data,
    );
  }

  late final _data_payloadPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>>(
      'data_payload');
  late final _data_payload = _data_payloadPtr
      .asFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>();

  void multipassadapter_free(
    ffi.Pointer<G_MultiPassAdapter> ptr,
  ) {
    return _multipassadapter_free(
      ptr,
    );
  }

  late final _multipassadapter_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipassadapter_free');
  late final _multipassadapter_free = _multipassadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_MultiPassAdapter>)>();

  ffi.Pointer<ffi.Char> multipass_generate_name() {
    return _multipass_generate_name();
  }

  late final _multipass_generate_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'multipass_generate_name');
  late final _multipass_generate_name = _multipass_generate_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void ffivec_role_free(
    ffi.Pointer<G_FFIVec_Role> cvec,
  ) {
    return _ffivec_role_free(
      cvec,
    );
  }

  late final _ffivec_role_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Role>)>>(
      'ffivec_role_free');
  late final _ffivec_role_free = _ffivec_role_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Role>)>();

  void role_free(
    ffi.Pointer<G_Role> ptr,
  ) {
    return _role_free(
      ptr,
    );
  }

  late final _role_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Role>)>>(
          'role_free');
  late final _role_free =
      _role_freePtr.asFunction<void Function(ffi.Pointer<G_Role>)>();

  void ffivec_badge_free(
    ffi.Pointer<G_FFIVec_Badge> cvec,
  ) {
    return _ffivec_badge_free(
      cvec,
    );
  }

  late final _ffivec_badge_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Badge>)>>(
      'ffivec_badge_free');
  late final _ffivec_badge_free = _ffivec_badge_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Badge>)>();

  void badge_free(
    ffi.Pointer<G_Badge> ptr,
  ) {
    return _badge_free(
      ptr,
    );
  }

  late final _badge_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Badge>)>>(
          'badge_free');
  late final _badge_free =
      _badge_freePtr.asFunction<void Function(ffi.Pointer<G_Badge>)>();

  void graphics_free(
    ffi.Pointer<G_Graphics> ptr,
  ) {
    return _graphics_free(
      ptr,
    );
  }

  late final _graphics_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Graphics>)>>(
          'graphics_free');
  late final _graphics_free =
      _graphics_freePtr.asFunction<void Function(ffi.Pointer<G_Graphics>)>();

  void ffivec_identity_free(
    ffi.Pointer<G_FFIVec_Identity> cvec,
  ) {
    return _ffivec_identity_free(
      cvec,
    );
  }

  late final _ffivec_identity_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Identity>)>>('ffivec_identity_free');
  late final _ffivec_identity_free = _ffivec_identity_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Identity>)>();

  void identity_free(
    ffi.Pointer<G_Identity> ptr,
  ) {
    return _identity_free(
      ptr,
    );
  }

  late final _identity_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identity>)>>(
          'identity_free');
  late final _identity_free =
      _identity_freePtr.asFunction<void Function(ffi.Pointer<G_Identity>)>();

  void ffivec_friendrequest_free(
    ffi.Pointer<G_FFIVec_FriendRequest> cvec,
  ) {
    return _ffivec_friendrequest_free(
      cvec,
    );
  }

  late final _ffivec_friendrequest_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>>(
      'ffivec_friendrequest_free');
  late final _ffivec_friendrequest_free = _ffivec_friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>();

  void friendrequest_free(
    ffi.Pointer<G_FriendRequest> ptr,
  ) {
    return _friendrequest_free(
      ptr,
    );
  }

  late final _friendrequest_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FriendRequest>)>>(
      'friendrequest_free');
  late final _friendrequest_free = _friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FriendRequest>)>();

  void identifier_free(
    ffi.Pointer<G_Identifier> ptr,
  ) {
    return _identifier_free(
      ptr,
    );
  }

  late final _identifier_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identifier>)>>(
          'identifier_free');
  late final _identifier_free = _identifier_freePtr
      .asFunction<void Function(ffi.Pointer<G_Identifier>)>();

  void identityupdate_free(
    ffi.Pointer<G_IdentityUpdate> ptr,
  ) {
    return _identityupdate_free(
      ptr,
    );
  }

  late final _identityupdate_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'identityupdate_free');
  late final _identityupdate_free = _identityupdate_freePtr
      .asFunction<void Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_role_name(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_name(
      role,
    );
  }

  late final _multipass_role_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Role>)>>('multipass_role_name');
  late final _multipass_role_name = _multipass_role_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Role>)>();

  int multipass_role_level(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_level(
      role,
    );
  }

  late final _multipass_role_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<G_Role>)>>(
          'multipass_role_level');
  late final _multipass_role_level =
      _multipass_role_levelPtr.asFunction<int Function(ffi.Pointer<G_Role>)>();

  ffi.Pointer<ffi.Char> multipass_badge_name(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_name(
      badge,
    );
  }

  late final _multipass_badge_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_name');
  late final _multipass_badge_name = _multipass_badge_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Char> multipass_badge_icon(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_icon(
      badge,
    );
  }

  late final _multipass_badge_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_icon');
  late final _multipass_badge_icon = _multipass_badge_iconPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Char> multipass_graphics_profile_picture(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_picture(
      graphics,
    );
  }

  late final _multipass_graphics_profile_picturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_picture');
  late final _multipass_graphics_profile_picture =
      _multipass_graphics_profile_picturePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Char> multipass_graphics_profile_banner(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_banner(
      graphics,
    );
  }

  late final _multipass_graphics_profile_bannerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_banner');
  late final _multipass_graphics_profile_banner =
      _multipass_graphics_profile_bannerPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Char> multipass_identity_username(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_username(
      identity,
    );
  }

  late final _multipass_identity_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_username');
  late final _multipass_identity_username = _multipass_identity_usernamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Char> multipass_identity_short_id(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_short_id(
      identity,
    );
  }

  late final _multipass_identity_short_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_short_id');
  late final _multipass_identity_short_id = _multipass_identity_short_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_identity_did_key(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_did_key(
      identity,
    );
  }

  late final _multipass_identity_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_did_key');
  late final _multipass_identity_did_key = _multipass_identity_did_keyPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Graphics> multipass_identity_graphics(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_graphics(
      identity,
    );
  }

  late final _multipass_identity_graphicsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Graphics> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_graphics');
  late final _multipass_identity_graphics = _multipass_identity_graphicsPtr
      .asFunction<ffi.Pointer<G_Graphics> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Char> multipass_identity_status_message(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_status_message(
      identity,
    );
  }

  late final _multipass_identity_status_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_status_message');
  late final _multipass_identity_status_message =
      _multipass_identity_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Role> multipass_identity_roles(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_roles(
      identity,
    );
  }

  late final _multipass_identity_rolesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Role> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_roles');
  late final _multipass_identity_roles =
      _multipass_identity_rolesPtr.asFunction<
          ffi.Pointer<G_FFIVec_Role> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Badge> multipass_identity_available_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_available_badge(
      identity,
    );
  }

  late final _multipass_identity_available_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_available_badge');
  late final _multipass_identity_available_badge =
      _multipass_identity_available_badgePtr.asFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Badge> multipass_identity_active_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_active_badge(
      identity,
    );
  }

  late final _multipass_identity_active_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_active_badge');
  late final _multipass_identity_active_badge =
      _multipass_identity_active_badgePtr
          .asFunction<ffi.Pointer<G_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Void> multipass_identity_linked_accounts(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_linked_accounts(
      identity,
    );
  }

  late final _multipass_identity_linked_accountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_linked_accounts');
  late final _multipass_identity_linked_accounts =
      _multipass_identity_linked_accountsPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_friend_request_from(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_from(
      request,
    );
  }

  late final _multipass_friend_request_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_from');
  late final _multipass_friend_request_from = _multipass_friend_request_fromPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_DID> multipass_friend_request_to(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_to(
      request,
    );
  }

  late final _multipass_friend_request_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_to');
  late final _multipass_friend_request_to = _multipass_friend_request_toPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  int multipass_friend_request_status(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_status(
      request,
    );
  }

  late final _multipass_friend_request_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_FriendRequest>)>>(
      'multipass_friend_request_status');
  late final _multipass_friend_request_status =
      _multipass_friend_request_statusPtr
          .asFunction<int Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_user_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identifier_user_name(
      name,
    );
  }

  late final _multipass_identifier_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<ffi.Char>)>>('multipass_identifier_user_name');
  late final _multipass_identifier_user_name =
      _multipass_identifier_user_namePtr.asFunction<
          ffi.Pointer<G_Identifier> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_did_key(
    ffi.Pointer<G_DID> key,
  ) {
    return _multipass_identifier_did_key(
      key,
    );
  }

  late final _multipass_identifier_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<G_DID>)>>('multipass_identifier_did_key');
  late final _multipass_identifier_did_key = _multipass_identifier_did_keyPtr
      .asFunction<ffi.Pointer<G_Identifier> Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_own() {
    return _multipass_identifier_own();
  }

  late final _multipass_identifier_ownPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Identifier> Function()>>(
          'multipass_identifier_own');
  late final _multipass_identifier_own = _multipass_identifier_ownPtr
      .asFunction<ffi.Pointer<G_Identifier> Function()>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_username(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_username(
      name,
    );
  }

  late final _multipass_identity_update_set_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_username');
  late final _multipass_identity_update_set_username =
      _multipass_identity_update_set_usernamePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_picture(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_graphics_picture(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_graphics_picture');
  late final _multipass_identity_update_set_graphics_picture =
      _multipass_identity_update_set_graphics_picturePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_banner(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_graphics_banner(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_graphics_banner');
  late final _multipass_identity_update_set_graphics_banner =
      _multipass_identity_update_set_graphics_bannerPtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_status_message(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _multipass_identity_update_set_status_message(
      name,
    );
  }

  late final _multipass_identity_update_set_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>>(
      'multipass_identity_update_set_status_message');
  late final _multipass_identity_update_set_status_message =
      _multipass_identity_update_set_status_messagePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_username(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_username(
      update,
    );
  }

  late final _multipass_identity_update_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_username');
  late final _multipass_identity_update_username =
      _multipass_identity_update_usernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_graphics_picture(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_picture(
      update,
    );
  }

  late final _multipass_identity_update_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_picture');
  late final _multipass_identity_update_graphics_picture =
      _multipass_identity_update_graphics_picturePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_graphics_banner(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_banner(
      update,
    );
  }

  late final _multipass_identity_update_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_banner');
  late final _multipass_identity_update_graphics_banner =
      _multipass_identity_update_graphics_bannerPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Char> multipass_identity_update_status_message(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_status_message(
      update,
    );
  }

  late final _multipass_identity_update_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_status_message');
  late final _multipass_identity_update_status_message =
      _multipass_identity_update_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_create_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _multipass_create_identity(
      ctx,
      username,
      passphrase,
    );
  }

  late final _multipass_create_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('multipass_create_identity');
  late final _multipass_create_identity =
      _multipass_create_identityPtr.asFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_FFIVec_Identity multipass_get_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_Identifier> identifier,
  ) {
    return _multipass_get_identity(
      ctx,
      identifier,
    );
  }

  late final _multipass_get_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_Identity Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_Identifier>)>>('multipass_get_identity');
  late final _multipass_get_identity = _multipass_get_identityPtr.asFunction<
      G_FFIResult_FFIVec_Identity Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_Identifier>)>();

  G_FFIResult_Identity multipass_get_own_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_get_own_identity(
      ctx,
    );
  }

  late final _multipass_get_own_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Identity Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_get_own_identity');
  late final _multipass_get_own_identity =
      _multipass_get_own_identityPtr.asFunction<
          G_FFIResult_Identity Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_update_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_IdentityUpdate> option,
  ) {
    return _multipass_update_identity(
      ctx,
      option,
    );
  }

  late final _multipass_update_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>>('multipass_update_identity');
  late final _multipass_update_identity =
      _multipass_update_identityPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_decrypt_private_key(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _multipass_decrypt_private_key(
      ctx,
      passphrase,
    );
  }

  late final _multipass_decrypt_private_keyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Char>)>>('multipass_decrypt_private_key');
  late final _multipass_decrypt_private_key =
      _multipass_decrypt_private_keyPtr.asFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null multipass_refresh_cache(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_refresh_cache(
      ctx,
    );
  }

  late final _multipass_refresh_cachePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_refresh_cache');
  late final _multipass_refresh_cache = _multipass_refresh_cachePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_send_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_send_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_send_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_send_request');
  late final _multipass_send_request = _multipass_send_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_accept_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_accept_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_accept_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_accept_request');
  late final _multipass_accept_request =
      _multipass_accept_requestPtr.asFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_deny_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_deny_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_deny_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_deny_request');
  late final _multipass_deny_request = _multipass_deny_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_close_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_close_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_close_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_close_request');
  late final _multipass_close_request = _multipass_close_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_incoming_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_incoming_request(
      ctx,
    );
  }

  late final _multipass_list_incoming_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_incoming_request');
  late final _multipass_list_incoming_request =
      _multipass_list_incoming_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_outgoing_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_outgoing_request(
      ctx,
    );
  }

  late final _multipass_list_outgoing_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_outgoing_request');
  late final _multipass_list_outgoing_request =
      _multipass_list_outgoing_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_all_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_all_request(
      ctx,
    );
  }

  late final _multipass_list_all_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_all_request');
  late final _multipass_list_all_request =
      _multipass_list_all_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_remove_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_remove_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_remove_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_remove_friend');
  late final _multipass_remove_friend = _multipass_remove_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_block(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_block(
      ctx,
      pubkey,
    );
  }

  late final _multipass_blockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_block');
  late final _multipass_block = _multipass_blockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_unblock(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_unblock(
      ctx,
      pubkey,
    );
  }

  late final _multipass_unblockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_unblock');
  late final _multipass_unblock = _multipass_unblockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_DID multipass_block_list(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_block_list(
      ctx,
    );
  }

  late final _multipass_block_listPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_block_list');
  late final _multipass_block_list = _multipass_block_listPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_DID multipass_list_friends(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_friends(
      ctx,
    );
  }

  late final _multipass_list_friendsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_friends');
  late final _multipass_list_friends = _multipass_list_friendsPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_has_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_has_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_has_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_has_friend');
  late final _multipass_has_friend = _multipass_has_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  void pocketdimensionadapter_free(
    ffi.Pointer<G_PocketDimensionAdapter> ptr,
  ) {
    return _pocketdimensionadapter_free(
      ptr,
    );
  }

  late final _pocketdimensionadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_PocketDimensionAdapter>)>>(
      'pocketdimensionadapter_free');
  late final _pocketdimensionadapter_free = _pocketdimensionadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_PocketDimensionAdapter>)>();

  void querybuilder_free(
    ffi.Pointer<G_QueryBuilder> ptr,
  ) {
    return _querybuilder_free(
      ptr,
    );
  }

  late final _querybuilder_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_QueryBuilder>)>>(
      'querybuilder_free');
  late final _querybuilder_free = _querybuilder_freePtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>)>();

  ffi.Pointer<G_QueryBuilder> querybuilder_new() {
    return _querybuilder_new();
  }

  late final _querybuilder_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_QueryBuilder> Function()>>(
          'querybuilder_new');
  late final _querybuilder_new =
      _querybuilder_newPtr.asFunction<ffi.Pointer<G_QueryBuilder> Function()>();

  G_FFIResult_QueryBuilder querybuilder_import(
    ffi.Pointer<ffi.Char> data,
  ) {
    return _querybuilder_import(
      data,
    );
  }

  late final _querybuilder_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_QueryBuilder Function(
              ffi.Pointer<ffi.Char>)>>('querybuilder_import');
  late final _querybuilder_import = _querybuilder_importPtr
      .asFunction<G_FFIResult_QueryBuilder Function(ffi.Pointer<ffi.Char>)>();

  void querybuilder_where(
    ffi.Pointer<G_QueryBuilder> ctx,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _querybuilder_where(
      ctx,
      key,
      val,
    );
  }

  late final _querybuilder_wherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('querybuilder_where');
  late final _querybuilder_where = _querybuilder_wherePtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void querybuilder_filter(
    ffi.Pointer<G_QueryBuilder> ctx,
    int cmp,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _querybuilder_filter(
      ctx,
      cmp,
      key,
      val,
    );
  }

  late final _querybuilder_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('querybuilder_filter');
  late final _querybuilder_filter = _querybuilder_filterPtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void querybuilder_limit(
    ffi.Pointer<G_QueryBuilder> ctx,
    int limit,
  ) {
    return _querybuilder_limit(
      ctx,
      limit,
    );
  }

  late final _querybuilder_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>, uintptr_t)>>('querybuilder_limit');
  late final _querybuilder_limit = _querybuilder_limitPtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>, int)>();

  void ffivec_conversation_free(
    ffi.Pointer<G_FFIVec_Conversation> cvec,
  ) {
    return _ffivec_conversation_free(
      cvec,
    );
  }

  late final _ffivec_conversation_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Conversation>)>>('ffivec_conversation_free');
  late final _ffivec_conversation_free = _ffivec_conversation_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Conversation>)>();

  void conversation_free(
    ffi.Pointer<G_Conversation> ptr,
  ) {
    return _conversation_free(
      ptr,
    );
  }

  late final _conversation_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Conversation>)>>(
      'conversation_free');
  late final _conversation_free = _conversation_freePtr
      .asFunction<void Function(ffi.Pointer<G_Conversation>)>();

  void ffivec_message_free(
    ffi.Pointer<G_FFIVec_Message> cvec,
  ) {
    return _ffivec_message_free(
      cvec,
    );
  }

  late final _ffivec_message_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Message>)>>(
      'ffivec_message_free');
  late final _ffivec_message_free = _ffivec_message_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Message>)>();

  void message_free(
    ffi.Pointer<G_Message> ptr,
  ) {
    return _message_free(
      ptr,
    );
  }

  late final _message_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Message>)>>(
          'message_free');
  late final _message_free =
      _message_freePtr.asFunction<void Function(ffi.Pointer<G_Message>)>();

  void ffivec_reaction_free(
    ffi.Pointer<G_FFIVec_Reaction> cvec,
  ) {
    return _ffivec_reaction_free(
      cvec,
    );
  }

  late final _ffivec_reaction_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Reaction>)>>('ffivec_reaction_free');
  late final _ffivec_reaction_free = _ffivec_reaction_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Reaction>)>();

  void reaction_free(
    ffi.Pointer<G_Reaction> ptr,
  ) {
    return _reaction_free(
      ptr,
    );
  }

  late final _reaction_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Reaction>)>>(
          'reaction_free');
  late final _reaction_free =
      _reaction_freePtr.asFunction<void Function(ffi.Pointer<G_Reaction>)>();

  void raygunadapter_free(
    ffi.Pointer<G_RayGunAdapter> ptr,
  ) {
    return _raygunadapter_free(
      ptr,
    );
  }

  late final _raygunadapter_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_RayGunAdapter>)>>(
      'raygunadapter_free');
  late final _raygunadapter_free = _raygunadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_RayGunAdapter>)>();

  G_FFIResult_Conversation raygun_create_conversation(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<G_DID> did_key,
  ) {
    return _raygun_create_conversation(
      ctx,
      did_key,
    );
  }

  late final _raygun_create_conversationPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Conversation Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<G_DID>)>>('raygun_create_conversation');
  late final _raygun_create_conversation =
      _raygun_create_conversationPtr.asFunction<
          G_FFIResult_Conversation Function(
              ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_Conversation raygun_list_conversations(
    ffi.Pointer<G_RayGunAdapter> ctx,
  ) {
    return _raygun_list_conversations(
      ctx,
    );
  }

  late final _raygun_list_conversationsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_Conversation Function(
              ffi.Pointer<G_RayGunAdapter>)>>('raygun_list_conversations');
  late final _raygun_list_conversations =
      _raygun_list_conversationsPtr.asFunction<
          G_FFIResult_FFIVec_Conversation Function(
              ffi.Pointer<G_RayGunAdapter>)>();

  G_FFIResult_FFIVec_Message raygun_get_messages(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
  ) {
    return _raygun_get_messages(
      ctx,
      convo_id,
    );
  }

  late final _raygun_get_messagesPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_Message Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>)>>('raygun_get_messages');
  late final _raygun_get_messages = _raygun_get_messagesPtr.asFunction<
      G_FFIResult_FFIVec_Message Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_send(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Char>> messages,
    int lines,
  ) {
    return _raygun_send(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_sendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              uintptr_t)>>('raygun_send');
  late final _raygun_send = _raygun_sendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  G_FFIResult_Null raygun_delete(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
  ) {
    return _raygun_delete(
      ctx,
      convo_id,
      message_id,
    );
  }

  late final _raygun_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('raygun_delete');
  late final _raygun_delete = _raygun_deletePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_react(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
    ffi.Pointer<ffi.Char> emoji,
  ) {
    return _raygun_react(
      ctx,
      convo_id,
      message_id,
      state,
      emoji,
    );
  }

  late final _raygun_reactPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('raygun_react');
  late final _raygun_react = _raygun_reactPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_pin(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
  ) {
    return _raygun_pin(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_pinPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('raygun_pin');
  late final _raygun_pin = _raygun_pinPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  G_FFIResult_Null raygun_reply(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Char>> messages,
    int lines,
  ) {
    return _raygun_reply(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_replyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              uintptr_t)>>('raygun_reply');
  late final _raygun_reply = _raygun_replyPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int)>();

  G_FFIResult_Null raygun_ping(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
  ) {
    return _raygun_ping(
      ctx,
      convo_id,
    );
  }

  late final _raygun_pingPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>)>>('raygun_ping');
  late final _raygun_ping = _raygun_pingPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null raygun_embeds(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Char> convo_id,
    ffi.Pointer<ffi.Char> message_id,
    int state,
  ) {
    return _raygun_embeds(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_embedsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('raygun_embeds');
  late final _raygun_embeds = _raygun_embedsPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> message_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_id(
      ctx,
    );
  }

  late final _message_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_id');
  late final _message_id = _message_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_conversation_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_conversation_id(
      ctx,
    );
  }

  late final _message_conversation_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_conversation_id');
  late final _message_conversation_id = _message_conversation_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_DID> message_sender(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_sender(
      ctx,
    );
  }

  late final _message_senderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_Message>)>>('message_sender');
  late final _message_sender = _message_senderPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_date(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_date(
      ctx,
    );
  }

  late final _message_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_date');
  late final _message_date = _message_datePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  bool message_pinned(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_pinned(
      ctx,
    );
  }

  late final _message_pinnedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Message>)>>(
          'message_pinned');
  late final _message_pinned =
      _message_pinnedPtr.asFunction<bool Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_FFIVec_Reaction> message_reactions(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_reactions(
      ctx,
    );
  }

  late final _message_reactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Reaction> Function(
              ffi.Pointer<G_Message>)>>('message_reactions');
  late final _message_reactions = _message_reactionsPtr.asFunction<
      ffi.Pointer<G_FFIVec_Reaction> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> message_replied(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_replied(
      ctx,
    );
  }

  late final _message_repliedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Message>)>>('message_replied');
  late final _message_replied = _message_repliedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_FFIVec_String> message_lines(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_lines(
      ctx,
    );
  }

  late final _message_linesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_String> Function(
              ffi.Pointer<G_Message>)>>('message_lines');
  late final _message_lines = _message_linesPtr.asFunction<
      ffi.Pointer<G_FFIVec_String> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Char> reaction_emoji(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_emoji(
      ctx,
    );
  }

  late final _reaction_emojiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_emoji');
  late final _reaction_emoji = _reaction_emojiPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<G_FFIVec_DID> reaction_users(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_users(
      ctx,
    );
  }

  late final _reaction_usersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_DID> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_users');
  late final _reaction_users = _reaction_usersPtr.asFunction<
      ffi.Pointer<G_FFIVec_DID> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<ffi.Char> conversation_id(
    ffi.Pointer<G_Conversation> conversation,
  ) {
    return _conversation_id(
      conversation,
    );
  }

  late final _conversation_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Conversation>)>>('conversation_id');
  late final _conversation_id = _conversation_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Conversation>)>();

  ffi.Pointer<ffi.Char> conversation_name(
    ffi.Pointer<G_Conversation> conversation,
  ) {
    return _conversation_name(
      conversation,
    );
  }

  late final _conversation_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<G_Conversation>)>>('conversation_name');
  late final _conversation_name = _conversation_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<G_Conversation>)>();

  int conversation_type(
    ffi.Pointer<G_Conversation> conversation,
  ) {
    return _conversation_type(
      conversation,
    );
  }

  late final _conversation_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Conversation>)>>(
      'conversation_type');
  late final _conversation_type = _conversation_typePtr
      .asFunction<int Function(ffi.Pointer<G_Conversation>)>();

  ffi.Pointer<G_FFIVec_DID> conversation_recipients(
    ffi.Pointer<G_Conversation> conversation,
  ) {
    return _conversation_recipients(
      conversation,
    );
  }

  late final _conversation_recipientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_DID> Function(
              ffi.Pointer<G_Conversation>)>>('conversation_recipients');
  late final _conversation_recipients = _conversation_recipientsPtr.asFunction<
      ffi.Pointer<G_FFIVec_DID> Function(ffi.Pointer<G_Conversation>)>();

  void tesseract_free(
    ffi.Pointer<G_Tesseract> ptr,
  ) {
    return _tesseract_free(
      ptr,
    );
  }

  late final _tesseract_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_free');
  late final _tesseract_free =
      _tesseract_freePtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  ffi.Pointer<G_Tesseract> tesseract_new() {
    return _tesseract_new();
  }

  late final _tesseract_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Tesseract> Function()>>(
          'tesseract_new');
  late final _tesseract_new =
      _tesseract_newPtr.asFunction<ffi.Pointer<G_Tesseract> Function()>();

  G_FFIResult_Tesseract tesseract_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_from_file(
      file,
    );
  }

  late final _tesseract_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Tesseract Function(
              ffi.Pointer<ffi.Char>)>>('tesseract_from_file');
  late final _tesseract_from_file = _tesseract_from_filePtr
      .asFunction<G_FFIResult_Tesseract Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null tesseract_to_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_to_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_to_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_to_file');
  late final _tesseract_to_file = _tesseract_to_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_set_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _tesseract_set_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_set_file');
  late final _tesseract_set_file = _tesseract_set_filePtr.asFunction<
      void Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_set_autosave(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_set_autosave(
      tesseract,
    );
  }

  late final _tesseract_set_autosavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_set_autosave');
  late final _tesseract_set_autosave = _tesseract_set_autosavePtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_autosave_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_autosave_enabled(
      tesseract,
    );
  }

  late final _tesseract_autosave_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_autosave_enabled');
  late final _tesseract_autosave_enabled = _tesseract_autosave_enabledPtr
      .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_disable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_disable_key_check(
      tesseract,
    );
  }

  late final _tesseract_disable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_disable_key_check');
  late final _tesseract_disable_key_check = _tesseract_disable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_enable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_enable_key_check(
      tesseract,
    );
  }

  late final _tesseract_enable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_enable_key_check');
  late final _tesseract_enable_key_check = _tesseract_enable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_is_key_check_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_key_check_enabled(
      tesseract,
    );
  }

  late final _tesseract_is_key_check_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_key_check_enabled');
  late final _tesseract_is_key_check_enabled =
      _tesseract_is_key_check_enabledPtr
          .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_save(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_save(
      tesseract,
    );
  }

  late final _tesseract_savePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Tesseract>)>>('tesseract_save');
  late final _tesseract_save = _tesseract_savePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_set(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _tesseract_set(
      tesseract,
      key,
      val,
    );
  }

  late final _tesseract_setPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tesseract_set');
  late final _tesseract_set = _tesseract_setPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  G_FFIResult_String tesseract_retrieve(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_retrieve(
      tesseract,
      key,
    );
  }

  late final _tesseract_retrievePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_retrieve');
  late final _tesseract_retrieve = _tesseract_retrievePtr.asFunction<
      G_FFIResult_String Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  bool tesseract_exist(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_exist(
      tesseract,
      key,
    );
  }

  late final _tesseract_existPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_exist');
  late final _tesseract_exist = _tesseract_existPtr.asFunction<
      bool Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  G_FFIResult_Null tesseract_delete(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_delete(
      tesseract,
      key,
    );
  }

  late final _tesseract_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_delete');
  late final _tesseract_delete = _tesseract_deletePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_clear(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_clear(
      tesseract,
    );
  }

  late final _tesseract_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_clear');
  late final _tesseract_clear =
      _tesseract_clearPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  bool tesseract_is_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_unlock(
      tesseract,
    );
  }

  late final _tesseract_is_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_unlock');
  late final _tesseract_is_unlock = _tesseract_is_unlockPtr
      .asFunction<bool Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _tesseract_unlock(
      tesseract,
      key,
    );
  }

  late final _tesseract_unlockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Char>)>>('tesseract_unlock');
  late final _tesseract_unlock = _tesseract_unlockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Char>)>();

  void tesseract_lock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_lock(
      tesseract,
    );
  }

  late final _tesseract_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_lock');
  late final _tesseract_lock =
      _tesseract_lockPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void ffierror_free(
    ffi.Pointer<G_FFIError> ptr,
  ) {
    return _ffierror_free(
      ptr,
    );
  }

  late final _ffierror_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIError>)>>(
          'ffierror_free');
  late final _ffierror_free =
      _ffierror_freePtr.asFunction<void Function(ffi.Pointer<G_FFIError>)>();

  void ffivec_string_free(
    ffi.Pointer<G_FFIVec_String> cvec,
  ) {
    return _ffivec_string_free(
      cvec,
    );
  }

  late final _ffivec_string_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_String>)>>(
      'ffivec_string_free');
  late final _ffivec_string_free = _ffivec_string_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_String>)>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _mp_ipfs_config_from_file(
      file,
    );
  }

  late final _mp_ipfs_config_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_from_file');
  late final _mp_ipfs_config_from_file = _mp_ipfs_config_from_filePtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_from_str(
    ffi.Pointer<ffi.Char> config,
  ) {
    return _mp_ipfs_config_from_str(
      config,
    );
  }

  late final _mp_ipfs_config_from_strPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_from_str');
  late final _mp_ipfs_config_from_str = _mp_ipfs_config_from_strPtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_MpIpfsConfig> mp_ipfs_config_development() {
    return _mp_ipfs_config_development();
  }

  late final _mp_ipfs_config_developmentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_MpIpfsConfig> Function()>>(
          'mp_ipfs_config_development');
  late final _mp_ipfs_config_development = _mp_ipfs_config_developmentPtr
      .asFunction<ffi.Pointer<G_MpIpfsConfig> Function()>();

  ffi.Pointer<G_MpIpfsConfig> mp_ipfs_config_testing() {
    return _mp_ipfs_config_testing();
  }

  late final _mp_ipfs_config_testingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_MpIpfsConfig> Function()>>(
          'mp_ipfs_config_testing');
  late final _mp_ipfs_config_testing = _mp_ipfs_config_testingPtr
      .asFunction<ffi.Pointer<G_MpIpfsConfig> Function()>();

  G_FFIResult_MpIpfsConfig mp_ipfs_config_production(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mp_ipfs_config_production(
      path,
    );
  }

  late final _mp_ipfs_config_productionPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MpIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('mp_ipfs_config_production');
  late final _mp_ipfs_config_production = _mp_ipfs_config_productionPtr
      .asFunction<G_FFIResult_MpIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_temporary(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<G_MpIpfsConfig> config,
  ) {
    return _multipass_mp_ipfs_temporary(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_temporaryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>>('multipass_mp_ipfs_temporary');
  late final _multipass_mp_ipfs_temporary =
      _multipass_mp_ipfs_temporaryPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_persistent(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<G_MpIpfsConfig> config,
  ) {
    return _multipass_mp_ipfs_persistent(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_persistentPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>>('multipass_mp_ipfs_persistent');
  late final _multipass_mp_ipfs_persistent =
      _multipass_mp_ipfs_persistentPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<G_MpIpfsConfig>)>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_from_file(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _rg_ipfs_config_from_file(
      file,
    );
  }

  late final _rg_ipfs_config_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_from_file');
  late final _rg_ipfs_config_from_file = _rg_ipfs_config_from_filePtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_from_str(
    ffi.Pointer<ffi.Char> config,
  ) {
    return _rg_ipfs_config_from_str(
      config,
    );
  }

  late final _rg_ipfs_config_from_strPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_from_str');
  late final _rg_ipfs_config_from_str = _rg_ipfs_config_from_strPtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<G_RgIpfsConfig> rg_ipfs_config_development() {
    return _rg_ipfs_config_development();
  }

  late final _rg_ipfs_config_developmentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_RgIpfsConfig> Function()>>(
          'rg_ipfs_config_development');
  late final _rg_ipfs_config_development = _rg_ipfs_config_developmentPtr
      .asFunction<ffi.Pointer<G_RgIpfsConfig> Function()>();

  ffi.Pointer<G_RgIpfsConfig> rg_ipfs_config_testing() {
    return _rg_ipfs_config_testing();
  }

  late final _rg_ipfs_config_testingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_RgIpfsConfig> Function()>>(
          'rg_ipfs_config_testing');
  late final _rg_ipfs_config_testing = _rg_ipfs_config_testingPtr
      .asFunction<ffi.Pointer<G_RgIpfsConfig> Function()>();

  G_FFIResult_RgIpfsConfig rg_ipfs_config_production(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _rg_ipfs_config_production(
      path,
    );
  }

  late final _rg_ipfs_config_productionPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RgIpfsConfig Function(
              ffi.Pointer<ffi.Char>)>>('rg_ipfs_config_production');
  late final _rg_ipfs_config_production = _rg_ipfs_config_productionPtr
      .asFunction<G_FFIResult_RgIpfsConfig Function(ffi.Pointer<ffi.Char>)>();

  G_FFIResult_RayGunAdapter warp_rg_ipfs_temporary_new(
    ffi.Pointer<G_MultiPassAdapter> account,
    ffi.Pointer<G_PocketDimensionAdapter> cache,
    ffi.Pointer<G_RgIpfsConfig> config,
  ) {
    return _warp_rg_ipfs_temporary_new(
      account,
      cache,
      config,
    );
  }

  late final _warp_rg_ipfs_temporary_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>>('warp_rg_ipfs_temporary_new');
  late final _warp_rg_ipfs_temporary_new =
      _warp_rg_ipfs_temporary_newPtr.asFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>();

  G_FFIResult_RayGunAdapter warp_rg_ipfs_persistent_new(
    ffi.Pointer<G_MultiPassAdapter> account,
    ffi.Pointer<G_PocketDimensionAdapter> cache,
    ffi.Pointer<G_RgIpfsConfig> config,
  ) {
    return _warp_rg_ipfs_persistent_new(
      account,
      cache,
      config,
    );
  }

  late final _warp_rg_ipfs_persistent_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>>('warp_rg_ipfs_persistent_new');
  late final _warp_rg_ipfs_persistent_new =
      _warp_rg_ipfs_persistent_newPtr.asFunction<
          G_FFIResult_RayGunAdapter Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_RgIpfsConfig>)>();

  ffi.Pointer<ffi.Int> pocketdimension_memory_new() {
    return _pocketdimension_memory_new();
  }

  late final _pocketdimension_memory_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'pocketdimension_memory_new');
  late final _pocketdimension_memory_new = _pocketdimension_memory_newPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Int> pocketdimension_stretto_new() {
    return _pocketdimension_stretto_new();
  }

  late final _pocketdimension_stretto_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'pocketdimension_stretto_new');
  late final _pocketdimension_stretto_new = _pocketdimension_stretto_newPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  G_FFIResult_PocketDimensionAdapter pocket_dimension_flatfile_new(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> index_file,
  ) {
    return _pocket_dimension_flatfile_new(
      path,
      index_file,
    );
  }

  late final _pocket_dimension_flatfile_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_PocketDimensionAdapter Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pocket_dimension_flatfile_new');
  late final _pocket_dimension_flatfile_new =
      _pocket_dimension_flatfile_newPtr.asFunction<
          G_FFIResult_PocketDimensionAdapter Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> constellation_fs_storj_new(
    ffi.Pointer<ffi.Int> pd,
    ffi.Pointer<ffi.Char> akey,
    ffi.Pointer<ffi.Char> skey,
  ) {
    return _constellation_fs_storj_new(
      pd,
      akey,
      skey,
    );
  }

  late final _constellation_fs_storj_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('constellation_fs_storj_new');
  late final _constellation_fs_storj_new =
      _constellation_fs_storj_newPtr.asFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> constellation_fs_memory_create_context() {
    return _constellation_fs_memory_create_context();
  }

  late final _constellation_fs_memory_create_contextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'constellation_fs_memory_create_context');
  late final _constellation_fs_memory_create_context =
      _constellation_fs_memory_create_contextPtr
          .asFunction<ffi.Pointer<ffi.Int> Function()>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

class G___darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<G___darwin_pthread_handler_rec> __next;
}

class G__opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class G__opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<G___darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

/// [XSI] The type idtype_t shall be defined as an enumeration type whose
/// possible values shall include at least P_ALL, P_PID, and P_PGID.
abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class G___darwin_arm_exception_state extends ffi.Struct {
  /// number of arm exception taken
  @__uint32_t()
  external int __exception;

  /// Fault status
  @__uint32_t()
  external int __fsr;

  /// Virtual Fault Address
  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;

class G___darwin_arm_exception_state64 extends ffi.Struct {
  /// Virtual Fault Address
  @__uint64_t()
  external int __far;

  /// Exception syndrome
  @__uint32_t()
  external int __esr;

  /// number of arm exception taken
  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;

class G___darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  /// Stack pointer r13
  @__uint32_t()
  external int __sp;

  /// Link register r14
  @__uint32_t()
  external int __lr;

  /// Program counter r15
  @__uint32_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;
}

class G___darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  /// Frame pointer x29
  @__uint64_t()
  external int __fp;

  /// Link register x30
  @__uint64_t()
  external int __lr;

  /// Stack pointer x31
  @__uint64_t()
  external int __sp;

  /// Program counter
  @__uint64_t()
  external int __pc;

  /// Current program status register
  @__uint32_t()
  external int __cpsr;

  /// Same size for 32-bit or 64-bit clients
  @__uint32_t()
  external int __pad;
}

class G___darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

class G___darwin_arm_neon_state64 extends ffi.Opaque {}

class G___darwin_arm_neon_state extends ffi.Opaque {}

class G___arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

class G___arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

class G___darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

class G___darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  /// Bit 0 is SS (Hardware Single Step)
  @__uint64_t()
  external int __mdscr_el1;
}

class G___darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

class G___darwin_mcontext32 extends ffi.Struct {
  external G___darwin_arm_exception_state __es;

  external G___darwin_arm_thread_state __ss;

  external G___darwin_arm_vfp_state __fs;
}

class G___darwin_mcontext64 extends ffi.Opaque {}

class G___darwin_sigaltstack extends ffi.Struct {
  /// signal stack base
  external ffi.Pointer<ffi.Void> ss_sp;

  /// signal stack length
  @__darwin_size_t()
  external int ss_size;

  /// SA_DISABLE and/or SA_ONSTACK
  @ffi.Int()
  external int ss_flags;
}

typedef __darwin_size_t = ffi.UnsignedLong;

class G___darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  /// signal mask used by this context
  @__darwin_sigset_t()
  external int uc_sigmask;

  /// stack used by this context
  external G___darwin_sigaltstack uc_stack;

  /// pointer to resuming context
  external ffi.Pointer<G___darwin_ucontext> uc_link;

  /// size of the machine context passed in
  @__darwin_size_t()
  external int uc_mcsize;

  /// pointer to machine specific context
  external ffi.Pointer<G___darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

class sigval extends ffi.Union {
  /// Members as suggested by Annex C of POSIX 1003.1b.
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class G_sigevent extends ffi.Struct {
  /// Notification type
  @ffi.Int()
  external int sigev_notify;

  /// Signal number
  @ffi.Int()
  external int sigev_signo;

  /// Signal value
  external sigval sigev_value;

  /// Notification function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  /// Notification attributes
  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = G__opaque_pthread_attr_t;

class G___siginfo extends ffi.Struct {
  /// signal number
  @ffi.Int()
  external int si_signo;

  /// errno association
  @ffi.Int()
  external int si_errno;

  /// signal code
  @ffi.Int()
  external int si_code;

  /// sending process
  @pid_t()
  external int si_pid;

  /// sender's ruid
  @uid_t()
  external int si_uid;

  /// exit value
  @ffi.Int()
  external int si_status;

  /// faulting instruction
  external ffi.Pointer<ffi.Void> si_addr;

  /// signal value
  external sigval si_value;

  /// band event for SIGPOLL
  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

/// union for signal handlers
class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<G___siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

/// Signal vector template for Kernel user boundary
class G___sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = G___siginfo;
typedef sigset_t = __darwin_sigset_t;

/// Signal vector "template" used in sigaction call.
class G_sigaction extends ffi.Struct {
  /// signal handler
  external __sigaction_u __sigaction_u1;

  /// signal mask to apply
  @sigset_t()
  external int sa_mask;

  /// see signal options below
  @ffi.Int()
  external int sa_flags;
}

/// 4.3 compatibility:
/// Signal vector "template" used in sigvec call.
class G_sigvec extends ffi.Struct {
  /// signal handler
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  /// signal mask to apply
  @ffi.Int()
  external int sv_mask;

  /// see signal options below
  @ffi.Int()
  external int sv_flags;
}

/// Structure used in sigstack call.
class G_sigstack extends ffi.Struct {
  /// signal stack pointer
  external ffi.Pointer<ffi.Char> ss_sp;

  /// current status
  @ffi.Int()
  external int ss_onstack;
}

class G_timeval extends ffi.Struct {
  /// seconds
  @__darwin_time_t()
  external int tv_sec;

  /// and microseconds
  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef __darwin_suseconds_t = __int32_t;

/// A structure representing an accounting of resource utilization.  The
/// address of an instance of this structure is the second parameter to
/// getrusage().
///
/// Note: All values other than ru_utime and ru_stime are implementaiton
/// defined and subject to change in a future release.  Their use
/// is discouraged for standards compliant programs.
class G_rusage extends ffi.Struct {
  /// user time used (PL)
  external G_timeval ru_utime;

  /// system time used (PL)
  external G_timeval ru_stime;

  /// max resident set size (PL)
  @ffi.Long()
  external int ru_maxrss;

  /// integral shared memory size (NU)
  @ffi.Long()
  external int ru_ixrss;

  /// integral unshared data (NU)
  @ffi.Long()
  external int ru_idrss;

  /// integral unshared stack (NU)
  @ffi.Long()
  external int ru_isrss;

  /// page reclaims (NU)
  @ffi.Long()
  external int ru_minflt;

  /// page faults (NU)
  @ffi.Long()
  external int ru_majflt;

  /// swaps (NU)
  @ffi.Long()
  external int ru_nswap;

  /// block input operations (atomic)
  @ffi.Long()
  external int ru_inblock;

  /// block output operations (atomic)
  @ffi.Long()
  external int ru_oublock;

  /// messages sent (atomic)
  @ffi.Long()
  external int ru_msgsnd;

  /// messages received (atomic)
  @ffi.Long()
  external int ru_msgrcv;

  /// signals received (atomic)
  @ffi.Long()
  external int ru_nsignals;

  /// voluntary context switches (atomic)
  @ffi.Long()
  external int ru_nvcsw;

  /// involuntary "
  @ffi.Long()
  external int ru_nivcsw;
}

class G_rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

class G_rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

class G_rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

class G_rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

class G_rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

class G_rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

/// A structure representing a resource limit.  The address of an instance
/// of this structure is the second parameter to getrlimit()/setrlimit().
class G_rlimit extends ffi.Struct {
  /// current (soft) limit
  @rlim_t()
  external int rlim_cur;

  /// maximum value for rlim_cur
  @rlim_t()
  external int rlim_max;
}

/// Resource limit type (low 63 bits, excluding the sign bit)
typedef rlim_t = __uint64_t;

class G_proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

/// Functions for byte reversed loads.
@ffi.Packed(1)
class G__OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
class G__OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
class G__OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

/// Deprecated:
/// Structure of the information in the status word returned by wait4.
/// If w_stopval==_WSTOPPED, then the second structure describes
/// the information returned, else the first.
class wait extends ffi.Opaque {}

class G_div_t extends ffi.Struct {
  /// quotient
  @ffi.Int()
  external int quot;

  /// remainder
  @ffi.Int()
  external int rem;
}

class G_ldiv_t extends ffi.Struct {
  /// quotient
  @ffi.Long()
  external int quot;

  /// remainder
  @ffi.Long()
  external int rem;
}

class G_lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;

abstract class CipherType {
  /// AES256-GCM
  static const int Aes256Gcm = 0;

  /// Xchacha20poly1305
  static const int Xchacha20poly1305 = 1;
}

abstract class Comparator {
  static const int Eq = 0;
  static const int Gt = 1;
  static const int Gte = 2;
  static const int Lt = 3;
  static const int Lte = 4;
  static const int Ne = 5;
}

/// Types that would be used for import and export
/// Currently only support `Json`, `Yaml`, and `Toml`.
/// Implementation can override these functions for their own
/// types to be use for import and export.
abstract class ConstellationDataType {
  static const int Json = 0;
  static const int Yaml = 1;
  static const int Toml = 2;
}

abstract class ConversationType {
  static const int Direct = 0;
  static const int Group = 1;
}

abstract class DataType {
  static const int Messaging = 0;
  static const int FileSystem = 1;
  static const int Accounts = 2;
  static const int Cache = 3;
  static const int Http = 4;
  static const int DataExport = 5;
  static const int Unknown = 6;
}

abstract class EmbedState {
  static const int Enabled = 0;
  static const int Disable = 1;
}

abstract class FriendRequestStatus {
  static const int Uninitialized = 0;
  static const int Pending = 1;
  static const int Accepted = 2;
  static const int Denied = 3;
  static const int FriendRemoved = 4;
  static const int RequestRemoved = 5;
}

abstract class PhraseType {
  static const int Standard = 0;
  static const int Secure = 1;
}

abstract class PinState {
  static const int Pin = 0;
  static const int Unpin = 1;
}

abstract class ReactionState {
  static const int Add = 0;
  static const int Remove = 1;
}

class G_Badge extends ffi.Opaque {}

class G_Cipher extends ffi.Opaque {}

class G_ConstellationAdapter extends ffi.Opaque {}

class G_Conversation extends ffi.Opaque {}

class G_DID extends ffi.Opaque {}

class G_Data extends ffi.Opaque {}

class G_Directory extends ffi.Opaque {}

class G_File extends ffi.Opaque {}

class G_FriendRequest extends ffi.Opaque {}

class G_Graphics extends ffi.Opaque {}

class G_Identifier extends ffi.Opaque {}

class G_Identity extends ffi.Opaque {}

class G_IdentityUpdate extends ffi.Opaque {}

class G_Item extends ffi.Opaque {}

class G_Message extends ffi.Opaque {}

class G_MultiPassAdapter extends ffi.Opaque {}

class G_PocketDimensionAdapter extends ffi.Opaque {}

class G_QueryBuilder extends ffi.Opaque {}

class G_RayGunAdapter extends ffi.Opaque {}

class G_Reaction extends ffi.Opaque {}

class G_Role extends ffi.Opaque {}

class G_Tesseract extends ffi.Opaque {}

class G_FFIVec_Directory extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Directory>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

typedef uintptr_t = ffi.UnsignedLong;

class G_FFIError extends ffi.Struct {
  external ffi.Pointer<ffi.Char> error_type;

  external ffi.Pointer<ffi.Char> error_message;
}

/// Used when a function does not return anything when successful
class G_FFIResult_Null extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_usize extends ffi.Struct {
  external ffi.Pointer<uintptr_t> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_Item extends ffi.Struct {
  external ffi.Pointer<G_Item> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Item extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Item>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_File extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_File>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Directory extends ffi.Struct {
  external ffi.Pointer<G_Directory> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_File extends ffi.Struct {
  external ffi.Pointer<G_File> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_u8> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_String extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_DID>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_DID extends ffi.Struct {
  external ffi.Pointer<G_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Data extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Data>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Data extends ffi.Struct {
  external ffi.Pointer<G_Data> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Role extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Role>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Badge extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Badge>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Identity extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Identity>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_FriendRequest>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_Identity extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_Identity> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_Identity extends ffi.Struct {
  external ffi.Pointer<G_Identity> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_FriendRequest> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_QueryBuilder extends ffi.Struct {
  external ffi.Pointer<G_QueryBuilder> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Conversation extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Conversation>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Message>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Reaction extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Reaction>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Conversation extends ffi.Struct {
  external ffi.Pointer<G_Conversation> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_Conversation extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_Conversation> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_Message> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Tesseract extends ffi.Struct {
  external ffi.Pointer<G_Tesseract> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_MpIpfsConfig extends ffi.Opaque {}

class G_FFIResult_MpIpfsConfig extends ffi.Struct {
  external ffi.Pointer<G_MpIpfsConfig> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_MultiPassAdapter extends ffi.Struct {
  external ffi.Pointer<G_MultiPassAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_RgIpfsConfig extends ffi.Opaque {}

class G_FFIResult_RgIpfsConfig extends ffi.Struct {
  external ffi.Pointer<G_RgIpfsConfig> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_RayGunAdapter extends ffi.Struct {
  external ffi.Pointer<G_RayGunAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

class G_FFIResult_PocketDimensionAdapter extends ffi.Struct {
  external ffi.Pointer<G_PocketDimensionAdapter> data;

  external ffi.Pointer<ffi.Int> error;
}

const int __GNUC_VA_LIST = 1;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int SHORT_ID_SIZE = 8;
