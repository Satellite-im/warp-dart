// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/warp_dart.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///

class WarpDartBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WarpDartBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WarpDartBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int select(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<G_fd_set>, ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>, ffi.Pointer<G_timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<G_fd_set> __readfds,
    ffi.Pointer<G_fd_set> __writefds,
    ffi.Pointer<G_fd_set> __exceptfds,
    ffi.Pointer<G_timespec> __timeout,
    ffi.Pointer<G___sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_fd_set>,
              ffi.Pointer<G_timespec>,
              ffi.Pointer<G___sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_fd_set>,
          ffi.Pointer<G_timespec>,
          ffi.Pointer<G___sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int random_r(
    ffi.Pointer<G_random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<G_random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<G_random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<G_random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<G_random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<G_random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<G_random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<G_random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<G_random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int drand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int mrand48_r(
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<G_drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<G_drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<G_drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<G_drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int64, ffi.Pointer<G_drand48_data>)>>('srand48_r');
  late final _srand48_r = _srand48_rPtr
      .asFunction<int Function(int, ffi.Pointer<G_drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<G_drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<G_drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<G_drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<G_drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<G_drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int32, ffi.Int32)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int32,
              ffi.Int32)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int32, ffi.Int32)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  G_div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<G_div_t Function(ffi.Int32, ffi.Int32)>>(
          'div');
  late final _div = _divPtr.asFunction<G_div_t Function(int, int)>();

  G_ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<G_ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<G_ldiv_t Function(int, int)>();

  G_lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<G_lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<G_lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int32> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  void constellationadapter_free(
    ffi.Pointer<G_ConstellationAdapter> ptr,
  ) {
    return _constellationadapter_free(
      ptr,
    );
  }

  late final _constellationadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellationadapter_free');
  late final _constellationadapter_free = _constellationadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_ConstellationAdapter>)>();

  void ffivec_directory_free(
    ffi.Pointer<G_FFIVec_Directory> cvec,
  ) {
    return _ffivec_directory_free(
      cvec,
    );
  }

  late final _ffivec_directory_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Directory>)>>('ffivec_directory_free');
  late final _ffivec_directory_free = _ffivec_directory_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Directory>)>();

  void directory_free(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_free(
      ptr,
    );
  }

  late final _directory_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Directory>)>>(
          'directory_free');
  late final _directory_free =
      _directory_freePtr.asFunction<void Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Directory> directory_new(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _directory_new(
      name,
    );
  }

  late final _directory_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<ffi.Int8>)>>('directory_new');
  late final _directory_new = _directory_newPtr
      .asFunction<ffi.Pointer<G_Directory> Function(ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null directory_add_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Item> item,
  ) {
    return _directory_add_item(
      dir_ptr,
      item,
    );
  }

  late final _directory_add_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Item>)>>('directory_add_item');
  late final _directory_add_item = _directory_add_itemPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Item>)>();

  G_FFIResult_Null directory_add_directory(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_add_directory(
      dir_ptr,
      directory,
    );
  }

  late final _directory_add_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_Directory>)>>('directory_add_directory');
  late final _directory_add_directory = _directory_add_directoryPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_Directory>)>();

  G_FFIResult_Null directory_add_file(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<G_File> file,
  ) {
    return _directory_add_file(
      dir_ptr,
      file,
    );
  }

  late final _directory_add_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<G_File>)>>('directory_add_file');
  late final _directory_add_file = _directory_add_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<G_File>)>();

  G_FFIResult_usize directory_get_item_index(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _directory_get_item_index(
      dir_ptr,
      name,
    );
  }

  late final _directory_get_item_indexPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_usize Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>)>>('directory_get_item_index');
  late final _directory_get_item_index =
      _directory_get_item_indexPtr.asFunction<
          G_FFIResult_usize Function(
              ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null directory_rename_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Int8> current_name,
    ffi.Pointer<ffi.Int8> new_name,
  ) {
    return _directory_rename_item(
      dir_ptr,
      current_name,
      new_name,
    );
  }

  late final _directory_rename_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('directory_rename_item');
  late final _directory_rename_item = _directory_rename_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Item directory_remove_item(
    ffi.Pointer<G_Directory> dir_ptr,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _directory_remove_item(
      dir_ptr,
      name,
    );
  }

  late final _directory_remove_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>)>>('directory_remove_item');
  late final _directory_remove_item = _directory_remove_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>)>();

  int directory_has_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Int8> item,
  ) {
    return _directory_has_item(
      ptr,
      item,
    );
  }

  late final _directory_has_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>)>>('directory_has_item');
  late final _directory_has_item = _directory_has_itemPtr.asFunction<
      int Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_FFIVec_Item> directory_get_items(
    ffi.Pointer<G_Directory> ptr,
  ) {
    return _directory_get_items(
      ptr,
    );
  }

  late final _directory_get_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_get_items');
  late final _directory_get_items = _directory_get_itemsPtr.asFunction<
      ffi.Pointer<G_FFIVec_Item> Function(ffi.Pointer<G_Directory>)>();

  G_FFIResult_Item directory_get_item(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Int8> item,
  ) {
    return _directory_get_item(
      ptr,
      item,
    );
  }

  late final _directory_get_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>)>>('directory_get_item');
  late final _directory_get_item = _directory_get_itemPtr.asFunction<
      G_FFIResult_Item Function(
          ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Item directory_remove_item_from_path(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Int8> directory,
    ffi.Pointer<ffi.Int8> item,
  ) {
    return _directory_remove_item_from_path(
      ptr,
      directory,
      item,
    );
  }

  late final _directory_remove_item_from_pathPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Item Function(
              ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('directory_remove_item_from_path');
  late final _directory_remove_item_from_path =
      _directory_remove_item_from_pathPtr.asFunction<
          G_FFIResult_Item Function(ffi.Pointer<G_Directory>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int directory_move_item_to(
    ffi.Pointer<G_Directory> ptr,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> dst,
  ) {
    return _directory_move_item_to(
      ptr,
      src,
      dst,
    );
  }

  late final _directory_move_item_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('directory_move_item_to');
  late final _directory_move_item_to = _directory_move_item_toPtr.asFunction<
      int Function(ffi.Pointer<G_Directory>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> directory_id(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_id(
      dir,
    );
  }

  late final _directory_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Directory>)>>('directory_id');
  late final _directory_id = _directory_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Int8> directory_name(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_name(
      dir,
    );
  }

  late final _directory_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Directory>)>>('directory_name');
  late final _directory_name = _directory_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<ffi.Int8> directory_description(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_description(
      dir,
    );
  }

  late final _directory_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Directory>)>>('directory_description');
  late final _directory_description = _directory_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Directory>)>();

  int directory_size(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_size(
      dir,
    );
  }

  late final _directory_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_size');
  late final _directory_size =
      _directory_sizePtr.asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_creation(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_creation(
      dir,
    );
  }

  late final _directory_creationPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_creation');
  late final _directory_creation = _directory_creationPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  int directory_modified(
    ffi.Pointer<G_Directory> dir,
  ) {
    return _directory_modified(
      dir,
    );
  }

  late final _directory_modifiedPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Directory>)>>(
          'directory_modified');
  late final _directory_modified = _directory_modifiedPtr
      .asFunction<int Function(ffi.Pointer<G_Directory>)>();

  void ffivec_file_free(
    ffi.Pointer<G_FFIVec_File> cvec,
  ) {
    return _ffivec_file_free(
      cvec,
    );
  }

  late final _ffivec_file_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_File>)>>(
      'ffivec_file_free');
  late final _ffivec_file_free = _ffivec_file_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_File>)>();

  void file_free(
    ffi.Pointer<G_File> ptr,
  ) {
    return _file_free(
      ptr,
    );
  }

  late final _file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_File>)>>(
          'file_free');
  late final _file_free =
      _file_freePtr.asFunction<void Function(ffi.Pointer<G_File>)>();

  ffi.Pointer<G_File> file_new(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _file_new(
      name,
    );
  }

  late final _file_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Int8>)>>('file_new');
  late final _file_new = _file_newPtr
      .asFunction<ffi.Pointer<G_File> Function(ffi.Pointer<ffi.Int8>)>();

  void ffivec_item_free(
    ffi.Pointer<G_FFIVec_Item> cvec,
  ) {
    return _ffivec_item_free(
      cvec,
    );
  }

  late final _ffivec_item_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Item>)>>(
      'ffivec_item_free');
  late final _ffivec_item_free = _ffivec_item_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Item>)>();

  void item_free(
    ffi.Pointer<G_Item> ptr,
  ) {
    return _item_free(
      ptr,
    );
  }

  late final _item_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Item>)>>(
          'item_free');
  late final _item_free =
      _item_freePtr.asFunction<void Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<G_Item> directory_into_item(
    ffi.Pointer<G_Directory> directory,
  ) {
    return _directory_into_item(
      directory,
    );
  }

  late final _directory_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(
              ffi.Pointer<G_Directory>)>>('directory_into_item');
  late final _directory_into_item = _directory_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_Directory>)>();

  ffi.Pointer<G_Item> file_into_item(
    ffi.Pointer<G_File> file,
  ) {
    return _file_into_item(
      file,
    );
  }

  late final _file_into_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>>('file_into_item');
  late final _file_into_item = _file_into_itemPtr
      .asFunction<ffi.Pointer<G_Item> Function(ffi.Pointer<G_File>)>();

  G_FFIResult_Directory item_into_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_directory(
      item,
    );
  }

  late final _item_into_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_Item>)>>('item_into_directory');
  late final _item_into_directory = _item_into_directoryPtr
      .asFunction<G_FFIResult_Directory Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_File item_into_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_into_file(
      item,
    );
  }

  late final _item_into_filePtr = _lookup<
          ffi.NativeFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>>(
      'item_into_file');
  late final _item_into_file = _item_into_filePtr
      .asFunction<G_FFIResult_File Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Int8> item_id(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_id(
      item,
    );
  }

  late final _item_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>>('item_id');
  late final _item_id = _item_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Int8> item_creation(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_creation(
      item,
    );
  }

  late final _item_creationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Item>)>>('item_creation');
  late final _item_creation = _item_creationPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Int8> item_modified(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_modified(
      item,
    );
  }

  late final _item_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Item>)>>('item_modified');
  late final _item_modified = _item_modifiedPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Int8> item_name(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_name(
      item,
    );
  }

  late final _item_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>>('item_name');
  late final _item_name = _item_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>();

  ffi.Pointer<ffi.Int8> item_description(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_description(
      item,
    );
  }

  late final _item_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Item>)>>('item_description');
  late final _item_description = _item_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Item>)>();

  int item_size(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_size(
      item,
    );
  }

  late final _item_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Item>)>>(
          'item_size');
  late final _item_size =
      _item_sizePtr.asFunction<int Function(ffi.Pointer<G_Item>)>();

  G_FFIResult_Null item_rename(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _item_rename(
      item,
      name,
    );
  }

  late final _item_renamePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Pointer<ffi.Int8>)>>('item_rename');
  late final _item_rename = _item_renamePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Int8>)>();

  int item_is_directory(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_directory(
      item,
    );
  }

  late final _item_is_directoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Item>)>>(
          'item_is_directory');
  late final _item_is_directory =
      _item_is_directoryPtr.asFunction<int Function(ffi.Pointer<G_Item>)>();

  int item_is_file(
    ffi.Pointer<G_Item> item,
  ) {
    return _item_is_file(
      item,
    );
  }

  late final _item_is_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Item>)>>(
          'item_is_file');
  late final _item_is_file =
      _item_is_filePtr.asFunction<int Function(ffi.Pointer<G_Item>)>();

  int item_set_description(
    ffi.Pointer<G_Item> item,
    ffi.Pointer<ffi.Int8> desc,
  ) {
    return _item_set_description(
      item,
      desc,
    );
  }

  late final _item_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_Item>,
              ffi.Pointer<ffi.Int8>)>>('item_set_description');
  late final _item_set_description = _item_set_descriptionPtr
      .asFunction<int Function(ffi.Pointer<G_Item>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null item_set_size(
    ffi.Pointer<G_Item> item,
    int size,
  ) {
    return _item_set_size(
      item,
      size,
    );
  }

  late final _item_set_sizePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Item>, ffi.Int64)>>('item_set_size');
  late final _item_set_size = _item_set_sizePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Item>, int)>();

  G_FFIResult_Null constellation_select(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _constellation_select(
      ctx,
      name,
    );
  }

  late final _constellation_selectPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>)>>('constellation_select');
  late final _constellation_select = _constellation_selectPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null constellation_go_back(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_go_back(
      ctx,
    );
  }

  late final _constellation_go_backPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>)>>('constellation_go_back');
  late final _constellation_go_back = _constellation_go_backPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Directory constellation_open_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _constellation_open_directory(
      ctx,
      name,
    );
  }

  late final _constellation_open_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Directory Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>)>>('constellation_open_directory');
  late final _constellation_open_directory =
      _constellation_open_directoryPtr.asFunction<
          G_FFIResult_Directory Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_Directory> constellation_root_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_root_directory(
      ctx,
    );
  }

  late final _constellation_root_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_root_directory');
  late final _constellation_root_directory =
      _constellation_root_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory(
      ctx,
    );
  }

  late final _constellation_current_directoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory');
  late final _constellation_current_directory =
      _constellation_current_directoryPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  ffi.Pointer<G_Directory> constellation_current_directory_mut(
    ffi.Pointer<G_ConstellationAdapter> ctx,
  ) {
    return _constellation_current_directory_mut(
      ctx,
    );
  }

  late final _constellation_current_directory_mutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_Directory> Function(
                  ffi.Pointer<G_ConstellationAdapter>)>>(
      'constellation_current_directory_mut');
  late final _constellation_current_directory_mut =
      _constellation_current_directory_mutPtr.asFunction<
          ffi.Pointer<G_Directory> Function(
              ffi.Pointer<G_ConstellationAdapter>)>();

  G_FFIResult_Null constellation_put(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
    ffi.Pointer<ffi.Int8> local,
  ) {
    return _constellation_put(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_putPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('constellation_put');
  late final _constellation_put = _constellation_putPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null constellation_put_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _constellation_put_buffer(
      ctx,
      remote,
      buffer,
      buffer_size,
    );
  }

  late final _constellation_put_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('constellation_put_buffer');
  late final _constellation_put_buffer =
      _constellation_put_bufferPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_Null constellation_get(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
    ffi.Pointer<ffi.Int8> local,
  ) {
    return _constellation_get(
      ctx,
      remote,
      local,
    );
  }

  late final _constellation_getPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('constellation_get');
  late final _constellation_get = _constellation_getPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_FFIVec_u8 constellation_get_buffer(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
  ) {
    return _constellation_get_buffer(
      ctx,
      remote,
    );
  }

  late final _constellation_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>)>>('constellation_get_buffer');
  late final _constellation_get_buffer =
      _constellation_get_bufferPtr.asFunction<
          G_FFIResult_FFIVec_u8 Function(
              ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null constellation_remove(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
    int recursive,
  ) {
    return _constellation_remove(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_removePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('constellation_remove');
  late final _constellation_remove = _constellation_removePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Int8>, int)>();

  G_FFIResult_Null constellation_create_directory(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> remote,
    int recursive,
  ) {
    return _constellation_create_directory(
      ctx,
      remote,
      recursive,
    );
  }

  late final _constellation_create_directoryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('constellation_create_directory');
  late final _constellation_create_directory =
      _constellation_create_directoryPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>, int)>();

  G_FFIResult_Null constellation_move_item(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> dst,
  ) {
    return _constellation_move_item(
      ctx,
      src,
      dst,
    );
  }

  late final _constellation_move_itemPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('constellation_move_item');
  late final _constellation_move_item = _constellation_move_itemPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null constellation_sync_ref(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    ffi.Pointer<ffi.Int8> src,
  ) {
    return _constellation_sync_ref(
      ctx,
      src,
    );
  }

  late final _constellation_sync_refPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Pointer<ffi.Int8>)>>('constellation_sync_ref');
  late final _constellation_sync_ref = _constellation_sync_refPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_String constellation_export(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
  ) {
    return _constellation_export(
      ctx,
      datatype,
    );
  }

  late final _constellation_exportPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32)>>('constellation_export');
  late final _constellation_export = _constellation_exportPtr.asFunction<
      G_FFIResult_String Function(ffi.Pointer<G_ConstellationAdapter>, int)>();

  G_FFIResult_Null constellation_import(
    ffi.Pointer<G_ConstellationAdapter> ctx,
    int datatype,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _constellation_import(
      ctx,
      datatype,
      data,
    );
  }

  late final _constellation_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_ConstellationAdapter>,
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('constellation_import');
  late final _constellation_import = _constellation_importPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_ConstellationAdapter>, int, ffi.Pointer<ffi.Int8>)>();

  void ffivec_did_free(
    ffi.Pointer<G_FFIVec_DID> cvec,
  ) {
    return _ffivec_did_free(
      cvec,
    );
  }

  late final _ffivec_did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_DID>)>>(
          'ffivec_did_free');
  late final _ffivec_did_free = _ffivec_did_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_DID>)>();

  void did_free(
    ffi.Pointer<G_DID> ptr,
  ) {
    return _did_free(
      ptr,
    );
  }

  late final _did_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_DID>)>>(
          'did_free');
  late final _did_free =
      _did_freePtr.asFunction<void Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Cipher> cipher_new() {
    return _cipher_new();
  }

  late final _cipher_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Cipher> Function()>>(
          'cipher_new');
  late final _cipher_new =
      _cipher_newPtr.asFunction<ffi.Pointer<G_Cipher> Function()>();

  ffi.Pointer<G_Cipher> cipher_from_bytes(
    ffi.Pointer<ffi.Uint8> key,
    int key_size,
  ) {
    return _cipher_from_bytes(
      key,
      key_size,
    );
  }

  late final _cipher_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Cipher> Function(
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_from_bytes');
  late final _cipher_from_bytes = _cipher_from_bytesPtr.asFunction<
      ffi.Pointer<G_Cipher> Function(ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_encrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_encrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_encrypt');
  late final _cipher_self_encrypt = _cipher_self_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_self_decrypt(
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_self_decrypt(
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_self_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Int32, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('cipher_self_decrypt');
  late final _cipher_self_decrypt = _cipher_self_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_encrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_encrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_encryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_encrypt');
  late final _cipher_encrypt = _cipher_encryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIResult_FFIVec_u8 cipher_decrypt(
    ffi.Pointer<G_Cipher> cipher,
    int cipher_type,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return _cipher_decrypt(
      cipher,
      cipher_type,
      data,
      data_size,
    );
  }

  late final _cipher_decryptPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_u8 Function(ffi.Pointer<G_Cipher>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('cipher_decrypt');
  late final _cipher_decrypt = _cipher_decryptPtr.asFunction<
      G_FFIResult_FFIVec_u8 Function(
          ffi.Pointer<G_Cipher>, int, ffi.Pointer<ffi.Uint8>, int)>();

  void x25519secret_free(
    ffi.Pointer<G_X25519Secret> ptr,
  ) {
    return _x25519secret_free(
      ptr,
    );
  }

  late final _x25519secret_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_X25519Secret>)>>(
      'x25519secret_free');
  late final _x25519secret_free = _x25519secret_freePtr
      .asFunction<void Function(ffi.Pointer<G_X25519Secret>)>();

  void x25519publickey_free(
    ffi.Pointer<G_X25519PublicKey> ptr,
  ) {
    return _x25519publickey_free(
      ptr,
    );
  }

  late final _x25519publickey_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_X25519PublicKey>)>>('x25519publickey_free');
  late final _x25519publickey_free = _x25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_X25519PublicKey>)>();

  G_FFIVec_u8 crypto_sha1_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha1_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha1_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha1_hash');
  late final _crypto_sha1_hash = _crypto_sha1_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_sha256_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_sha256_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_sha256_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_sha256_hash');
  late final _crypto_sha256_hash = _crypto_sha256_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  G_FFIVec_u8 crypto_blake2s_hash(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_size,
  ) {
    return _crypto_blake2s_hash(
      data,
      data_size,
      salt,
      salt_size,
    );
  }

  late final _crypto_blake2s_hashPtr = _lookup<
      ffi.NativeFunction<
          G_FFIVec_u8 Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('crypto_blake2s_hash');
  late final _crypto_blake2s_hash = _crypto_blake2s_hashPtr.asFunction<
      G_FFIVec_u8 Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Int8> generate_mnemonic_phrase(
    int phrase_type,
  ) {
    return _generate_mnemonic_phrase(
      phrase_type,
    );
  }

  late final _generate_mnemonic_phrasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'generate_mnemonic_phrase');
  late final _generate_mnemonic_phrase = _generate_mnemonic_phrasePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  G_FFIResult_DID did_from_mnemonic(
    ffi.Pointer<ffi.Int8> phrase,
  ) {
    return _did_from_mnemonic(
      phrase,
    );
  }

  late final _did_from_mnemonicPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Int8>)>>(
      'did_from_mnemonic');
  late final _did_from_mnemonic = _did_from_mnemonicPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Int8>)>();

  void ed25519keypair_free(
    ffi.Pointer<G_Ed25519Keypair> ptr,
  ) {
    return _ed25519keypair_free(
      ptr,
    );
  }

  late final _ed25519keypair_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Ed25519Keypair>)>>(
      'ed25519keypair_free');
  late final _ed25519keypair_free = _ed25519keypair_freePtr
      .asFunction<void Function(ffi.Pointer<G_Ed25519Keypair>)>();

  void ffivec_ed25519publickey_free(
    ffi.Pointer<G_FFIVec_Ed25519PublicKey> cvec,
  ) {
    return _ffivec_ed25519publickey_free(
      cvec,
    );
  }

  late final _ffivec_ed25519publickey_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_FFIVec_Ed25519PublicKey>)>>(
      'ffivec_ed25519publickey_free');
  late final _ffivec_ed25519publickey_free = _ffivec_ed25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Ed25519PublicKey>)>();

  void ed25519publickey_free(
    ffi.Pointer<G_Ed25519PublicKey> ptr,
  ) {
    return _ed25519publickey_free(
      ptr,
    );
  }

  late final _ed25519publickey_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Ed25519PublicKey>)>>('ed25519publickey_free');
  late final _ed25519publickey_free = _ed25519publickey_freePtr
      .asFunction<void Function(ffi.Pointer<G_Ed25519PublicKey>)>();

  ffi.Pointer<ffi.Int8> did_to_string(
    ffi.Pointer<G_DID> did_key,
  ) {
    return _did_to_string(
      did_key,
    );
  }

  late final _did_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_DID>)>>('did_to_string');
  late final _did_to_string = _did_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_DID>)>();

  G_FFIResult_DID did_from_string(
    ffi.Pointer<ffi.Int8> did_key,
  ) {
    return _did_from_string(
      did_key,
    );
  }

  late final _did_from_stringPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Int8>)>>(
      'did_from_string');
  late final _did_from_string = _did_from_stringPtr
      .asFunction<G_FFIResult_DID Function(ffi.Pointer<ffi.Int8>)>();

  void ffivec_data_free(
    ffi.Pointer<G_FFIVec_Data> cvec,
  ) {
    return _ffivec_data_free(
      cvec,
    );
  }

  late final _ffivec_data_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Data>)>>(
      'ffivec_data_free');
  late final _ffivec_data_free = _ffivec_data_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Data>)>();

  void data_free(
    ffi.Pointer<G_Data> ptr,
  ) {
    return _data_free(
      ptr,
    );
  }

  late final _data_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_free');
  late final _data_free =
      _data_freePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_Data data_new(
    int data,
    ffi.Pointer<ffi.Int8> payload,
  ) {
    return _data_new(
      data,
      payload,
    );
  }

  late final _data_newPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Data Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('data_new');
  late final _data_new = _data_newPtr
      .asFunction<G_FFIResult_Data Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> data_id(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_id(
      data,
    );
  }

  late final _data_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Data>)>>('data_id');
  late final _data_id = _data_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Data>)>();

  void data_update_time(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_update_time(
      data,
    );
  }

  late final _data_update_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Data>)>>(
          'data_update_time');
  late final _data_update_time =
      _data_update_timePtr.asFunction<void Function(ffi.Pointer<G_Data>)>();

  void data_set_version(
    ffi.Pointer<G_Data> data,
    int version,
  ) {
    return _data_set_version(
      data,
      version,
    );
  }

  late final _data_set_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Uint32)>>('data_set_version');
  late final _data_set_version = _data_set_versionPtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_data_type(
    ffi.Pointer<G_Data> data,
    int data_type,
  ) {
    return _data_set_data_type(
      data,
      data_type,
    );
  }

  late final _data_set_data_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_Data>, ffi.Int32)>>('data_set_data_type');
  late final _data_set_data_type = _data_set_data_typePtr
      .asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  void data_set_size(
    ffi.Pointer<G_Data> data,
    int size,
  ) {
    return _data_set_size(
      data,
      size,
    );
  }

  late final _data_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Data>, ffi.Uint64)>>('data_set_size');
  late final _data_set_size =
      _data_set_sizePtr.asFunction<void Function(ffi.Pointer<G_Data>, int)>();

  int data_size(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_size(
      data,
    );
  }

  late final _data_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<G_Data>)>>(
          'data_size');
  late final _data_size =
      _data_sizePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_timestamp(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_timestamp(
      data,
    );
  }

  late final _data_timestampPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<G_Data>)>>(
          'data_timestamp');
  late final _data_timestamp =
      _data_timestampPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_version(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_version(
      data,
    );
  }

  late final _data_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<G_Data>)>>(
          'data_version');
  late final _data_version =
      _data_versionPtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  int data_type(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_type(
      data,
    );
  }

  late final _data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Data>)>>(
          'data_type');
  late final _data_type =
      _data_typePtr.asFunction<int Function(ffi.Pointer<G_Data>)>();

  G_FFIResult_String data_payload(
    ffi.Pointer<G_Data> data,
  ) {
    return _data_payload(
      data,
    );
  }

  late final _data_payloadPtr = _lookup<
          ffi.NativeFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>>(
      'data_payload');
  late final _data_payload = _data_payloadPtr
      .asFunction<G_FFIResult_String Function(ffi.Pointer<G_Data>)>();

  void multipassadapter_free(
    ffi.Pointer<G_MultiPassAdapter> ptr,
  ) {
    return _multipassadapter_free(
      ptr,
    );
  }

  late final _multipassadapter_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipassadapter_free');
  late final _multipassadapter_free = _multipassadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_MultiPassAdapter>)>();

  ffi.Pointer<ffi.Int8> multipass_generate_name() {
    return _multipass_generate_name();
  }

  late final _multipass_generate_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'multipass_generate_name');
  late final _multipass_generate_name = _multipass_generate_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void ffivec_role_free(
    ffi.Pointer<G_FFIVec_Role> cvec,
  ) {
    return _ffivec_role_free(
      cvec,
    );
  }

  late final _ffivec_role_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Role>)>>(
      'ffivec_role_free');
  late final _ffivec_role_free = _ffivec_role_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Role>)>();

  void role_free(
    ffi.Pointer<G_Role> ptr,
  ) {
    return _role_free(
      ptr,
    );
  }

  late final _role_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Role>)>>(
          'role_free');
  late final _role_free =
      _role_freePtr.asFunction<void Function(ffi.Pointer<G_Role>)>();

  void ffivec_badge_free(
    ffi.Pointer<G_FFIVec_Badge> cvec,
  ) {
    return _ffivec_badge_free(
      cvec,
    );
  }

  late final _ffivec_badge_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Badge>)>>(
      'ffivec_badge_free');
  late final _ffivec_badge_free = _ffivec_badge_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Badge>)>();

  void badge_free(
    ffi.Pointer<G_Badge> ptr,
  ) {
    return _badge_free(
      ptr,
    );
  }

  late final _badge_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Badge>)>>(
          'badge_free');
  late final _badge_free =
      _badge_freePtr.asFunction<void Function(ffi.Pointer<G_Badge>)>();

  void graphics_free(
    ffi.Pointer<G_Graphics> ptr,
  ) {
    return _graphics_free(
      ptr,
    );
  }

  late final _graphics_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Graphics>)>>(
          'graphics_free');
  late final _graphics_free =
      _graphics_freePtr.asFunction<void Function(ffi.Pointer<G_Graphics>)>();

  void ffivec_identity_free(
    ffi.Pointer<G_FFIVec_Identity> cvec,
  ) {
    return _ffivec_identity_free(
      cvec,
    );
  }

  late final _ffivec_identity_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_Identity>)>>('ffivec_identity_free');
  late final _ffivec_identity_free = _ffivec_identity_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Identity>)>();

  void identity_free(
    ffi.Pointer<G_Identity> ptr,
  ) {
    return _identity_free(
      ptr,
    );
  }

  late final _identity_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identity>)>>(
          'identity_free');
  late final _identity_free =
      _identity_freePtr.asFunction<void Function(ffi.Pointer<G_Identity>)>();

  void ffivec_friendrequest_free(
    ffi.Pointer<G_FFIVec_FriendRequest> cvec,
  ) {
    return _ffivec_friendrequest_free(
      cvec,
    );
  }

  late final _ffivec_friendrequest_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>>(
      'ffivec_friendrequest_free');
  late final _ffivec_friendrequest_free = _ffivec_friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_FriendRequest>)>();

  void friendrequest_free(
    ffi.Pointer<G_FriendRequest> ptr,
  ) {
    return _friendrequest_free(
      ptr,
    );
  }

  late final _friendrequest_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FriendRequest>)>>(
      'friendrequest_free');
  late final _friendrequest_free = _friendrequest_freePtr
      .asFunction<void Function(ffi.Pointer<G_FriendRequest>)>();

  void identifier_free(
    ffi.Pointer<G_Identifier> ptr,
  ) {
    return _identifier_free(
      ptr,
    );
  }

  late final _identifier_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Identifier>)>>(
          'identifier_free');
  late final _identifier_free = _identifier_freePtr
      .asFunction<void Function(ffi.Pointer<G_Identifier>)>();

  void identityupdate_free(
    ffi.Pointer<G_IdentityUpdate> ptr,
  ) {
    return _identityupdate_free(
      ptr,
    );
  }

  late final _identityupdate_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'identityupdate_free');
  late final _identityupdate_free = _identityupdate_freePtr
      .asFunction<void Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Int8> multipass_role_name(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_name(
      role,
    );
  }

  late final _multipass_role_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Role>)>>('multipass_role_name');
  late final _multipass_role_name = _multipass_role_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Role>)>();

  int multipass_role_level(
    ffi.Pointer<G_Role> role,
  ) {
    return _multipass_role_level(
      role,
    );
  }

  late final _multipass_role_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<G_Role>)>>(
          'multipass_role_level');
  late final _multipass_role_level =
      _multipass_role_levelPtr.asFunction<int Function(ffi.Pointer<G_Role>)>();

  ffi.Pointer<ffi.Int8> multipass_badge_name(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_name(
      badge,
    );
  }

  late final _multipass_badge_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_name');
  late final _multipass_badge_name = _multipass_badge_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Int8> multipass_badge_icon(
    ffi.Pointer<G_Badge> badge,
  ) {
    return _multipass_badge_icon(
      badge,
    );
  }

  late final _multipass_badge_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Badge>)>>('multipass_badge_icon');
  late final _multipass_badge_icon = _multipass_badge_iconPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Badge>)>();

  ffi.Pointer<ffi.Int8> multipass_graphics_profile_picture(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_picture(
      graphics,
    );
  }

  late final _multipass_graphics_profile_picturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_picture');
  late final _multipass_graphics_profile_picture =
      _multipass_graphics_profile_picturePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Int8> multipass_graphics_profile_banner(
    ffi.Pointer<G_Graphics> graphics,
  ) {
    return _multipass_graphics_profile_banner(
      graphics,
    );
  }

  late final _multipass_graphics_profile_bannerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Graphics>)>>('multipass_graphics_profile_banner');
  late final _multipass_graphics_profile_banner =
      _multipass_graphics_profile_bannerPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Graphics>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_username(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_username(
      identity,
    );
  }

  late final _multipass_identity_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_username');
  late final _multipass_identity_username = _multipass_identity_usernamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Identity>)>();

  int multipass_identity_short_id(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_short_id(
      identity,
    );
  }

  late final _multipass_identity_short_idPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<G_Identity>)>>(
          'multipass_identity_short_id');
  late final _multipass_identity_short_id = _multipass_identity_short_idPtr
      .asFunction<int Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_identity_did_key(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_did_key(
      identity,
    );
  }

  late final _multipass_identity_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_did_key');
  late final _multipass_identity_did_key = _multipass_identity_did_keyPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Graphics> multipass_identity_graphics(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_graphics(
      identity,
    );
  }

  late final _multipass_identity_graphicsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Graphics> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_graphics');
  late final _multipass_identity_graphics = _multipass_identity_graphicsPtr
      .asFunction<ffi.Pointer<G_Graphics> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_status_message(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_status_message(
      identity,
    );
  }

  late final _multipass_identity_status_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_status_message');
  late final _multipass_identity_status_message =
      _multipass_identity_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Role> multipass_identity_roles(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_roles(
      identity,
    );
  }

  late final _multipass_identity_rolesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Role> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_roles');
  late final _multipass_identity_roles =
      _multipass_identity_rolesPtr.asFunction<
          ffi.Pointer<G_FFIVec_Role> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_FFIVec_Badge> multipass_identity_available_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_available_badge(
      identity,
    );
  }

  late final _multipass_identity_available_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_available_badge');
  late final _multipass_identity_available_badge =
      _multipass_identity_available_badgePtr.asFunction<
          ffi.Pointer<G_FFIVec_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_Badge> multipass_identity_active_badge(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_active_badge(
      identity,
    );
  }

  late final _multipass_identity_active_badgePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Badge> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_active_badge');
  late final _multipass_identity_active_badge =
      _multipass_identity_active_badgePtr
          .asFunction<ffi.Pointer<G_Badge> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<ffi.Void> multipass_identity_linked_accounts(
    ffi.Pointer<G_Identity> identity,
  ) {
    return _multipass_identity_linked_accounts(
      identity,
    );
  }

  late final _multipass_identity_linked_accountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<G_Identity>)>>('multipass_identity_linked_accounts');
  late final _multipass_identity_linked_accounts =
      _multipass_identity_linked_accountsPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<G_Identity>)>();

  ffi.Pointer<G_DID> multipass_friend_request_from(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_from(
      request,
    );
  }

  late final _multipass_friend_request_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_from');
  late final _multipass_friend_request_from = _multipass_friend_request_fromPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_DID> multipass_friend_request_to(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_to(
      request,
    );
  }

  late final _multipass_friend_request_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_FriendRequest>)>>('multipass_friend_request_to');
  late final _multipass_friend_request_to = _multipass_friend_request_toPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_FriendRequest>)>();

  int multipass_friend_request_status(
    ffi.Pointer<G_FriendRequest> request,
  ) {
    return _multipass_friend_request_status(
      request,
    );
  }

  late final _multipass_friend_request_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_FriendRequest>)>>(
      'multipass_friend_request_status');
  late final _multipass_friend_request_status =
      _multipass_friend_request_statusPtr
          .asFunction<int Function(ffi.Pointer<G_FriendRequest>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_user_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _multipass_identifier_user_name(
      name,
    );
  }

  late final _multipass_identifier_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<ffi.Int8>)>>('multipass_identifier_user_name');
  late final _multipass_identifier_user_name =
      _multipass_identifier_user_namePtr.asFunction<
          ffi.Pointer<G_Identifier> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_did_key(
    ffi.Pointer<G_DID> key,
  ) {
    return _multipass_identifier_did_key(
      key,
    );
  }

  late final _multipass_identifier_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_Identifier> Function(
              ffi.Pointer<G_DID>)>>('multipass_identifier_did_key');
  late final _multipass_identifier_did_key = _multipass_identifier_did_keyPtr
      .asFunction<ffi.Pointer<G_Identifier> Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<G_Identifier> multipass_identifier_own() {
    return _multipass_identifier_own();
  }

  late final _multipass_identifier_ownPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Identifier> Function()>>(
          'multipass_identifier_own');
  late final _multipass_identifier_own = _multipass_identifier_ownPtr
      .asFunction<ffi.Pointer<G_Identifier> Function()>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_username(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _multipass_identity_update_set_username(
      name,
    );
  }

  late final _multipass_identity_update_set_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>>(
      'multipass_identity_update_set_username');
  late final _multipass_identity_update_set_username =
      _multipass_identity_update_set_usernamePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_picture(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _multipass_identity_update_set_graphics_picture(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>>(
      'multipass_identity_update_set_graphics_picture');
  late final _multipass_identity_update_set_graphics_picture =
      _multipass_identity_update_set_graphics_picturePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_graphics_banner(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _multipass_identity_update_set_graphics_banner(
      name,
    );
  }

  late final _multipass_identity_update_set_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>>(
      'multipass_identity_update_set_graphics_banner');
  late final _multipass_identity_update_set_graphics_banner =
      _multipass_identity_update_set_graphics_bannerPtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_IdentityUpdate> multipass_identity_update_set_status_message(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _multipass_identity_update_set_status_message(
      name,
    );
  }

  late final _multipass_identity_update_set_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>>(
      'multipass_identity_update_set_status_message');
  late final _multipass_identity_update_set_status_message =
      _multipass_identity_update_set_status_messagePtr.asFunction<
          ffi.Pointer<G_IdentityUpdate> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_update_username(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_username(
      update,
    );
  }

  late final _multipass_identity_update_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_username');
  late final _multipass_identity_update_username =
      _multipass_identity_update_usernamePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_update_graphics_picture(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_picture(
      update,
    );
  }

  late final _multipass_identity_update_graphics_picturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_picture');
  late final _multipass_identity_update_graphics_picture =
      _multipass_identity_update_graphics_picturePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_update_graphics_banner(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_graphics_banner(
      update,
    );
  }

  late final _multipass_identity_update_graphics_bannerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_graphics_banner');
  late final _multipass_identity_update_graphics_banner =
      _multipass_identity_update_graphics_bannerPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>();

  ffi.Pointer<ffi.Int8> multipass_identity_update_status_message(
    ffi.Pointer<G_IdentityUpdate> update,
  ) {
    return _multipass_identity_update_status_message(
      update,
    );
  }

  late final _multipass_identity_update_status_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>>(
      'multipass_identity_update_status_message');
  late final _multipass_identity_update_status_message =
      _multipass_identity_update_status_messagePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_create_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Int8> username,
    ffi.Pointer<ffi.Int8> passphrase,
  ) {
    return _multipass_create_identity(
      ctx,
      username,
      passphrase,
    );
  }

  late final _multipass_create_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('multipass_create_identity');
  late final _multipass_create_identity =
      _multipass_create_identityPtr.asFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Identity multipass_get_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_Identifier> identifier,
  ) {
    return _multipass_get_identity(
      ctx,
      identifier,
    );
  }

  late final _multipass_get_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Identity Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_Identifier>)>>('multipass_get_identity');
  late final _multipass_get_identity = _multipass_get_identityPtr.asFunction<
      G_FFIResult_Identity Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_Identifier>)>();

  G_FFIResult_Identity multipass_get_own_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_get_own_identity(
      ctx,
    );
  }

  late final _multipass_get_own_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Identity Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_get_own_identity');
  late final _multipass_get_own_identity =
      _multipass_get_own_identityPtr.asFunction<
          G_FFIResult_Identity Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_update_identity(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_IdentityUpdate> option,
  ) {
    return _multipass_update_identity(
      ctx,
      option,
    );
  }

  late final _multipass_update_identityPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>>('multipass_update_identity');
  late final _multipass_update_identity =
      _multipass_update_identityPtr.asFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_IdentityUpdate>)>();

  G_FFIResult_DID multipass_decrypt_private_key(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<ffi.Int8> passphrase,
  ) {
    return _multipass_decrypt_private_key(
      ctx,
      passphrase,
    );
  }

  late final _multipass_decrypt_private_keyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_DID Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<ffi.Int8>)>>('multipass_decrypt_private_key');
  late final _multipass_decrypt_private_key =
      _multipass_decrypt_private_keyPtr.asFunction<
          G_FFIResult_DID Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null multipass_refresh_cache(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_refresh_cache(
      ctx,
    );
  }

  late final _multipass_refresh_cachePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_refresh_cache');
  late final _multipass_refresh_cache = _multipass_refresh_cachePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_send_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_send_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_send_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_send_request');
  late final _multipass_send_request = _multipass_send_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_accept_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_accept_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_accept_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_accept_request');
  late final _multipass_accept_request =
      _multipass_accept_requestPtr.asFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_deny_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_deny_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_deny_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_deny_request');
  late final _multipass_deny_request = _multipass_deny_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_close_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_close_request(
      ctx,
      pubkey,
    );
  }

  late final _multipass_close_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_close_request');
  late final _multipass_close_request = _multipass_close_requestPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_incoming_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_incoming_request(
      ctx,
    );
  }

  late final _multipass_list_incoming_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_incoming_request');
  late final _multipass_list_incoming_request =
      _multipass_list_incoming_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_outgoing_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_outgoing_request(
      ctx,
    );
  }

  late final _multipass_list_outgoing_requestPtr = _lookup<
          ffi.NativeFunction<
              G_FFIResult_FFIVec_FriendRequest Function(
                  ffi.Pointer<G_MultiPassAdapter>)>>(
      'multipass_list_outgoing_request');
  late final _multipass_list_outgoing_request =
      _multipass_list_outgoing_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_FriendRequest multipass_list_all_request(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_all_request(
      ctx,
    );
  }

  late final _multipass_list_all_requestPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_all_request');
  late final _multipass_list_all_request =
      _multipass_list_all_requestPtr.asFunction<
          G_FFIResult_FFIVec_FriendRequest Function(
              ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_remove_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_remove_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_remove_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_remove_friend');
  late final _multipass_remove_friend = _multipass_remove_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_block(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_block(
      ctx,
      pubkey,
    );
  }

  late final _multipass_blockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_block');
  late final _multipass_block = _multipass_blockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_Null multipass_unblock(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_unblock(
      ctx,
      pubkey,
    );
  }

  late final _multipass_unblockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_unblock');
  late final _multipass_unblock = _multipass_unblockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  G_FFIResult_FFIVec_DID multipass_block_list(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_block_list(
      ctx,
    );
  }

  late final _multipass_block_listPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_block_list');
  late final _multipass_block_list = _multipass_block_listPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_FFIVec_DID multipass_list_friends(
    ffi.Pointer<G_MultiPassAdapter> ctx,
  ) {
    return _multipass_list_friends(
      ctx,
    );
  }

  late final _multipass_list_friendsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_DID Function(
              ffi.Pointer<G_MultiPassAdapter>)>>('multipass_list_friends');
  late final _multipass_list_friends = _multipass_list_friendsPtr.asFunction<
      G_FFIResult_FFIVec_DID Function(ffi.Pointer<G_MultiPassAdapter>)>();

  G_FFIResult_Null multipass_has_friend(
    ffi.Pointer<G_MultiPassAdapter> ctx,
    ffi.Pointer<G_DID> pubkey,
  ) {
    return _multipass_has_friend(
      ctx,
      pubkey,
    );
  }

  late final _multipass_has_friendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_MultiPassAdapter>,
              ffi.Pointer<G_DID>)>>('multipass_has_friend');
  late final _multipass_has_friend = _multipass_has_friendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_MultiPassAdapter>, ffi.Pointer<G_DID>)>();

  void pocketdimensionadapter_free(
    ffi.Pointer<G_PocketDimensionAdapter> ptr,
  ) {
    return _pocketdimensionadapter_free(
      ptr,
    );
  }

  late final _pocketdimensionadapter_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<G_PocketDimensionAdapter>)>>(
      'pocketdimensionadapter_free');
  late final _pocketdimensionadapter_free = _pocketdimensionadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_PocketDimensionAdapter>)>();

  void querybuilder_free(
    ffi.Pointer<G_QueryBuilder> ptr,
  ) {
    return _querybuilder_free(
      ptr,
    );
  }

  late final _querybuilder_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_QueryBuilder>)>>(
      'querybuilder_free');
  late final _querybuilder_free = _querybuilder_freePtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>)>();

  ffi.Pointer<G_QueryBuilder> querybuilder_new() {
    return _querybuilder_new();
  }

  late final _querybuilder_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_QueryBuilder> Function()>>(
          'querybuilder_new');
  late final _querybuilder_new =
      _querybuilder_newPtr.asFunction<ffi.Pointer<G_QueryBuilder> Function()>();

  G_FFIResult_QueryBuilder querybuilder_import(
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _querybuilder_import(
      data,
    );
  }

  late final _querybuilder_importPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_QueryBuilder Function(
              ffi.Pointer<ffi.Int8>)>>('querybuilder_import');
  late final _querybuilder_import = _querybuilder_importPtr
      .asFunction<G_FFIResult_QueryBuilder Function(ffi.Pointer<ffi.Int8>)>();

  void querybuilder_where(
    ffi.Pointer<G_QueryBuilder> ctx,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _querybuilder_where(
      ctx,
      key,
      val,
    );
  }

  late final _querybuilder_wherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('querybuilder_where');
  late final _querybuilder_where = _querybuilder_wherePtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void querybuilder_filter(
    ffi.Pointer<G_QueryBuilder> ctx,
    int cmp,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _querybuilder_filter(
      ctx,
      cmp,
      key,
      val,
    );
  }

  late final _querybuilder_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('querybuilder_filter');
  late final _querybuilder_filter = _querybuilder_filterPtr.asFunction<
      void Function(ffi.Pointer<G_QueryBuilder>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void querybuilder_limit(
    ffi.Pointer<G_QueryBuilder> ctx,
    int limit,
  ) {
    return _querybuilder_limit(
      ctx,
      limit,
    );
  }

  late final _querybuilder_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_QueryBuilder>, uintptr_t)>>('querybuilder_limit');
  late final _querybuilder_limit = _querybuilder_limitPtr
      .asFunction<void Function(ffi.Pointer<G_QueryBuilder>, int)>();

  void ffivec_message_free(
    ffi.Pointer<G_FFIVec_Message> cvec,
  ) {
    return _ffivec_message_free(
      cvec,
    );
  }

  late final _ffivec_message_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIVec_Message>)>>(
      'ffivec_message_free');
  late final _ffivec_message_free = _ffivec_message_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_Message>)>();

  void message_free(
    ffi.Pointer<G_Message> ptr,
  ) {
    return _message_free(
      ptr,
    );
  }

  late final _message_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Message>)>>(
          'message_free');
  late final _message_free =
      _message_freePtr.asFunction<void Function(ffi.Pointer<G_Message>)>();

  void ffivec_senderid_free(
    ffi.Pointer<G_FFIVec_SenderId> cvec,
  ) {
    return _ffivec_senderid_free(
      cvec,
    );
  }

  late final _ffivec_senderid_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<G_FFIVec_SenderId>)>>('ffivec_senderid_free');
  late final _ffivec_senderid_free = _ffivec_senderid_freePtr
      .asFunction<void Function(ffi.Pointer<G_FFIVec_SenderId>)>();

  void reaction_free(
    ffi.Pointer<G_Reaction> ptr,
  ) {
    return _reaction_free(
      ptr,
    );
  }

  late final _reaction_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Reaction>)>>(
          'reaction_free');
  late final _reaction_free =
      _reaction_freePtr.asFunction<void Function(ffi.Pointer<G_Reaction>)>();

  void raygunadapter_free(
    ffi.Pointer<G_RayGunAdapter> ptr,
  ) {
    return _raygunadapter_free(
      ptr,
    );
  }

  late final _raygunadapter_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_RayGunAdapter>)>>(
      'raygunadapter_free');
  late final _raygunadapter_free = _raygunadapter_freePtr
      .asFunction<void Function(ffi.Pointer<G_RayGunAdapter>)>();

  G_FFIResult_FFIVec_Message raygun_get_messages(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
  ) {
    return _raygun_get_messages(
      ctx,
      convo_id,
    );
  }

  late final _raygun_get_messagesPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_FFIVec_Message Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>)>>('raygun_get_messages');
  late final _raygun_get_messages = _raygun_get_messagesPtr.asFunction<
      G_FFIResult_FFIVec_Message Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null raygun_send(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> messages,
    int lines,
  ) {
    return _raygun_send(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_sendPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              uintptr_t)>>('raygun_send');
  late final _raygun_send = _raygun_sendPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int)>();

  G_FFIResult_Null raygun_delete(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
  ) {
    return _raygun_delete(
      ctx,
      convo_id,
      message_id,
    );
  }

  late final _raygun_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('raygun_delete');
  late final _raygun_delete = _raygun_deletePtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null raygun_react(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
    int state,
    ffi.Pointer<ffi.Int8> emoji,
  ) {
    return _raygun_react(
      ctx,
      convo_id,
      message_id,
      state,
      emoji,
    );
  }

  late final _raygun_reactPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('raygun_react');
  late final _raygun_react = _raygun_reactPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null raygun_pin(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
    int state,
  ) {
    return _raygun_pin(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_pinPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('raygun_pin');
  late final _raygun_pin = _raygun_pinPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  G_FFIResult_Null raygun_reply(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> messages,
    int lines,
  ) {
    return _raygun_reply(
      ctx,
      convo_id,
      message_id,
      messages,
      lines,
    );
  }

  late final _raygun_replyPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              uintptr_t)>>('raygun_reply');
  late final _raygun_reply = _raygun_replyPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int)>();

  G_FFIResult_Null raygun_ping(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
  ) {
    return _raygun_ping(
      ctx,
      convo_id,
    );
  }

  late final _raygun_pingPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>)>>('raygun_ping');
  late final _raygun_ping = _raygun_pingPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_RayGunAdapter>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null raygun_embeds(
    ffi.Pointer<G_RayGunAdapter> ctx,
    ffi.Pointer<ffi.Int8> convo_id,
    ffi.Pointer<ffi.Int8> message_id,
    int state,
  ) {
    return _raygun_embeds(
      ctx,
      convo_id,
      message_id,
      state,
    );
  }

  late final _raygun_embedsPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_RayGunAdapter>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('raygun_embeds');
  late final _raygun_embeds = _raygun_embedsPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_RayGunAdapter>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> message_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_id(
      ctx,
    );
  }

  late final _message_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Message>)>>('message_id');
  late final _message_id = _message_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Int8> message_conversation_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_conversation_id(
      ctx,
    );
  }

  late final _message_conversation_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Message>)>>('message_conversation_id');
  late final _message_conversation_id = _message_conversation_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_SenderId> message_sender_id(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_sender_id(
      ctx,
    );
  }

  late final _message_sender_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<G_Message>)>>('message_sender_id');
  late final _message_sender_id = _message_sender_idPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Int8> message_date(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_date(
      ctx,
    );
  }

  late final _message_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Message>)>>('message_date');
  late final _message_date = _message_datePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Message>)>();

  int message_pinned(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_pinned(
      ctx,
    );
  }

  late final _message_pinnedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Message>)>>(
          'message_pinned');
  late final _message_pinned =
      _message_pinnedPtr.asFunction<int Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Int8> message_reactions(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_reactions(
      ctx,
    );
  }

  late final _message_reactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Message>)>>('message_reactions');
  late final _message_reactions = _message_reactionsPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<G_FFIVec_String> message_lines(
    ffi.Pointer<G_Message> ctx,
  ) {
    return _message_lines(
      ctx,
    );
  }

  late final _message_linesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_String> Function(
              ffi.Pointer<G_Message>)>>('message_lines');
  late final _message_lines = _message_linesPtr.asFunction<
      ffi.Pointer<G_FFIVec_String> Function(ffi.Pointer<G_Message>)>();

  ffi.Pointer<ffi.Int8> reaction_emoji(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_emoji(
      ctx,
    );
  }

  late final _reaction_emojiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_emoji');
  late final _reaction_emoji = _reaction_emojiPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<G_FFIVec_SenderId> reaction_users(
    ffi.Pointer<G_Reaction> ctx,
  ) {
    return _reaction_users(
      ctx,
    );
  }

  late final _reaction_usersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_FFIVec_SenderId> Function(
              ffi.Pointer<G_Reaction>)>>('reaction_users');
  late final _reaction_users = _reaction_usersPtr.asFunction<
      ffi.Pointer<G_FFIVec_SenderId> Function(ffi.Pointer<G_Reaction>)>();

  ffi.Pointer<G_SenderId> sender_id_from_id(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _sender_id_from_id(
      id,
    );
  }

  late final _sender_id_from_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<ffi.Int8>)>>('sender_id_from_id');
  late final _sender_id_from_id = _sender_id_from_idPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<G_SenderId> sender_id_from_did_key(
    ffi.Pointer<G_DID> public_key,
  ) {
    return _sender_id_from_did_key(
      public_key,
    );
  }

  late final _sender_id_from_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_SenderId> Function(
              ffi.Pointer<G_DID>)>>('sender_id_from_did_key');
  late final _sender_id_from_did_key = _sender_id_from_did_keyPtr
      .asFunction<ffi.Pointer<G_SenderId> Function(ffi.Pointer<G_DID>)>();

  ffi.Pointer<ffi.Int8> sender_id_get_id(
    ffi.Pointer<G_SenderId> sender_id,
  ) {
    return _sender_id_get_id(
      sender_id,
    );
  }

  late final _sender_id_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<G_SenderId>)>>('sender_id_get_id');
  late final _sender_id_get_id = _sender_id_get_idPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<G_SenderId>)>();

  ffi.Pointer<G_DID> sender_id_get_did_key(
    ffi.Pointer<G_SenderId> sender_id,
  ) {
    return _sender_id_get_did_key(
      sender_id,
    );
  }

  late final _sender_id_get_did_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<G_DID> Function(
              ffi.Pointer<G_SenderId>)>>('sender_id_get_did_key');
  late final _sender_id_get_did_key = _sender_id_get_did_keyPtr
      .asFunction<ffi.Pointer<G_DID> Function(ffi.Pointer<G_SenderId>)>();

  void tesseract_free(
    ffi.Pointer<G_Tesseract> ptr,
  ) {
    return _tesseract_free(
      ptr,
    );
  }

  late final _tesseract_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_free');
  late final _tesseract_free =
      _tesseract_freePtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  ffi.Pointer<G_Tesseract> tesseract_new() {
    return _tesseract_new();
  }

  late final _tesseract_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<G_Tesseract> Function()>>(
          'tesseract_new');
  late final _tesseract_new =
      _tesseract_newPtr.asFunction<ffi.Pointer<G_Tesseract> Function()>();

  G_FFIResult_Tesseract tesseract_from_file(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _tesseract_from_file(
      file,
    );
  }

  late final _tesseract_from_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Tesseract Function(
              ffi.Pointer<ffi.Int8>)>>('tesseract_from_file');
  late final _tesseract_from_file = _tesseract_from_filePtr
      .asFunction<G_FFIResult_Tesseract Function(ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null tesseract_to_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _tesseract_to_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_to_filePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_to_file');
  late final _tesseract_to_file = _tesseract_to_filePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  void tesseract_set_file(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _tesseract_set_file(
      tesseract,
      file,
    );
  }

  late final _tesseract_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_set_file');
  late final _tesseract_set_file = _tesseract_set_filePtr.asFunction<
      void Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  void tesseract_set_autosave(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_set_autosave(
      tesseract,
    );
  }

  late final _tesseract_set_autosavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_set_autosave');
  late final _tesseract_set_autosave = _tesseract_set_autosavePtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  int tesseract_autosave_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_autosave_enabled(
      tesseract,
    );
  }

  late final _tesseract_autosave_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_autosave_enabled');
  late final _tesseract_autosave_enabled = _tesseract_autosave_enabledPtr
      .asFunction<int Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_disable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_disable_key_check(
      tesseract,
    );
  }

  late final _tesseract_disable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_disable_key_check');
  late final _tesseract_disable_key_check = _tesseract_disable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void tesseract_enable_key_check(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_enable_key_check(
      tesseract,
    );
  }

  late final _tesseract_enable_key_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_enable_key_check');
  late final _tesseract_enable_key_check = _tesseract_enable_key_checkPtr
      .asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  int tesseract_is_key_check_enabled(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_key_check_enabled(
      tesseract,
    );
  }

  late final _tesseract_is_key_check_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_key_check_enabled');
  late final _tesseract_is_key_check_enabled =
      _tesseract_is_key_check_enabledPtr
          .asFunction<int Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_save(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_save(
      tesseract,
    );
  }

  late final _tesseract_savePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(
              ffi.Pointer<G_Tesseract>)>>('tesseract_save');
  late final _tesseract_save = _tesseract_savePtr
      .asFunction<G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_set(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> val,
  ) {
    return _tesseract_set(
      tesseract,
      key,
      val,
    );
  }

  late final _tesseract_setPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tesseract_set');
  late final _tesseract_set = _tesseract_setPtr.asFunction<
      G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_String tesseract_retrieve(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _tesseract_retrieve(
      tesseract,
      key,
    );
  }

  late final _tesseract_retrievePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_String Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_retrieve');
  late final _tesseract_retrieve = _tesseract_retrievePtr.asFunction<
      G_FFIResult_String Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  int tesseract_exist(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _tesseract_exist(
      tesseract,
      key,
    );
  }

  late final _tesseract_existPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_exist');
  late final _tesseract_exist = _tesseract_existPtr.asFunction<
      int Function(ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_Null tesseract_delete(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _tesseract_delete(
      tesseract,
      key,
    );
  }

  late final _tesseract_deletePtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_delete');
  late final _tesseract_delete = _tesseract_deletePtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  void tesseract_clear(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_clear(
      tesseract,
    );
  }

  late final _tesseract_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_clear');
  late final _tesseract_clear =
      _tesseract_clearPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  int tesseract_is_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_is_unlock(
      tesseract,
    );
  }

  late final _tesseract_is_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_is_unlock');
  late final _tesseract_is_unlock = _tesseract_is_unlockPtr
      .asFunction<int Function(ffi.Pointer<G_Tesseract>)>();

  G_FFIResult_Null tesseract_unlock(
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _tesseract_unlock(
      tesseract,
      key,
    );
  }

  late final _tesseract_unlockPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_Null Function(ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('tesseract_unlock');
  late final _tesseract_unlock = _tesseract_unlockPtr.asFunction<
      G_FFIResult_Null Function(
          ffi.Pointer<G_Tesseract>, ffi.Pointer<ffi.Int8>)>();

  void tesseract_lock(
    ffi.Pointer<G_Tesseract> tesseract,
  ) {
    return _tesseract_lock(
      tesseract,
    );
  }

  late final _tesseract_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_Tesseract>)>>(
          'tesseract_lock');
  late final _tesseract_lock =
      _tesseract_lockPtr.asFunction<void Function(ffi.Pointer<G_Tesseract>)>();

  void ffierror_free(
    ffi.Pointer<G_FFIError> ptr,
  ) {
    return _ffierror_free(
      ptr,
    );
  }

  late final _ffierror_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<G_FFIError>)>>(
          'ffierror_free');
  late final _ffierror_free =
      _ffierror_freePtr.asFunction<void Function(ffi.Pointer<G_FFIError>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_temporary(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> config,
  ) {
    return _multipass_mp_ipfs_temporary(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_temporaryPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('multipass_mp_ipfs_temporary');
  late final _multipass_mp_ipfs_temporary =
      _multipass_mp_ipfs_temporaryPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>();

  G_FFIResult_MultiPassAdapter multipass_mp_ipfs_persistent(
    ffi.Pointer<G_PocketDimensionAdapter> pocketdimension,
    ffi.Pointer<G_Tesseract> tesseract,
    ffi.Pointer<ffi.Int8> config,
  ) {
    return _multipass_mp_ipfs_persistent(
      pocketdimension,
      tesseract,
      config,
    );
  }

  late final _multipass_mp_ipfs_persistentPtr = _lookup<
      ffi.NativeFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>>('multipass_mp_ipfs_persistent');
  late final _multipass_mp_ipfs_persistent =
      _multipass_mp_ipfs_persistentPtr.asFunction<
          G_FFIResult_MultiPassAdapter Function(
              ffi.Pointer<G_PocketDimensionAdapter>,
              ffi.Pointer<G_Tesseract>,
              ffi.Pointer<ffi.Int8>)>();
}

class G___fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class G_div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class G_ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class G_lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class G___sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class G_timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Int64;
typedef __suseconds_t = ffi.Int64;

class G_timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Int64;

class G_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class __atomic_wide_counter extends ffi.Union {
  @ffi.Uint64()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Uint32()
  external int __low;

  @ffi.Uint32()
  external int __high;
}

class G___pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<G___pthread_internal_list> __prev;

  external ffi.Pointer<G___pthread_internal_list> __next;
}

class G___pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<G___pthread_internal_slist> __next;
}

class G___pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = G___pthread_internal_list;

class G___pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class G___pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class G___once_flag extends ffi.Struct {
  @ffi.Int32()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external G___pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external G___pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external G___pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class G_random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class G_drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CipherType {
  /// AES256-GCM
  static const int Aes256Gcm = 0;

  /// Xchacha20poly1305
  static const int Xchacha20poly1305 = 1;
}

abstract class Comparator {
  static const int Eq = 0;
  static const int Gt = 1;
  static const int Gte = 2;
  static const int Lt = 3;
  static const int Lte = 4;
  static const int Ne = 5;
}

/// Types that would be used for import and export
/// Currently only support `Json`, `Yaml`, and `Toml`.
/// Implementation can override these functions for their own
/// types to be use for import and export.
abstract class ConstellationDataType {
  static const int Json = 0;
  static const int Yaml = 1;
  static const int Toml = 2;
}

abstract class DataType {
  static const int Messaging = 0;
  static const int FileSystem = 1;
  static const int Accounts = 2;
  static const int Cache = 3;
  static const int Http = 4;
  static const int DataExport = 5;
  static const int Unknown = 6;
}

abstract class EmbedState {
  static const int Enabled = 0;
  static const int Disable = 1;
}

abstract class FriendRequestStatus {
  static const int Uninitialized = 0;
  static const int Pending = 1;
  static const int Accepted = 2;
  static const int Denied = 3;
  static const int FriendRemoved = 4;
  static const int RequestRemoved = 5;
}

abstract class PhraseType {
  static const int Standard = 0;
  static const int Secure = 1;
}

abstract class PinState {
  static const int Pin = 0;
  static const int Unpin = 1;
}

abstract class ReactionState {
  static const int Add = 0;
  static const int Remove = 1;
}

class G_Badge extends ffi.Opaque {}

class G_Cipher extends ffi.Opaque {}

class G_ConstellationAdapter extends ffi.Opaque {}

class G_DID extends ffi.Opaque {}

class G_Data extends ffi.Opaque {}

class G_Directory extends ffi.Opaque {}

class G_Ed25519Keypair extends ffi.Opaque {}

class G_Ed25519PublicKey extends ffi.Opaque {}

class G_File extends ffi.Opaque {}

class G_FriendRequest extends ffi.Opaque {}

class G_Graphics extends ffi.Opaque {}

class G_Identifier extends ffi.Opaque {}

class G_Identity extends ffi.Opaque {}

class G_IdentityUpdate extends ffi.Opaque {}

class G_Item extends ffi.Opaque {}

class G_Message extends ffi.Opaque {}

class G_MultiPassAdapter extends ffi.Opaque {}

class G_PocketDimensionAdapter extends ffi.Opaque {}

class G_QueryBuilder extends ffi.Opaque {}

class G_RayGunAdapter extends ffi.Opaque {}

class G_Reaction extends ffi.Opaque {}

class G_Role extends ffi.Opaque {}

class G_SenderId extends ffi.Opaque {}

class G_Tesseract extends ffi.Opaque {}

class G_X25519PublicKey extends ffi.Opaque {}

class G_X25519Secret extends ffi.Opaque {}

class G_FFIVec_Directory extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Directory>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

typedef uintptr_t = ffi.Uint64;

class G_FFIError extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> error_type;

  external ffi.Pointer<ffi.Int8> error_message;
}

/// Used when a function does not return anything when successful
class G_FFIResult_Null extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_usize extends ffi.Struct {
  external ffi.Pointer<uintptr_t> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_Item extends ffi.Struct {
  external ffi.Pointer<G_Item> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Item extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Item>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_File extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_File>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Directory extends ffi.Struct {
  external ffi.Pointer<G_Directory> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_File extends ffi.Struct {
  external ffi.Pointer<G_File> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_u8 extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_u8> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_String extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_DID>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_DID extends ffi.Struct {
  external ffi.Pointer<G_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Ed25519PublicKey extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Ed25519PublicKey>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Data extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Data>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Data extends ffi.Struct {
  external ffi.Pointer<G_Data> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Role extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Role>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Badge extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Badge>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_Identity extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Identity>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_FriendRequest>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Identity extends ffi.Struct {
  external ffi.Pointer<G_Identity> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_FriendRequest extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_FriendRequest> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_FFIVec_DID extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_DID> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_QueryBuilder extends ffi.Struct {
  external ffi.Pointer<G_QueryBuilder> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_Message>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIVec_SenderId extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<G_SenderId>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_FFIVec_Message extends ffi.Struct {
  external ffi.Pointer<G_FFIVec_Message> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIVec_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int cap;
}

class G_FFIResult_Tesseract extends ffi.Struct {
  external ffi.Pointer<G_Tesseract> data;

  external ffi.Pointer<G_FFIError> error;
}

class G_FFIResult_MultiPassAdapter extends ffi.Struct {
  external ffi.Pointer<G_MultiPassAdapter> data;

  external ffi.Pointer<ffi.Int32> error;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
